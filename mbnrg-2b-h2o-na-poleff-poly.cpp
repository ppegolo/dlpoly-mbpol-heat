#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
 5.240882240812754e+00, // 0
-3.236069801848578e+02, // 1
-7.622493245925024e+01, // 2
 1.143580109073909e+02, // 3
 2.151236155269179e+02, // 4
-4.667734486083008e+01, // 5
 1.238658293013337e+02, // 6
-3.171106553376626e+02, // 7
-5.764637992276813e+00, // 8
 9.852588914818480e+00, // 9
 7.121224255281373e+01, // 10
 3.563658488272510e+01, // 11
 7.183739281368258e+01, // 12
-2.510811583476894e+02, // 13
 2.039561421644155e+01, // 14
 2.026172314971953e+02, // 15
 8.630142021659191e+01, // 16
 5.049965126124401e+02, // 17
 1.933422510644931e+01, // 18
-8.317511429911293e+01, // 19
-1.175763348765390e+00, // 20
-1.185600269952318e+02, // 21
 1.213772839052333e+02, // 22
-2.054565837582343e+00, // 23
 2.108449957422989e+00, // 24
 1.296027405870565e+01, // 25
-2.348319895806030e+01, // 26
 2.118696708030407e+00, // 27
-1.547049752560882e+02, // 28
 2.021143053075970e+02, // 29
 5.418219666291479e+01, // 30
-1.316079684739588e+02, // 31
 5.403111722386900e+01, // 32
-1.657320417525703e+01, // 33
 5.483266584594801e+00, // 34
-1.415125957924749e+00, // 35
 2.310538295897132e+01, // 36
-5.955155051145195e+01, // 37
-4.151808764807465e+01, // 38
 2.969237343563028e+00, // 39
-9.649612753566315e+01, // 40
-1.017146889958352e+02, // 41
 3.825678637577681e-02, // 42
-1.760995136658482e+02, // 43
-7.408144013673990e+00, // 44
-3.591965003844234e+01, // 45
-2.432628212461170e+01, // 46
 8.667904960066862e+01, // 47
 2.354269513066471e+02, // 48
 3.314394294537883e+02, // 49
-1.855152072332981e+02, // 50
 4.182477924873173e+01, // 51
 1.628771352197702e+00, // 52
-2.841259858099265e+02, // 53
-7.208551182673999e+01, // 54
 2.840732064651074e+02, // 55
-5.644357432796171e+00, // 56
-1.144264422999819e+02, // 57
 1.172524201426291e+01, // 58
 6.848519624246525e+01, // 59
 2.267212147155074e+01, // 60
 5.221195787479387e+01, // 61
 4.562381352038082e+01, // 62
 3.312565177632746e+02, // 63
 5.157883316125917e+01, // 64
-4.227252910093016e+02, // 65
 2.119358645917585e+02, // 66
-2.776632057219827e+00, // 67
-1.292345666352444e+01, // 68
-8.103631856253603e+00, // 69
-1.422103163223801e-01, // 70
-1.325221721375823e+02, // 71
-3.036958834371251e+00, // 72
-1.204016396025756e+02, // 73
 1.756850011183157e+00, // 74
 3.227756200011756e+01, // 75
-1.761429397073837e+01, // 76
 2.543401379901229e+02, // 77
-1.012921443855351e+01, // 78
 8.485386694954252e+01, // 79
 3.803212352200895e-01, // 80
 3.143583606920311e+01, // 81
 7.000152251186056e+00, // 82
-2.722989386497823e-02, // 83
 3.678274080489980e+01, // 84
-1.883454473215697e-01, // 85
-3.817877829028208e+00, // 86
-5.801006270956112e+02, // 87
-3.626927171329361e+02, // 88
 5.541823754506633e+01, // 89
-6.781631227748782e+01, // 90
-3.684475901013402e+00, // 91
 7.933394312310427e-02, // 92
-5.655194692717390e+01, // 93
 9.744231099822065e+01, // 94
-4.739885716470084e+01, // 95
-6.834421510522350e+02, // 96
 3.279834472194443e+02, // 97
-1.061729665092440e+01, // 98
-1.166755893996140e+00, // 99
 5.801166699618249e+01, // 100
 1.348461523221296e-01, // 101
-1.414149557064101e+01, // 102
 1.015289022823868e+01, // 103
-2.361681321868037e+01, // 104
 8.778297496398901e+00, // 105
-4.552305045332776e+00, // 106
 5.925136709552552e+00, // 107
-1.169070225102894e+01, // 108
 4.441033812167441e+00, // 109
 1.560695720481984e+01, // 110
 1.340987922674479e+02, // 111
 9.063666981789510e-02, // 112
-3.072380522693279e+00, // 113
 7.244937292838209e-02, // 114
-2.455849398325101e-01, // 115
 8.888690456762792e+01, // 116
-2.011478878759223e+00, // 117
 2.514899338236092e+00, // 118
-3.929565359162914e-03, // 119
-2.511323556500134e+02, // 120
 6.164976625145080e-01, // 121
-5.756877324677830e-03, // 122
 3.041556797883086e+00, // 123
 4.349073586864394e+01, // 124
 1.750216881390237e+01, // 125
 1.653829454534091e+01, // 126
 5.437882118051917e+00, // 127
 2.301334232089935e+00, // 128
 2.086244148549524e+02, // 129
-3.305884760005304e-03, // 130
-4.484963514293640e+01, // 131
 8.781566391335742e+00, // 132
-8.380397189677891e+00, // 133
-2.327277402997254e+00, // 134
 3.161135165639406e+00, // 135
 9.368826553119726e+01, // 136
 2.793318109834076e+00, // 137
 8.393450316079437e-01, // 138
-3.332004690483148e+02, // 139
-1.541820331974504e+00, // 140
-3.391071752597423e+01, // 141
-1.459885841447410e+00, // 142
 1.864387267597430e+02, // 143
 4.229006975635857e+00, // 144
 1.838230138582081e-01, // 145
 3.557743041492458e+01, // 146
-6.606466950143012e+00, // 147
-7.829340402121104e+00, // 148
-2.137754482719244e+00, // 149
 6.444257729180484e+01, // 150
 8.291991495613804e+01, // 151
 6.294294372456089e+01, // 152
 1.301996758170564e-01, // 153
 1.208774161726431e-05, // 154
-2.741415131847233e+01, // 155
-8.497167241037070e+00, // 156
 5.040464149859743e+01, // 157
-6.260504113817454e-04, // 158
-9.579119834615549e+00, // 159
-2.126048818114980e+00, // 160
 8.668807420772454e+00, // 161
-1.434815869699685e+02, // 162
 2.497651349682286e+02, // 163
 1.244737084887175e+02, // 164
 3.221688784484576e+00, // 165
 1.201494891638766e+00, // 166
 8.921151053950227e-01, // 167
 3.579225256286862e+00, // 168
-1.449577813723790e+02, // 169
-2.615514304743463e-02, // 170
-6.718236252728244e+01, // 171
-1.199126849682896e+01, // 172
 1.273168963027882e-01, // 173
-1.041755021697301e+02, // 174
-1.338123559209652e+02, // 175
-3.118981590885996e+01, // 176
 1.920871822943175e+02, // 177
-8.189691067265790e-01, // 178
-4.606602543479104e+02, // 179
 6.534243607455219e-05, // 180
 4.851584562662551e+01, // 181
 1.684831850765433e+02, // 182
-7.710717725203631e+00, // 183
 1.929108521614821e+01, // 184
-1.494263516512816e+01, // 185
 1.114582932812832e+01, // 186
 1.258819545847357e-02, // 187
-4.685772525938108e-02, // 188
 3.397801594924602e-01, // 189
 5.176706332517943e+00, // 190
-1.009594915322586e+00, // 191
 2.796119158972301e-05, // 192
-2.893217153174915e+00, // 193
-1.671244094368070e+00, // 194
 8.707680268854500e+01, // 195
-6.258493566133926e-01, // 196
-3.326758193775739e+00, // 197
-5.478919808690757e+00, // 198
-2.962187420554496e+00, // 199
 1.024115898216473e+02, // 200
-4.739675921283258e-03, // 201
-3.575886737389793e-02, // 202
 2.681898500209732e+01, // 203
 3.420408276056751e-01, // 204
-6.656995943990303e+00, // 205
 5.107119249408000e+00, // 206
-7.442921169265815e-01, // 207
 2.178160499375242e+01, // 208
-1.663043460473131e+00, // 209
-1.087554498785278e-06, // 210
 6.403450049652777e-04, // 211
 3.173073514000324e+01, // 212
 2.559598352174821e-05, // 213
 1.016268559488365e-01, // 214
 1.419504900376666e+01, // 215
-1.674878645447005e+00, // 216
-3.657381038891984e-03, // 217
-1.360040238348823e+01, // 218
-1.750592319793602e-01, // 219
 3.195704639743771e-02, // 220
-3.423739340388537e-03, // 221
 6.071856797192888e-02, // 222
-2.659165056592243e-03, // 223
-1.645596520695334e-01, // 224
 3.914843816587242e+01, // 225
-2.752586742222346e-02, // 226
 5.400096761090247e-03, // 227
-1.377399113095702e-01, // 228
 1.338554493267172e+02, // 229
-4.406398433679369e-01, // 230
-5.112560250778491e-03, // 231
 1.427040259384775e+00, // 232
 8.872137611905652e+00, // 233
 7.566173061769904e-02, // 234
 3.968743514186522e+01, // 235
-2.966329642375567e-04, // 236
-2.354126337727803e+01, // 237
-2.103863467683940e+02, // 238
-6.484408393144648e+00, // 239
 7.940237898658689e+02, // 240
 3.303988411836618e-02, // 241
-2.377063804517778e-01, // 242
-1.242419172144438e+01, // 243
-8.978204721569335e-04, // 244
-4.440612803481985e-04, // 245
-7.938048309348743e-01, // 246
 5.590185067436129e-02, // 247
 2.691507790575093e-01, // 248
 3.338802724735077e-01, // 249
-2.885592294612854e+01, // 250
-7.884439318399100e+00, // 251
 1.390645787395747e+01, // 252
 1.190784521887726e+00, // 253
-7.513194393566467e+01, // 254
 4.406964317916407e+00, // 255
-5.713915788526183e-01, // 256
 2.437190406519446e+01, // 257
 1.840704692477881e-03, // 258
 2.878093787291423e+02, // 259
-5.066838325789075e+00, // 260
-8.224428136648033e-04, // 261
 2.693073242649550e-01, // 262
 2.862938549304472e+00, // 263
 2.784398836916611e-01, // 264
 2.209888885769141e+01, // 265
 1.059205003549996e+00, // 266
 8.328367241645205e+00, // 267
-2.194315198412132e-06, // 268
-1.971350519601975e-06, // 269
-1.477058499277990e+00, // 270
-2.871219107695246e-02, // 271
-2.468093553547323e+02, // 272
 4.905206479405020e+01, // 273
-8.004806505067784e-02, // 274
-6.021540283943671e-03, // 275
 6.210040855896199e+01, // 276
-2.118326517500430e-07, // 277
 3.991422776991183e-02, // 278
 3.104249014639635e+00, // 279
-1.881135111513738e+01, // 280
 1.049745183672801e+00, // 281
 2.037756938656144e+02, // 282
 2.248303914246101e+00, // 283
-3.650600109535996e+00, // 284
-2.548961341720269e-01, // 285
 1.746493025298820e+01, // 286
-2.419234557385140e-03, // 287
 1.247132167128808e-03, // 288
 2.728831609292791e-02, // 289
-1.472332419784909e+00, // 290
 5.955245996586847e-01, // 291
 8.338128093665916e-02, // 292
-1.475341623391451e+00, // 293
 5.427244973465322e-01, // 294
-3.889368203766098e+01, // 295
 3.660341316894936e-02, // 296
-4.691165742203555e-02, // 297
-1.084680385441345e-03, // 298
-4.006306802334324e-03, // 299
 6.691312756688741e-01, // 300
-1.706354233833873e+02, // 301
-1.441357360468811e+00, // 302
-8.065661806061586e-02, // 303
 1.683668709980990e-03, // 304
-5.699226078337064e+00, // 305
-6.406690078957030e+01, // 306
 1.155740626901070e-02, // 307
 6.164775806519911e+00, // 308
-2.084335907476353e-02, // 309
-1.384151897568255e-02, // 310
-5.814755823630382e+00, // 311
 1.452372462989457e-01, // 312
 3.913465112377271e-01, // 313
 6.312806834256207e-03, // 314
 7.801202365958072e+00, // 315
 9.063373079981086e-01, // 316
-2.144800192969738e-01, // 317
 1.471899496854820e+00, // 318
-4.761644036932029e+01, // 319
 2.790513751801240e-03, // 320
-5.479111088880866e-02, // 321
-1.022059989622148e+00, // 322
-3.879240164278154e+00, // 323
-8.432641298499622e+00, // 324
 4.479289157832385e+00, // 325
-8.599551919067556e+00, // 326
 4.028837866816144e+01, // 327
-1.423831423619115e-01, // 328
 2.475100894029259e+00, // 329
 5.021131293675369e-05, // 330
-1.047693575301704e+01, // 331
 1.429032149434570e+01, // 332
-3.801894706189525e+01, // 333
-9.589066452174120e-01, // 334
 1.941400677551586e-05, // 335
 4.586779536455950e-01, // 336
 4.146139856947094e-01, // 337
-6.786253680995540e-02, // 338
 3.770902118096320e+00, // 339
 7.535552493450871e-02, // 340
-7.888003593545639e+00, // 341
-1.103993301179499e-01, // 342
 3.125189545699281e-01, // 343
 2.397488824954916e-02, // 344
 2.067994993046094e-01, // 345
-1.585792278293479e+00, // 346
-1.850355209717896e+00, // 347
 2.168350246234747e+01, // 348
-2.203191314618843e+01, // 349
 3.681825897847010e-03, // 350
 3.990746334320339e-01, // 351
-2.720219271016992e+02, // 352
 1.337722882203065e-02, // 353
 1.355292184079644e+00, // 354
 2.092950685915785e-01, // 355
 4.453794521803695e-01, // 356
 6.336642717731074e-02, // 357
-6.369083119510797e-01, // 358
-6.943595992502180e+00, // 359
 2.266388084580748e-03, // 360
 1.812513547384939e-07, // 361
 1.490871334688623e-02, // 362
-1.285641534835066e+01, // 363
-1.105999558836325e-04, // 364
-6.137327321273562e+00, // 365
-1.986404796726548e-02, // 366
 1.579245505471643e+01, // 367
-4.835729823141004e+00, // 368
-1.355618200000791e-02, // 369
 1.000949510669630e-03, // 370
 6.250748827194516e-01, // 371
 1.063049513657821e-04, // 372
-7.965014357388072e+00, // 373
-1.019148917361360e+01, // 374
-5.174539232206282e+00, // 375
-4.294177900432997e-02, // 376
-4.230385951030809e-01, // 377
 9.224565690820469e-01, // 378
 5.178235717255556e-01, // 379
 7.899816729570840e-02, // 380
 1.869152442511748e+00, // 381
 9.122100946751065e-01, // 382
 1.084295281413723e+00, // 383
-3.064883992435142e+01, // 384
-4.642221905150391e+00, // 385
-7.185005509086210e-06, // 386
 6.612392295048897e-02, // 387
-1.177309352482638e+00, // 388
-3.613449041157041e+00, // 389
-1.619156241609430e-03, // 390
-5.364362154728315e-01, // 391
-8.790148462407865e-03, // 392
-2.601332817732316e-01, // 393
-8.006373812191571e-02, // 394
 1.398704462460309e-01, // 395
 3.087220578515685e-02, // 396
 3.752889146703514e-01, // 397
 2.519309621098484e+01, // 398
 5.315888954667783e-02, // 399
 5.876550823601025e-02, // 400
-7.030156687227078e+00, // 401
-5.227673615109758e-01, // 402
-7.821927995286716e-01, // 403
 3.414225618662008e+00, // 404
-3.740922736283579e+01, // 405
-6.182954698267935e-05, // 406
 2.279775520591931e+00, // 407
-1.271254112117098e-05, // 408
-2.083680875956571e+00, // 409
 3.227069141084395e+02, // 410
-9.386820879689409e-02, // 411
-4.608814118207575e+00, // 412
-3.873694799014411e-01, // 413
-3.036022172675507e+00, // 414
 1.900862921246686e+01, // 415
-4.894120316815365e-03, // 416
-2.184616983263862e-01, // 417
 1.651086010769468e+01, // 418
 1.073111225675233e-01, // 419
-1.751158077334804e+02, // 420
 2.081185281768807e-01, // 421
 9.268387954289638e-05, // 422
 1.876090560232799e+00, // 423
 1.332506948897891e-05, // 424
 1.637880890781188e-08, // 425
 1.804079681816151e+00, // 426
 2.344331657699141e+02, // 427
-4.459775245083467e-01 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.700027076675918e-01; // A^(-1)
    m_k_OH_intra =         1.984990549485073e+00; // A^(-1)
                           
    m_k_XH_coul =          2.732795818774895e-01; // A^(-1)
    m_k_XO_coul =          9.210104809544227e-01; // A^(-1)
                           
    m_k_XLp_main =         5.284107718646900e-01; // A^(-1)
                           
    m_d_HH_intra =         1.906314702463566e-03; // A^(-1)
    m_d_OH_intra =         1.534182334998532e+00; // A^(-1)
                           
    m_d_XH_coul =          6.693732314559490e+00; // A^(-1)
    m_d_XO_coul =          6.947347098825344e+00; // A^(-1)
                           
    m_d_XLp_main =         4.861029693646037e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_na_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_na_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_na_cutoff(double* r)
#else
void mbnrg_2b_h2o_na_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
