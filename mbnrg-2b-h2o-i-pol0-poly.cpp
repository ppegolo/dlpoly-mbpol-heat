#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
-1.719750986251727e+00, // 0
-2.440347359311752e+02, // 1
 7.595532213226613e+00, // 2
 2.840305598434215e+00, // 3
 8.503088762645143e+01, // 4
 1.708970681072599e-01, // 5
 7.060200270263421e+02, // 6
-1.515154755970294e+02, // 7
 2.746698482044034e+02, // 8
 8.007651667253447e+01, // 9
-6.377513231873061e+00, // 10
 2.196405509672599e+01, // 11
 6.046225394218984e+00, // 12
-1.835016870474517e+02, // 13
-2.529851741499363e+02, // 14
-1.784542401192764e+02, // 15
-3.506409765553322e+02, // 16
 1.096579024780160e+02, // 17
 4.980502881527557e+02, // 18
 1.026873887801921e+02, // 19
 1.754949688317755e+02, // 20
 1.726658327633770e+02, // 21
 3.710296356908622e+01, // 22
 3.554997401680025e+00, // 23
-3.368305799728640e+01, // 24
 5.733630307889429e+02, // 25
 1.047326581826828e+01, // 26
-1.159584569321380e+02, // 27
 1.530453546287846e+02, // 28
-3.884147087654698e+01, // 29
-1.752652656335571e+02, // 30
-2.494973609354756e+01, // 31
-1.978928980898590e+00, // 32
 4.852899246455652e+01, // 33
-7.786189131706258e+02, // 34
-1.394523243133233e+01, // 35
-1.554208379423670e+01, // 36
-2.174312769989320e+02, // 37
-1.015996424911054e+01, // 38
-4.070261527718711e+02, // 39
-1.031986572578992e+02, // 40
-1.734870514106243e+02, // 41
 1.529718963574216e-01, // 42
 4.454858034634276e+01, // 43
-1.816481731104178e+01, // 44
-2.527783554130806e+01, // 45
 1.427693246024902e+01, // 46
 5.612973163322084e+02, // 47
-4.990573670006818e+02, // 48
 3.883071474188626e+01, // 49
-4.335701251278794e+00, // 50
-1.229973675985108e+01, // 51
 7.289070148455838e+00, // 52
 1.950578460674167e+02, // 53
-1.575646249003017e+02, // 54
-7.316397807201099e+01, // 55
-1.620151077896486e+00, // 56
 1.246976958099466e+02, // 57
-1.897120026521007e+02, // 58
-1.133188841542243e+02, // 59
-3.055467025935708e+01, // 60
 6.393714611633906e+01, // 61
-2.066241046477782e+01, // 62
-1.229266082510359e+01, // 63
 1.992260493509244e+01, // 64
 1.123887153730474e+01, // 65
 8.268623248419033e+00, // 66
-9.653279150150207e+01, // 67
-2.231357285469274e+01, // 68
 8.970929820010372e+00, // 69
 1.465841112921152e+00, // 70
 1.021551894448550e+01, // 71
 1.200556599729534e+01, // 72
-4.104100193842419e+01, // 73
 3.880346491268147e+02, // 74
-3.430097823549030e+01, // 75
 3.695674132694950e+00, // 76
-7.089609967428073e+01, // 77
-4.485551504230832e+02, // 78
 2.923547851648178e+02, // 79
-1.436339565837280e+00, // 80
-6.849152735336752e+01, // 81
 1.516502071915215e+01, // 82
-2.058427500381526e-02, // 83
 3.891248608403536e+00, // 84
-2.556579351069141e+00, // 85
 1.935606451055997e+02, // 86
 2.977466041170598e+02, // 87
 6.598089570633934e+01, // 88
-1.024898746080885e+01, // 89
-3.187531005101578e+00, // 90
-2.098067872306484e+01, // 91
 4.974608043092664e-02, // 92
-3.690817553284075e+02, // 93
 1.305928199624082e+02, // 94
 4.584196560682879e+01, // 95
 3.014097038473737e+02, // 96
-4.591769132305592e+01, // 97
-1.858220536638356e+02, // 98
-2.982343668473946e+02, // 99
-9.586582271710300e+00, // 100
 2.455938485688671e+00, // 101
-1.293217079879309e+01, // 102
 2.721612965182587e+01, // 103
-4.520533389251769e+02, // 104
-2.425769481582854e+02, // 105
 6.662532746557213e+01, // 106
-1.878891778129134e+01, // 107
-7.561188984107278e+01, // 108
 2.358678013860552e+02, // 109
-1.803614448471281e-01, // 110
-7.247626773979677e+01, // 111
-1.943435472088199e+00, // 112
-5.403631188263267e-01, // 113
-3.566612105058354e+01, // 114
 4.983637374774725e+00, // 115
-1.193078979755973e+01, // 116
 1.484400415634470e+02, // 117
 3.080377399168470e+01, // 118
-2.574330346412916e-01, // 119
-2.837062578363015e+00, // 120
 3.337915637132009e+01, // 121
-2.945528017112660e-03, // 122
 1.389208576497636e+02, // 123
-5.479887383917929e+01, // 124
 5.519585432528840e-01, // 125
-3.218117094403980e+00, // 126
-2.996484501728235e+02, // 127
 1.128859213362023e+01, // 128
-3.704897521196074e+02, // 129
 6.947447397504387e+00, // 130
-3.423357291152195e+01, // 131
-1.931890097966499e+01, // 132
-6.062823387962250e+02, // 133
 7.510837455671974e+00, // 134
-1.888472144113280e+00, // 135
 1.307907550444726e+00, // 136
 1.439062931515840e+02, // 137
-4.855323037412889e+01, // 138
 9.074715916764571e+01, // 139
 4.064573129351229e-01, // 140
 2.099387995698762e+01, // 141
 2.025652406742347e+01, // 142
-1.417937271306432e+02, // 143
 2.161270152006227e+02, // 144
-1.541777414687316e-01, // 145
-1.961042711136623e+02, // 146
 7.746267328365070e+00, // 147
 2.928208102111953e+02, // 148
-9.007295923077400e-01, // 149
-2.177873598583494e+02, // 150
 5.816256121333452e-01, // 151
 3.236449969614169e+00, // 152
-6.546582685203550e-02, // 153
 7.006229584000699e-04, // 154
 4.363664100821364e+00, // 155
 1.139248226019349e+02, // 156
-8.726647847625763e+01, // 157
 6.115996299268589e-04, // 158
 2.839125361204615e+02, // 159
-2.414735221118303e-01, // 160
-2.135194545059401e+01, // 161
 5.045258724816019e+00, // 162
 8.067848831921805e+01, // 163
-2.200991996254688e+02, // 164
-3.357671995240232e+01, // 165
 3.190751346596906e+02, // 166
 3.072051663518734e-01, // 167
-3.179077377364081e+01, // 168
 1.662609468441986e+02, // 169
-6.558483107557224e+00, // 170
 3.763107399532490e+01, // 171
 8.968691215613163e+01, // 172
 1.851404150136110e+01, // 173
-2.683802021499099e+00, // 174
 1.414438312869022e+01, // 175
 3.141449087189304e-01, // 176
-1.682640596255025e+01, // 177
 5.119821604914781e+01, // 178
 1.215595185474603e+01, // 179
-1.352207209923880e-01, // 180
 2.202917825306896e+02, // 181
 4.542829966204165e+00, // 182
 3.973041952561739e+00, // 183
 4.949593329319828e+02, // 184
-4.721351238430445e-01, // 185
-1.058225842868877e-01, // 186
 3.342366278209352e+01, // 187
-3.477209699020843e-01, // 188
-9.646730673263641e-02, // 189
 8.871628170529088e+01, // 190
-7.586797574465966e+01, // 191
 8.632574746577987e-03, // 192
-9.727907189399162e-01, // 193
-3.642163668457092e+02, // 194
-1.244924470010935e+02, // 195
 8.478562589843879e-02, // 196
 2.916700618331499e+01, // 197
-2.313202095341188e+02, // 198
 1.346005981889163e-01, // 199
 1.483073786750127e+02, // 200
-1.971156495611946e-02, // 201
 9.649982141241916e-01, // 202
 2.462888822535940e+00, // 203
 3.187381276898498e+01, // 204
 1.821214501199467e+02, // 205
-1.160639117115172e+02, // 206
 3.204859250816035e+00, // 207
 2.100825205030546e+02, // 208
-9.377543676358363e+01, // 209
 2.128091601455716e-03, // 210
-5.243878767207165e-03, // 211
 1.732004992852629e-01, // 212
-8.627112094261388e-03, // 213
 3.114371476399385e+00, // 214
 7.676997312487117e-01, // 215
 9.137937383129049e+00, // 216
-6.677348215666510e+00, // 217
-1.694712009719933e+01, // 218
 1.307025536362335e-02, // 219
-1.131700887022568e+00, // 220
 5.141128405142744e-02, // 221
 6.746648954588415e-03, // 222
 2.700082831514736e-01, // 223
 4.890472925956475e-03, // 224
 1.627245232669715e+02, // 225
 1.441480042561852e-01, // 226
-1.196020686584257e-01, // 227
-2.034163672417936e+00, // 228
-1.117060107044678e+01, // 229
 7.403539178703019e+00, // 230
 3.195821092543715e-01, // 231
 4.997761423598947e+01, // 232
-8.845029004824321e-01, // 233
 1.514989364776671e+00, // 234
-2.306717937664089e+00, // 235
-3.465781685462878e-01, // 236
-7.782686518468485e-01, // 237
 7.738605969852382e+01, // 238
-1.457030813312209e+02, // 239
-2.771155153976206e+02, // 240
-4.226635149725200e-01, // 241
 6.706108176898476e-02, // 242
 7.854520580756338e+00, // 243
-4.732705153163105e-02, // 244
-2.042834385787864e-03, // 245
 6.667578507459542e+00, // 246
-2.689774635605558e-02, // 247
-5.452200212419918e+01, // 248
-1.066355581766828e-01, // 249
-1.864566547186698e+00, // 250
-2.395085981912195e-01, // 251
 2.691537999223297e+01, // 252
-9.672947045716596e+00, // 253
 2.090149740502063e+02, // 254
 7.093410426817476e-01, // 255
-2.402947561302681e+01, // 256
 1.987470437565782e+02, // 257
-8.440331816756932e-03, // 258
 2.748743234327382e+01, // 259
 2.579486329113751e+01, // 260
 6.888694504713505e-01, // 261
-9.647012458515043e-02, // 262
 1.064056657373990e+00, // 263
-8.079697808090160e-01, // 264
-2.235510907595647e+01, // 265
 4.983921955115593e-01, // 266
-8.914962864770760e+01, // 267
-7.304036340245314e-03, // 268
-1.387114761892995e-04, // 269
 1.525814665676828e+01, // 270
 2.067190949117652e-02, // 271
 2.890046654231459e+01, // 272
-6.937376614694543e-01, // 273
-4.221716577007367e-01, // 274
 3.030170687907981e-02, // 275
-1.798652340522529e+02, // 276
 1.180823952104433e-05, // 277
-1.097220457294418e+01, // 278
 2.535673584434305e+02, // 279
 2.681604556857985e+01, // 280
 6.013744683905338e+01, // 281
-2.144518274929968e+02, // 282
-5.740327746950628e+01, // 283
-1.762437906699914e-01, // 284
 8.124261673211430e-02, // 285
 2.349028347074536e+01, // 286
-1.121891445117779e-01, // 287
-7.777284400927448e-02, // 288
-5.662483862693162e+00, // 289
 2.956585542470398e+00, // 290
 1.983774125571302e-01, // 291
 4.653452716878045e+00, // 292
 1.552184121952353e-03, // 293
-1.606116373476324e+02, // 294
 1.386565609867609e+01, // 295
 4.966906499106468e+00, // 296
 6.237782902908729e+01, // 297
 8.220409228866590e-03, // 298
 1.060468401388057e-02, // 299
-5.172511460608226e+00, // 300
 4.199736938976945e+01, // 301
 4.429575451663555e-01, // 302
-1.921756089737333e+00, // 303
 2.513064598125171e-02, // 304
-7.145269108431287e+01, // 305
-8.419557611608292e+01, // 306
 2.571154268555616e-02, // 307
 2.393791586092647e+02, // 308
 5.616729712169204e-01, // 309
 1.094018276417544e+01, // 310
 1.926750078988237e-01, // 311
 1.604595756083962e-01, // 312
 4.774375866757183e+00, // 313
-2.569599093521737e-02, // 314
 2.610625500302378e+00, // 315
-8.172351220665782e+00, // 316
 1.201830750375209e+01, // 317
 5.683446889803714e+00, // 318
-1.279666544846424e+01, // 319
-3.120939871150286e-01, // 320
-1.712307307180241e+01, // 321
 6.621358549545142e+00, // 322
-5.053539703497269e-02, // 323
-6.854991935232215e+00, // 324
 1.169284266101493e+01, // 325
-1.292968965178437e+01, // 326
 3.677554913792046e+00, // 327
-2.686101388293934e+01, // 328
-1.602979564117569e-01, // 329
-6.987316335489755e-04, // 330
 3.881981886843499e+00, // 331
-6.089214469904914e+01, // 332
-4.443723568857794e+00, // 333
 1.826834236440181e+01, // 334
-3.244018207528700e-02, // 335
 4.129906761579779e+00, // 336
-1.970769137773493e+00, // 337
-3.726967728396386e+00, // 338
-2.966272729749908e+00, // 339
-2.595276774197469e-02, // 340
-8.853064290120047e+00, // 341
-4.513816563555536e-01, // 342
-7.419306318788511e+00, // 343
 5.999726447183261e-01, // 344
-1.877079319905449e+01, // 345
 2.940706034740004e-01, // 346
 9.495964420049983e+00, // 347
 2.881469246633296e+02, // 348
-3.343637854127711e-01, // 349
 8.300957328289379e-02, // 350
 2.748836527786280e-01, // 351
 6.854859979823378e+01, // 352
 1.245078642281644e-02, // 353
-3.062099252770599e-01, // 354
-6.269260970222974e-01, // 355
 4.750319781602300e+01, // 356
 2.165005617924786e-01, // 357
-4.542787885496316e+00, // 358
-2.791041755270389e-01, // 359
 1.079656664184350e-01, // 360
 9.610577294582375e-04, // 361
-4.992874763399765e+01, // 362
 3.244825410695284e+00, // 363
-4.197621551651016e-02, // 364
 1.371326337931623e+01, // 365
 1.441115361928066e-02, // 366
-2.810646600270775e+02, // 367
 1.901203109776882e+00, // 368
 2.516728428450883e-01, // 369
-1.629870689333627e-02, // 370
 3.933150069496934e+02, // 371
-3.483347670444002e-03, // 372
-3.346958417899096e-01, // 373
 1.312744559652769e+02, // 374
-8.760347961202622e+01, // 375
-7.361126338301246e+00, // 376
 1.081400100493400e+02, // 377
-4.060129077489793e+00, // 378
-2.676018095051313e+00, // 379
-8.974196819258673e-02, // 380
-2.814858028259578e+00, // 381
-9.043363754371643e-01, // 382
 4.986218612559855e-01, // 383
-7.562990934491779e+02, // 384
 1.298504002492862e+02, // 385
 1.293317019512002e-03, // 386
-1.762940131558084e+02, // 387
-1.248103722876684e+01, // 388
 1.062904239749712e+01, // 389
-2.528960320056003e+00, // 390
-8.752350139015876e+01, // 391
-6.229705766699744e+00, // 392
 1.397105175222320e-01, // 393
-1.024572240486830e-01, // 394
 5.511443029924751e-02, // 395
 4.505831673575595e-01, // 396
 3.700646716685193e-01, // 397
-4.185781901062153e+00, // 398
-1.609133699952457e+00, // 399
 1.922966611048636e-02, // 400
-6.056311209279645e-02, // 401
-1.346603254629857e-02, // 402
-5.599329222717929e+00, // 403
-1.249014601159088e-01, // 404
 1.251734726143937e+00, // 405
 5.709318871269162e-02, // 406
 1.236103174488391e-01, // 407
 4.785562561296782e-02, // 408
 4.529924608862920e-01, // 409
-1.111860404845910e+01, // 410
-7.230017620944811e+00, // 411
-1.191399479164176e-01, // 412
 1.236890246397872e+02, // 413
 1.468074792045745e+00, // 414
 6.163642330862946e-01, // 415
-1.788471884201291e-01, // 416
-6.635472994875248e-01, // 417
 4.701251729681214e+02, // 418
-3.312565491752759e-01, // 419
 1.191596104637280e+01, // 420
-4.894385552040444e+00, // 421
 3.796109619786152e-03, // 422
-4.344372576740462e+00, // 423
-1.279033896616778e-03, // 424
 1.170536699280828e-05, // 425
-1.350321595146317e-01, // 426
-5.928022286608185e+01, // 427
 6.222222648437140e+00  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         1.583393384548416e-01; // A^(-1)
    m_k_OH_intra =         3.491566376130743e-01; // A^(-1)
                           
    m_k_XH_coul =          3.286935988786449e-01; // A^(-1)
    m_k_XO_coul =          1.118053946010315e+00; // A^(-1)
                           
    m_k_XLp_main =         7.078793380530125e-01; // A^(-1)
                           
    m_d_HH_intra =         1.999967903790315e+00; // A^(-1)
    m_d_OH_intra =         1.064619251661728e+00; // A^(-1)
                           
    m_d_XH_coul =          6.999999730788666e+00; // A^(-1)
    m_d_XO_coul =          6.520291137258836e+00; // A^(-1)
                           
    m_d_XLp_main =         5.631089166104931e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_i_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_cutoff(double* r)
#else
void mbnrg_2b_h2o_i_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
