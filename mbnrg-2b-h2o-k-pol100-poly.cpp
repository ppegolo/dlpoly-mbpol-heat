#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
 6.065254497692316e-01, // 0
-6.114096481270298e+02, // 1
-9.305075757462014e+00, // 2
 5.640625154925623e+01, // 3
-4.137817173244128e+01, // 4
-9.168534105828842e+01, // 5
 3.693253517450356e+02, // 6
-2.301579866879601e+00, // 7
-3.801650823535039e+01, // 8
 2.789627394331012e-01, // 9
 5.295583740392076e+01, // 10
 4.981487186215625e+02, // 11
-9.948584373198649e+00, // 12
-5.640931144050051e+02, // 13
 5.354575190758327e+01, // 14
 3.499926414469439e+01, // 15
 2.430420638786384e+02, // 16
 2.223355515070522e+02, // 17
 7.837957140598779e+02, // 18
 1.886441756876009e+01, // 19
-8.196140683905375e+00, // 20
 5.126241120857115e+01, // 21
-3.524580681376030e+01, // 22
 2.488115646681978e+00, // 23
 3.053273496463926e+02, // 24
 4.975741120008209e+01, // 25
-1.041375905952679e+02, // 26
 8.349089984681295e-01, // 27
-3.345842799713068e+01, // 28
 3.997307569989483e+02, // 29
-4.149492397948617e+02, // 30
-4.838620736817023e+01, // 31
-2.361015140249238e+02, // 32
 2.348457724854862e+02, // 33
 2.561284269202192e+01, // 34
 2.503389179289800e+00, // 35
 4.859923957109673e+02, // 36
-1.615967366582750e+02, // 37
-4.675792527849092e+01, // 38
 3.266850200004423e+02, // 39
-3.329248796141965e+01, // 40
 1.815202256580101e+02, // 41
-7.499698275194968e+00, // 42
-1.151182522229284e+02, // 43
-1.575604990476054e+02, // 44
 9.696005980891677e+01, // 45
 2.619584306205701e+02, // 46
 1.385368840005708e+02, // 47
-4.692922121038258e+02, // 48
 3.337899948658709e+02, // 49
-1.025157875916599e+02, // 50
 2.676531125883237e+02, // 51
-1.030097989987268e+02, // 52
-1.390959095956599e+03, // 53
 1.327289386271042e+01, // 54
 2.031426034239080e+02, // 55
-1.537335268613341e+02, // 56
 6.973910316236629e+01, // 57
 1.790862603932202e+02, // 58
 3.191064881754205e+01, // 59
 6.749283256522983e+02, // 60
 4.519939137541651e+01, // 61
 4.143518823795729e+02, // 62
-2.027535011607672e+02, // 63
 6.018330505441132e+01, // 64
-4.538752708410198e+02, // 65
 4.435481515871628e+01, // 66
-8.394990761153642e+01, // 67
 3.543364422471355e+01, // 68
-5.187239416192565e+01, // 69
-2.384948315437328e+01, // 70
-1.022166282097184e+02, // 71
-9.010011239509578e+01, // 72
 1.113026450950415e+02, // 73
 1.768414952197566e+02, // 74
 5.615829958501029e+02, // 75
-5.109476819380759e+01, // 76
 1.080992316085537e+03, // 77
-8.395709775323048e+02, // 78
 9.341112451794634e+02, // 79
 3.915086671199040e+02, // 80
 1.123162724437329e+02, // 81
 3.538029591774752e+02, // 82
-8.349949438782683e+01, // 83
 8.601496079558906e+01, // 84
-1.186242718044459e+02, // 85
-4.075940365823159e+00, // 86
-4.340325116522475e+02, // 87
-7.567991817502447e+01, // 88
 2.935180106243703e+02, // 89
-4.457359586323019e+02, // 90
 7.309063856516346e+01, // 91
-4.612718846580154e+01, // 92
 2.782249006000038e+01, // 93
 2.021040220211171e+01, // 94
-4.710071006990848e+02, // 95
-6.484883014788811e+02, // 96
 1.345016142684481e+02, // 97
-6.122727535854838e+01, // 98
-2.531276318515819e+02, // 99
 1.816901442799370e+03, // 100
 2.902129474201924e+02, // 101
-1.372717184765128e+02, // 102
 1.196400747623708e+01, // 103
-8.989897533803745e+02, // 104
 9.201284600771835e+01, // 105
 1.339497285865799e+02, // 106
 2.173182707158746e+01, // 107
-1.657697533033741e+02, // 108
 7.951327294986449e+01, // 109
 1.202982305659214e+02, // 110
 3.188878246298295e+02, // 111
 1.901593843577208e+01, // 112
-4.198304394951616e+02, // 113
-1.561898564985588e+01, // 114
-1.246497515962089e+01, // 115
 2.996838551079223e+02, // 116
 6.306592613650152e+01, // 117
 1.713232928228890e+02, // 118
-1.519196465675428e+01, // 119
-1.184684047536916e+02, // 120
 1.111604229587338e+02, // 121
-1.033248599430571e+00, // 122
-1.364941262667908e+01, // 123
 6.482177945060708e+01, // 124
-2.633217687921305e+01, // 125
 5.211356888305671e+01, // 126
 6.013071470270109e+01, // 127
-8.044996690668519e+01, // 128
 2.205567297471583e+02, // 129
 2.046835911609697e+00, // 130
-3.244656399529134e+01, // 131
 2.786655207424150e+00, // 132
-5.792574819965624e+02, // 133
-4.228158727735931e+01, // 134
 7.872812037697290e+01, // 135
-1.733512573740907e+02, // 136
 7.267580632092795e+01, // 137
 2.388964198675474e+02, // 138
-3.882200462067142e+02, // 139
-5.545779076494212e+00, // 140
-9.640299881328208e+01, // 141
 5.462836269890519e+01, // 142
 1.019508301996981e+03, // 143
 1.284582611964489e+02, // 144
 4.988156431448907e+01, // 145
-7.355852860015649e+01, // 146
-6.451838719357676e+01, // 147
-3.423803580315125e+02, // 148
 1.097385848592858e+01, // 149
 2.927103422278762e+02, // 150
-3.538642497744462e+01, // 151
 2.469199536024826e+01, // 152
 2.159279921440200e+01, // 153
 7.206657123207285e-01, // 154
-1.426233959648111e+02, // 155
-1.323344454600735e+02, // 156
 1.015395990972306e+02, // 157
 1.881645304502846e+00, // 158
-4.369131849849161e+02, // 159
 6.615315502872546e+01, // 160
 2.526807303065859e+02, // 161
 3.328189735793969e+02, // 162
-2.330608927167875e+02, // 163
 9.573336169706738e+01, // 164
 3.912942851345206e+02, // 165
 1.959018424160838e+02, // 166
-5.666490621251067e+01, // 167
 5.245990368361541e+02, // 168
 7.213036187346154e+02, // 169
-1.254293800581398e+02, // 170
-5.694671889914156e+02, // 171
-7.746818084542481e+02, // 172
-5.911378637402237e+01, // 173
 1.068650601911174e+02, // 174
-8.220207157889208e+02, // 175
-2.792616706683610e+02, // 176
 4.139730475790445e+02, // 177
-3.247104763540261e+02, // 178
-3.946706524153305e+02, // 179
 9.450322535972823e+00, // 180
-1.524522675768692e+02, // 181
-1.283896742637575e+02, // 182
-6.298693355540958e+02, // 183
-1.189912036162003e+02, // 184
-6.568769743434250e+02, // 185
 1.330380721004885e+02, // 186
 6.621446268958967e+01, // 187
-3.009843601502586e+01, // 188
 5.830138984720992e+00, // 189
 9.961163408198207e+01, // 190
-3.852693368092686e+00, // 191
-3.294688460500513e+00, // 192
-3.845727202857189e+01, // 193
-1.046696671322134e+02, // 194
 2.261423792643428e+02, // 195
-7.094961151978312e+00, // 196
 9.401180614553265e+01, // 197
-4.287228259861319e+01, // 198
-3.147426637320398e+01, // 199
 4.895015736749683e+02, // 200
 7.903830799132566e+00, // 201
-2.347290509205441e+01, // 202
 2.486949297784063e+01, // 203
 8.505104509211527e+01, // 204
-1.315514458168526e+02, // 205
-2.941347495057023e+01, // 206
 4.679156328468715e+00, // 207
-5.106693297568072e+01, // 208
-1.874191520120351e+02, // 209
 2.799104234682690e-01, // 210
 2.033253830351791e-01, // 211
 1.332453173392969e+03, // 212
 8.722140922318139e-01, // 213
 3.434844484689375e+01, // 214
 6.436249748263292e+00, // 215
-1.137696630319731e+02, // 216
-3.048344636339217e+01, // 217
 1.893562106350987e+00, // 218
-4.710198035269942e+01, // 219
 6.723320465694718e+01, // 220
-5.498176167909381e+00, // 221
 2.392378061254265e+00, // 222
-1.013539519747455e+01, // 223
 6.590107293143232e+00, // 224
 2.546842274133137e+02, // 225
-3.426828482394014e+00, // 226
-1.037653329249311e+01, // 227
 2.653378962072732e+01, // 228
 2.260586709906062e+02, // 229
-3.326305670840193e+01, // 230
 5.048529184638888e+00, // 231
 1.369643514498137e+02, // 232
 5.304842817386562e+01, // 233
 2.037571182219917e+00, // 234
 2.306842100314931e+02, // 235
-2.410219019702439e+00, // 236
-8.833010444171446e+00, // 237
-4.472698316824465e+01, // 238
-9.782562967512550e+01, // 239
 7.440180345109048e+02, // 240
 1.518352941848893e+01, // 241
-9.234879203667806e+01, // 242
-1.159021856073869e+02, // 243
 4.279414992630988e+01, // 244
 4.465912845662278e+00, // 245
 4.849146808894655e+00, // 246
-2.776778070644641e+00, // 247
 6.216934815966837e+01, // 248
 3.780102671095283e+01, // 249
-3.803088681192431e+02, // 250
-8.634222009233731e+00, // 251
 2.705299417441819e+02, // 252
 1.318532732812897e+02, // 253
 1.549116060020158e+02, // 254
 3.618518424720872e+01, // 255
-2.025078902818193e+02, // 256
 2.977441718976916e+02, // 257
-3.066393862473661e+00, // 258
-1.973501545420286e+01, // 259
-3.211665560410520e+01, // 260
-3.333946940084722e+00, // 261
-4.637944288966049e+00, // 262
 1.215904762519038e+01, // 263
-1.305940856062190e+01, // 264
 3.627837251890417e+02, // 265
-2.500917143512985e+02, // 266
-2.856584751429538e+01, // 267
 2.467917982923852e-01, // 268
-1.819629116252591e-02, // 269
 7.103703573539040e+00, // 270
-1.810395990125380e-01, // 271
-1.020654389433483e+02, // 272
 5.166167020158220e+01, // 273
 1.226965410525966e+01, // 274
 2.485198271958380e+00, // 275
-9.674841595137572e+02, // 276
-2.098377590868664e-02, // 277
 6.269903661287000e+01, // 278
-5.450621089355234e+02, // 279
-1.436536133684673e+02, // 280
-1.479495977625216e+02, // 281
 3.071465503189388e+02, // 282
 1.259843294167929e+02, // 283
 1.647412709863953e+02, // 284
-5.316150910805518e+00, // 285
 4.239561871641641e+02, // 286
 5.797008728628421e+00, // 287
 7.347469916606070e+00, // 288
 6.026804785265020e+01, // 289
-2.135777598719218e+01, // 290
 1.127309996487118e+01, // 291
 3.522444447988709e+00, // 292
 9.434836451896864e+00, // 293
-6.568025737833180e+01, // 294
-6.452258548197798e+02, // 295
 2.978030788796958e+01, // 296
 8.538675216382974e+01, // 297
 1.158090072462492e+00, // 298
 1.444529714028176e+00, // 299
 5.623011286728316e+00, // 300
-4.817975083532895e+02, // 301
-2.103333468097251e+02, // 302
-2.931165564852175e+01, // 303
 1.941718283561153e+01, // 304
-2.632658567911504e+02, // 305
-1.309026518768902e+02, // 306
-1.555048971912760e+01, // 307
 8.368323607445782e+02, // 308
 5.376762440307409e+00, // 309
 2.706480964511206e+01, // 310
 2.592488893214603e+00, // 311
-7.915189853547179e+00, // 312
-5.447009411775581e+00, // 313
-4.564611099845375e-01, // 314
-4.593739176703475e+01, // 315
 1.781621922255866e+02, // 316
-1.268560593556414e+01, // 317
-2.691701941228112e+01, // 318
-3.819433835334337e+02, // 319
 8.491911929318098e+00, // 320
 1.617563969291874e+01, // 321
-5.905821897597037e+01, // 322
-1.057853714510468e+00, // 323
-5.210102829736121e+00, // 324
 1.001236004844991e+02, // 325
-1.884385069485041e+02, // 326
 6.009962985936146e+01, // 327
 4.896916960439579e+00, // 328
 5.869138012169577e+01, // 329
-1.055886959921812e-01, // 330
-2.821684219959752e+02, // 331
-2.078408557342690e+01, // 332
-2.239560013300833e+01, // 333
-3.822861050003312e+01, // 334
-7.511626977694392e+00, // 335
-1.260980188104465e+01, // 336
-1.794370949844051e+01, // 337
-1.767677316167639e+01, // 338
 2.242111161824744e+02, // 339
 5.095222942220627e+00, // 340
 2.159778032605689e+02, // 341
 8.464697642791937e-01, // 342
 4.594062357085384e+01, // 343
-1.268746098984002e+01, // 344
-1.819197447269053e+01, // 345
-2.578273136765813e+01, // 346
-1.193677270726948e+02, // 347
 3.217977866254324e+02, // 348
-4.891735721925101e+01, // 349
-4.623031786138178e+00, // 350
 2.854844216008463e+01, // 351
-4.329971151345554e+02, // 352
 3.211246054377401e+00, // 353
 2.139616926137420e+01, // 354
-2.931783423905972e+01, // 355
 1.685408027141508e+01, // 356
 5.025012296048772e+01, // 357
-9.153099273031542e+01, // 358
 1.474501573273492e+00, // 359
 1.280692544207700e+01, // 360
-1.816757646572434e-01, // 361
-7.016088913969770e+01, // 362
-4.191280292609308e+01, // 363
-1.000104795274760e+00, // 364
 2.819995367663315e+01, // 365
-2.028127442793750e+01, // 366
 4.628180618987448e+02, // 367
-6.336725218096323e+01, // 368
-1.256432648482650e+01, // 369
 1.051282483712995e+01, // 370
 3.891757517660223e+01, // 371
 1.725533025840900e+00, // 372
-1.178273385211048e+02, // 373
 4.385041939205271e+01, // 374
-3.305004489917030e+02, // 375
-5.275886385152991e+01, // 376
-7.878738295342924e+01, // 377
-3.900567823491495e+01, // 378
-2.885896342788043e+01, // 379
-6.487224325276618e+01, // 380
 2.637884227991169e+01, // 381
 4.840711994234903e+01, // 382
 2.257360436487226e+02, // 383
 1.670455413325627e+02, // 384
-2.605318708170385e+02, // 385
 2.036008475656340e-01, // 386
-2.277363546492128e+01, // 387
-2.517414473596245e+01, // 388
-3.609929471222535e+01, // 389
 1.081191505299991e+01, // 390
-1.553838411543703e+02, // 391
-5.324176391588828e+01, // 392
-8.776684380477539e+00, // 393
-1.824919747473576e+02, // 394
-1.022140850892678e+01, // 395
-2.195881816678843e+01, // 396
-2.469026898711355e+00, // 397
 1.840059909334860e+02, // 398
 3.150780097203643e+01, // 399
-1.131711390910471e+01, // 400
-3.803069275118420e+01, // 401
 3.815146721309421e+01, // 402
-1.242987636342191e+01, // 403
-1.374327416148109e+01, // 404
-6.466667992865005e+00, // 405
-2.053597315967216e+00, // 406
-3.425868408878040e+01, // 407
 2.026749866155735e-01, // 408
-6.431051450739970e+01, // 409
 1.002720985164689e+02, // 410
 6.113396313330023e+00, // 411
 8.232081943652561e+00, // 412
-3.734860960531497e+01, // 413
 2.051387907440348e+01, // 414
 3.244878425282496e+01, // 415
 1.753221829249333e+00, // 416
 5.219320067290884e+00, // 417
 1.278646777198348e+03, // 418
 2.175848826013825e+01, // 419
-9.436002716577535e+02, // 420
 4.619283566359301e+01, // 421
-6.898619702798246e-02, // 422
 3.859347691172144e+01, // 423
-1.162494928341083e-01, // 424
 1.221854488053623e-03, // 425
-1.390572742541660e+01, // 426
-9.378217025479384e+01, // 427
 1.459201546889469e+01 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.377427362895352e-01; // A^(-1)
    m_k_OH_intra =         1.999994321311263e+00; // A^(-1)
                           
    m_k_XH_coul =          1.986401977927494e-01; // A^(-1)
    m_k_XO_coul =          1.373943653398614e+00; // A^(-1)
                           
    m_k_XLp_main =         7.815071238402381e-01; // A^(-1)
                           
    m_d_HH_intra =         5.669440892013204e-01; // A^(-1)
    m_d_OH_intra =         7.466617529933223e-01; // A^(-1)
                           
    m_d_XH_coul =          4.662999403661182e+00; // A^(-1)
    m_d_XO_coul =          3.646598993078812e+00; // A^(-1)
                           
    m_d_XLp_main =         3.748049151082972e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_k_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_k_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_k_cutoff(double* r)
#else
void mbnrg_2b_h2o_k_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
