#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
 4.897492291740708e+01, // 0
-1.516585391130714e+02, // 1
 1.497642904306422e+01, // 2
 8.573312482031093e+01, // 3
 5.341073170320757e+01, // 4
 1.985945897366133e+01, // 5
 2.690157035126962e+02, // 6
-1.195500691859441e+02, // 7
-2.020406238742216e+02, // 8
-3.312043216156898e+01, // 9
-1.573168940760432e+02, // 10
 1.761258130986764e+02, // 11
-9.973786384768178e+01, // 12
-2.016472300792739e+02, // 13
-9.718532249735050e+00, // 14
-1.206341921793021e+02, // 15
 7.806576672656789e+02, // 16
 3.498035387945399e+01, // 17
-1.394040769236459e+02, // 18
 8.804730769924954e+01, // 19
 7.928926876588477e+01, // 20
 1.419535014015347e+02, // 21
-5.927856182756225e+01, // 22
-1.735053534030181e+02, // 23
 8.856535123601645e+02, // 24
 1.501224813824032e+02, // 25
-3.529427689361062e+02, // 26
-8.130532448455766e+01, // 27
 1.335699441864329e+02, // 28
 2.712274388066883e+02, // 29
-2.406225872196121e+02, // 30
 5.904383420240056e-02, // 31
-5.080765958770940e+00, // 32
-5.836785938518055e+02, // 33
 3.451867296723578e+02, // 34
-1.819854328395533e+01, // 35
-5.390771828325586e+02, // 36
-7.642525347751797e+01, // 37
 1.651979747915716e+01, // 38
 1.375021055895323e+01, // 39
 3.795925040706401e+01, // 40
 2.307575743694903e+02, // 41
-4.941658999018867e+02, // 42
 4.699230622190086e+02, // 43
 5.850984328606740e+00, // 44
 3.575847955195122e+01, // 45
-5.826174819762721e+01, // 46
 1.411608632915261e+02, // 47
-7.931466662575957e+02, // 48
-6.229438387426937e+00, // 49
-2.776291025768372e+01, // 50
 2.971225701891459e+02, // 51
-5.542104357497551e+01, // 52
-3.191259910290059e+02, // 53
 1.569163875259057e+02, // 54
-8.162321073140242e+02, // 55
 1.926530161095378e+02, // 56
-5.880963216778689e+01, // 57
 2.259994106298343e+02, // 58
 6.981800639389395e+01, // 59
-4.244289314307561e+02, // 60
 2.300593609633334e+02, // 61
 2.642721678024560e+02, // 62
 1.745740006857411e+02, // 63
 2.632756554572875e+00, // 64
-6.808411087276592e+02, // 65
-2.180259277213984e+01, // 66
-8.289882954207836e+01, // 67
-7.388787276134500e+00, // 68
 3.683192431012174e+01, // 69
 4.925339651722547e+01, // 70
-3.703399263860517e+01, // 71
 8.993903250968353e+01, // 72
 7.197732082201688e+00, // 73
 2.784031802725726e+01, // 74
 1.096725580103203e+03, // 75
-4.790754864838048e+00, // 76
 7.336823406645628e+02, // 77
-2.129393041695949e+02, // 78
 1.313531441753890e+03, // 79
 9.930696942805855e+02, // 80
-5.795276508637775e+01, // 81
 5.464826941742460e+00, // 82
-7.967922956095615e+02, // 83
 1.953759609312281e+01, // 84
-8.048617082369691e+01, // 85
 4.859515621584531e+01, // 86
 5.952167210549465e+01, // 87
-7.305305857791870e+00, // 88
 5.912698416856591e+01, // 89
-6.988576106857777e+02, // 90
 9.064311970298276e+00, // 91
-2.177538856165734e+02, // 92
 7.075390364171143e+01, // 93
 5.346978478629062e+01, // 94
-5.476792916880644e+02, // 95
 7.053583878384397e+01, // 96
 4.081724877900853e+00, // 97
-9.618800253415344e+01, // 98
-2.589340562675423e+01, // 99
-1.506836359110940e+02, // 100
 4.335540130818043e+02, // 101
-3.490503747249037e+01, // 102
 6.577338541402716e-01, // 103
-1.185258665035250e+02, // 104
 7.592907896496355e+01, // 105
 1.565105733025671e+02, // 106
 9.390723663430877e+01, // 107
-2.950488225050323e+02, // 108
-5.877066852365207e+01, // 109
-1.388090467294030e+02, // 110
 1.199865553140461e+02, // 111
-1.698025524263716e+02, // 112
-1.074019723738802e+02, // 113
-1.199548802791434e+02, // 114
 5.036754470695577e+01, // 115
 2.407998873302163e+01, // 116
 9.352044270733469e+01, // 117
 2.199459950650444e+02, // 118
 1.131923160840767e+02, // 119
-5.812861563679172e+00, // 120
 4.899096503937171e+02, // 121
-1.447387160346829e+02, // 122
-5.215813555883322e+01, // 123
 3.985778536673166e+01, // 124
-5.208111612454068e+00, // 125
 1.822696938493705e+01, // 126
-1.273807451873392e+02, // 127
-3.294366061215577e+01, // 128
-4.945560511099211e+00, // 129
-1.118304723977931e+02, // 130
 4.244124394346979e+01, // 131
 4.543421019514973e+00, // 132
-3.662957079219602e+02, // 133
-9.479842813661512e+01, // 134
 1.380116826971090e+03, // 135
 6.474518412235534e+01, // 136
-1.552893692574428e+02, // 137
-4.429855362439316e+02, // 138
-3.014389565573294e+02, // 139
 2.813496622796992e+02, // 140
 5.974365585748994e+00, // 141
 1.769601960917881e+02, // 142
-8.059658260299265e+00, // 143
 5.947308114806452e+01, // 144
 4.869935281721046e+01, // 145
-4.143341173012187e+01, // 146
-2.198059833520129e+01, // 147
-2.360298989982209e+02, // 148
 8.752666118512886e+01, // 149
 4.458532243377236e+01, // 150
-5.547966256419741e-01, // 151
-1.881746956051699e+00, // 152
 4.122658322391641e+02, // 153
 1.864095070664501e+02, // 154
 1.432520680122196e+01, // 155
-1.559899387986930e+02, // 156
-1.890016457619126e+02, // 157
-4.977751223110570e+02, // 158
-2.619674659846543e+02, // 159
-1.762204842271249e+01, // 160
 1.661893397381515e+02, // 161
 3.266326555391880e+02, // 162
-2.915406146488333e+02, // 163
 9.502230350115745e+01, // 164
 1.726611199635036e+02, // 165
 5.940656685824270e+01, // 166
 7.574412820942359e+01, // 167
 1.688265489318462e+02, // 168
 5.849263324185963e+02, // 169
-1.188084006497784e+03, // 170
-3.501479907092660e+02, // 171
-5.530127743257234e+02, // 172
-8.537743254757920e+01, // 173
 2.329138832587713e+00, // 174
-5.481319495084991e+01, // 175
-1.488149472534614e+02, // 176
-3.179689485413945e+00, // 177
 2.166889110358301e+02, // 178
 4.753949631130733e+00, // 179
-5.221580943466056e+01, // 180
-3.144906439188079e+02, // 181
 6.079260801168672e-01, // 182
-4.616761557702970e+02, // 183
-5.675376991037768e+00, // 184
-1.231152068698985e+03, // 185
-1.100770538923581e+01, // 186
 1.953891069372485e+02, // 187
 9.507699563006362e+01, // 188
 2.671167142531357e+00, // 189
 1.334311952491145e+02, // 190
-3.173078684923636e+01, // 191
-1.717815581610984e+02, // 192
 2.135529742044153e+00, // 193
-7.067887434603691e+01, // 194
 1.287200543735170e+02, // 195
-2.001350026311298e+00, // 196
 5.111952650263322e+02, // 197
 1.515486649019090e+02, // 198
 6.318255759273047e+01, // 199
 3.814985859392834e+02, // 200
 3.443789025634477e+01, // 201
-2.948653674016460e+01, // 202
 1.582583626324242e-01, // 203
 3.584109393687387e+01, // 204
 1.617721447603764e+01, // 205
-4.437239274413287e+02, // 206
-2.778880063023869e+01, // 207
-1.021233737107075e+00, // 208
-1.993545498747331e+02, // 209
 1.752341450201310e+01, // 210
 6.193904998504199e+00, // 211
 1.048151829963827e+03, // 212
 6.736123102885007e+01, // 213
 1.093626854034780e+02, // 214
-4.397231134231662e-01, // 215
-1.504730295336743e+01, // 216
-2.644956404445561e+02, // 217
 4.265460790629228e+01, // 218
 1.139327439599358e+02, // 219
 2.912199893732899e+02, // 220
-2.319778349711494e+01, // 221
 6.191485632450404e+01, // 222
-1.766199358105113e+02, // 223
-6.258337677410191e+01, // 224
 2.628493925682801e+02, // 225
 4.272810826163968e+01, // 226
-1.546904905292263e+00, // 227
-1.717825236754235e+01, // 228
-2.905487163806735e+01, // 229
 4.379619276411776e+01, // 230
 3.035682228490201e+02, // 231
 4.882480513714012e+01, // 232
-5.395502243751855e+00, // 233
-3.403523620898413e+02, // 234
 1.756412746086169e+01, // 235
 9.737692549535311e+00, // 236
-4.517812718878247e-01, // 237
-5.030350491246795e+01, // 238
-1.417510964565677e+00, // 239
 1.924732071711021e+02, // 240
 5.455220262527915e+01, // 241
-2.579077413679228e+01, // 242
-6.128533240424341e+02, // 243
 1.229409581211998e+02, // 244
 9.577540499608416e+00, // 245
 5.939578755638371e+00, // 246
-9.474297015824327e+01, // 247
-1.779866321282295e+01, // 248
-1.578250391846914e-01, // 249
-1.699741326610957e+01, // 250
-1.047751046378822e+00, // 251
 1.016230447654541e+02, // 252
 6.583902739414626e+01, // 253
 1.794454298107831e+02, // 254
-3.569011962484381e-01, // 255
-3.529678366765595e+01, // 256
 9.525165699830897e+01, // 257
 1.970816174769354e+00, // 258
-3.702945055416750e+01, // 259
-7.968137813432543e+01, // 260
-2.299342726597998e+02, // 261
-7.062853228843297e+00, // 262
-5.893428126783697e+00, // 263
-7.986127628883007e+00, // 264
 4.191941838434554e+02, // 265
-2.032539131700257e+02, // 266
-5.000876018923599e+01, // 267
 4.145969048882728e+01, // 268
-1.546052812486395e+00, // 269
 9.138221707657736e+01, // 270
-2.610463584878572e+00, // 271
-2.720541420102174e+01, // 272
 4.468564747591713e-01, // 273
 8.069249985097121e+00, // 274
-4.908727322464944e+00, // 275
-8.839322667427361e+02, // 276
 1.911221337894764e+00, // 277
 3.146403297293663e+02, // 278
-3.586512206947708e+02, // 279
-3.102817154477072e+02, // 280
 1.183681272279313e+02, // 281
 2.381864267700849e+02, // 282
 2.644860151253829e+01, // 283
 3.563355233615942e+02, // 284
-6.716593706598768e-01, // 285
 4.094310419769604e+01, // 286
-1.426785636044457e+01, // 287
-2.206470731998013e+00, // 288
 1.288365031297613e+02, // 289
 2.374918072737714e+01, // 290
 1.691995534832242e+00, // 291
-1.390157423857540e+01, // 292
 3.918582333748955e-01, // 293
-5.744594125480496e+01, // 294
-9.659163940182741e+02, // 295
-1.556011061488660e+02, // 296
 6.194768479832072e+02, // 297
 8.014850750204533e+01, // 298
 2.215073658172690e+01, // 299
-1.293102036166617e+01, // 300
-1.072667402155717e+02, // 301
 8.259100279985272e+01, // 302
 5.650878305517662e+01, // 303
-2.231670731130782e+02, // 304
 1.042219903956134e+01, // 305
-1.003167860379577e+02, // 306
-9.690955562998386e+00, // 307
 5.919700095505492e+02, // 308
-4.852948921334717e+00, // 309
-8.782149489203638e+00, // 310
-6.562394073313003e-02, // 311
-1.136547070569661e+00, // 312
-1.694593511363377e+02, // 313
 1.795523829722484e+00, // 314
-1.553727440710424e+01, // 315
 3.517970577874672e+01, // 316
-1.702372225720153e+00, // 317
 1.094755350467272e+02, // 318
-1.485497118874154e+02, // 319
 8.081908992626715e+01, // 320
 3.212638919477581e+00, // 321
-5.654071845043619e+01, // 322
 4.496329707953227e-01, // 323
 1.846059625971899e+02, // 324
-1.246455409076517e+00, // 325
-5.220477432134749e+00, // 326
-1.074331613186504e+02, // 327
-3.702528802370429e+02, // 328
 3.997985629909901e+00, // 329
-1.574669911063540e+00, // 330
-6.776399463315036e+01, // 331
-2.019679327584087e+01, // 332
 4.650254574884940e-01, // 333
 7.033208172439717e+01, // 334
-9.460946370227602e+01, // 335
-2.037540000856635e+01, // 336
-1.208440893746763e+01, // 337
-3.886117472134107e+01, // 338
-8.139829785936049e+00, // 339
-7.357278613834873e+00, // 340
 3.318677057175110e+01, // 341
 6.529518140485430e+00, // 342
-9.982258593456021e+01, // 343
-3.650231043269370e+01, // 344
 1.514158881106667e+00, // 345
 2.195196840231958e+02, // 346
-7.386766537754271e+01, // 347
 9.672944560116990e+01, // 348
-4.674065390785528e+00, // 349
-2.459852271521310e+01, // 350
-1.461910311042142e+01, // 351
 3.511795082339158e+01, // 352
-3.654753098702718e+02, // 353
-4.011623498977529e+01, // 354
-4.306643182053219e+01, // 355
-8.184994851883297e+01, // 356
 5.860774201128626e+01, // 357
 5.669288070476604e+01, // 358
-2.864512720438969e-01, // 359
-5.826038039167996e+01, // 360
-5.040959491097070e+01, // 361
 1.867718265789328e+01, // 362
-3.520402842196059e+00, // 363
-1.148586598694491e+02, // 364
 3.868209150783906e+00, // 365
 4.286276038381145e+01, // 366
-1.010777872909735e+01, // 367
-6.339409923144998e+02, // 368
 6.367829199265573e+02, // 369
-1.326989764989009e+01, // 370
 1.768284459400937e+02, // 371
 2.431096657338695e+02, // 372
-2.391934435943095e+01, // 373
-2.506551447629357e+01, // 374
-4.576411437821258e+02, // 375
-1.376818890765480e+02, // 376
-5.929399446716359e+00, // 377
 1.089049176856100e+01, // 378
-2.039610638305756e+01, // 379
-6.333863377385717e+02, // 380
-3.344127618636780e+02, // 381
 4.273258954224453e+01, // 382
 1.416163894324598e+02, // 383
 2.530943494666434e+01, // 384
-1.051590535301671e+02, // 385
-5.168659185929410e+01, // 386
 1.799824447293022e+02, // 387
-4.600591077504713e+01, // 388
 2.150019197097989e+01, // 389
 5.834990778379129e+01, // 390
-1.673312169093020e+02, // 391
-1.698382920624009e+02, // 392
-9.897912841636712e-01, // 393
-6.266818673981222e+02, // 394
 7.638359069819513e+00, // 395
 1.652064217814070e+02, // 396
-9.138703577252487e+01, // 397
 1.569286293426323e+01, // 398
 1.335341502278490e+02, // 399
 5.807014702116034e+01, // 400
-3.935456682155031e+01, // 401
 3.340188927841731e+00, // 402
 3.179779764292137e+00, // 403
-2.168902790009322e-02, // 404
 5.838239165475743e-01, // 405
-9.296247637154966e+01, // 406
 3.262495632048879e+02, // 407
-1.149412191997373e+01, // 408
-9.915001150273396e-01, // 409
 2.942346970646932e+00, // 410
 1.466010037908378e+01, // 411
 8.893173292073564e-02, // 412
 3.859866208510847e+00, // 413
 5.859450402808211e+00, // 414
-7.984183540958009e+01, // 415
 1.824387734613771e+02, // 416
 1.255733581381257e+03, // 417
 4.740098541442221e+02, // 418
 8.726261607435305e+02, // 419
-1.406388839850478e+02, // 420
 4.099763890657437e+01, // 421
-1.286893900572639e+00, // 422
-1.409521227491550e+02, // 423
-2.371118487550344e+01, // 424
 5.204667290564657e-01, // 425
 8.128302299621030e-01, // 426
 2.646608501009326e+02, // 427
 1.794351599093928e+02 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.628636605574673e-01; // A^(-1)
    m_k_OH_intra =         1.999999939236464e+00; // A^(-1)
                           
    m_k_XH_coul =          1.609865267082002e-01; // A^(-1)
    m_k_XO_coul =          6.678524935168807e-01; // A^(-1)
                           
    m_k_XLp_main =         9.608237445648304e-01; // A^(-1)
                           
    m_d_HH_intra =         3.993560001602855e-01; // A^(-1)
    m_d_OH_intra =         6.358288134915633e-01; // A^(-1)
                           
    m_d_XH_coul =          6.999999537769845e+00; // A^(-1)
    m_d_XO_coul =          5.459812656779944e+00; // A^(-1)
                           
    m_d_XLp_main =         4.444064689214772e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_k_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_k_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_k_cutoff(double* r)
#else
void mbnrg_2b_h2o_k_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
