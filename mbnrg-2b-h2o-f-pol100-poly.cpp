#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
 1.578462246457094e+02, // 0
-1.416620731039044e+03, // 1
 1.315893487301676e+03, // 2
 1.114480175412976e+01, // 3
 9.817869451719893e+00, // 4
 2.153014383381440e+02, // 5
 1.694393193651217e+03, // 6
-8.480915876843703e+00, // 7
 1.153816868961228e+02, // 8
-1.605803931264597e+03, // 9
-7.024478693132092e+01, // 10
 1.608015057189577e+01, // 11
-3.414574320588044e+02, // 12
 3.659828126280473e+00, // 13
-3.624685361027008e+02, // 14
 8.583620207620928e+02, // 15
-3.342473758371883e+02, // 16
 1.447507702473459e+02, // 17
 1.181532669606269e+01, // 18
 2.966894050181663e+02, // 19
 1.676699437195234e+02, // 20
 6.351453558574597e+01, // 21
 1.060328588758762e+01, // 22
 2.950368991202588e+00, // 23
-4.984767908681524e+01, // 24
 1.002601885447448e+01, // 25
 1.858317181960633e+02, // 26
 1.106041234213195e+03, // 27
-8.973793288015908e+02, // 28
-2.043779530795769e+02, // 29
 5.271446204947553e+00, // 30
 2.195033180029006e+01, // 31
 1.225029931947140e+00, // 32
 6.559812054346483e+01, // 33
-1.258388422460682e+03, // 34
 5.066642497647232e+02, // 35
-5.361161711581339e-01, // 36
-5.794627607906941e+01, // 37
-2.981440493946794e+02, // 38
-4.416992364538326e+02, // 39
-3.786752119161428e+02, // 40
-4.659872524468359e+00, // 41
-2.324431534965904e+00, // 42
 5.350318136201076e-02, // 43
-4.951359201531903e+02, // 44
-4.104163104804822e+01, // 45
 2.221748607364699e+01, // 46
 1.377698437229007e+01, // 47
-2.631184769291139e+01, // 48
 3.370379438447617e+00, // 49
-1.484007237233889e+01, // 50
-1.148867059278441e+01, // 51
 5.811221951915475e+01, // 52
-2.667427335112046e+02, // 53
 6.857638706619714e+02, // 54
 6.675976354944140e+02, // 55
 1.038563042210655e+01, // 56
 5.747214643375883e+02, // 57
-1.203172506969757e+02, // 58
-2.322402896602356e+02, // 59
-1.550836847629038e+00, // 60
-1.932114720054691e+02, // 61
 2.126101203471093e-02, // 62
-1.745304590105290e+00, // 63
-1.265885908953012e+01, // 64
-2.309723438360855e+01, // 65
-2.287013833167685e+01, // 66
-3.801212000991050e-01, // 67
 2.488278195895942e+02, // 68
-3.579733451660994e-04, // 69
-1.409361722824848e+01, // 70
 2.332253842155918e-02, // 71
 9.346595723829493e+00, // 72
-6.482354261555895e+02, // 73
 1.290347185607268e+00, // 74
-9.262890798708844e+01, // 75
-9.276438262203747e+00, // 76
 7.723040419751101e+00, // 77
-7.126589513351366e-01, // 78
 2.584360372694027e+01, // 79
-6.607636911031220e-04, // 80
-2.214547099670971e+02, // 81
-5.775861212568044e-03, // 82
 1.880949499889047e-03, // 83
-2.845236405768351e-03, // 84
-2.025568807041692e-05, // 85
-1.085208031459650e+02, // 86
 3.594723568294666e-01, // 87
 9.477275595434323e+02, // 88
 2.516265189879102e-01, // 89
-8.691441682223654e-01, // 90
 4.501858746187467e+01, // 91
-1.797159444735843e+00, // 92
-2.247095313123156e+01, // 93
 1.906113314633428e+01, // 94
 2.215690830248207e+02, // 95
-2.204023078377392e+00, // 96
 4.968480731114957e+00, // 97
-2.300536472642374e+02, // 98
 2.813817842022163e-01, // 99
 2.306268411791828e-02, // 100
 1.088432759785828e-03, // 101
-8.340075424565714e-01, // 102
-5.232318497182023e+01, // 103
-1.060063585410047e+01, // 104
-2.826253344679845e+00, // 105
-7.568023652920755e-02, // 106
-3.373437161945860e+02, // 107
-7.621952520631739e+01, // 108
-2.912153550743466e+00, // 109
-3.131781664049721e-01, // 110
 1.247881107710584e+00, // 111
-2.357560759745696e+00, // 112
 2.585652579193726e-04, // 113
-3.156136062064144e-02, // 114
-1.988315074948771e+02, // 115
-1.956584411448078e+01, // 116
 7.403132092602496e+01, // 117
-1.433684045321522e+00, // 118
-2.949107869047201e+00, // 119
-5.374762428886386e+00, // 120
 3.379869162793585e+01, // 121
 1.750614701086902e-01, // 122
 7.556409222657435e+01, // 123
 7.810818325147876e+02, // 124
-9.468217774694261e-01, // 125
 3.378572975824540e-01, // 126
-3.084907799755651e+02, // 127
 2.488696606067083e+01, // 128
-2.630106793304087e-02, // 129
 5.363942849543435e+01, // 130
-5.116209417265498e+02, // 131
 2.629435283482012e+00, // 132
-6.225810178961368e+00, // 133
 1.107407903316106e+01, // 134
 3.338491381328588e-01, // 135
 1.055584430133654e-02, // 136
-4.978050744954163e-02, // 137
-2.895377768981411e+01, // 138
 3.913737482888070e+02, // 139
-1.289847051643921e-02, // 140
-1.017335218238104e+01, // 141
 4.841254567011998e+01, // 142
-4.682928580512599e+02, // 143
 9.947250843171354e+00, // 144
-1.908795509608038e-01, // 145
-1.729423870969231e+01, // 146
-1.642138155310465e+00, // 147
 3.109347411351374e+02, // 148
 1.144889275845506e+01, // 149
-1.811707901271724e+01, // 150
 3.203481801637945e+00, // 151
 1.050686332034561e+02, // 152
 1.102361039313363e-01, // 153
-2.442701200325084e-02, // 154
 3.371580371287251e-01, // 155
 6.283914192264330e+02, // 156
 3.132732712080414e+00, // 157
-1.655256043348225e-02, // 158
-1.130013170249022e-02, // 159
 3.556415402807807e+00, // 160
-4.587849475460723e-05, // 161
-1.093147563103643e+00, // 162
 1.237530579939980e+01, // 163
 1.412395209493829e+01, // 164
 6.890215836737656e-01, // 165
-1.007659598455559e+02, // 166
-1.569615139942556e+00, // 167
 3.456921725388745e-01, // 168
-2.057055341877949e+00, // 169
-8.684278579980917e+00, // 170
 1.960426607934119e-03, // 171
 5.278229298977362e+00, // 172
 1.146690689840142e+00, // 173
-6.398207506979777e+00, // 174
-7.319430311028881e+01, // 175
-3.381037531062406e-01, // 176
 3.281245974936094e-02, // 177
 4.237711552808398e+00, // 178
 9.274602208123367e-02, // 179
 2.788835983604223e+00, // 180
-4.250820875543500e+02, // 181
 5.358679962976260e-01, // 182
-1.277202871343089e-03, // 183
 5.238155157637738e+02, // 184
 6.673473060708694e-05, // 185
 1.887298968615758e-04, // 186
 2.954495726447497e+01, // 187
-2.586191556734085e-04, // 188
 5.522643803617232e-02, // 189
-9.050951441299127e+00, // 190
-7.379072366263189e+02, // 191
-8.703829478427812e-02, // 192
 3.098348979404206e-01, // 193
-3.298156483123567e+00, // 194
-1.772043083409937e-03, // 195
 2.571646513241180e-02, // 196
 9.629375104208686e-03, // 197
 7.769571686259818e+01, // 198
 6.232259541493623e-02, // 199
-1.138164607056744e+00, // 200
-4.059902007440217e-03, // 201
 8.049736229964791e-02, // 202
 6.244272192883984e+00, // 203
 2.707926100350531e-01, // 204
-1.881725816351576e+00, // 205
-1.766517732173933e+01, // 206
 5.220919384245319e-04, // 207
-1.801065854357449e+02, // 208
-1.105339871163005e+01, // 209
-6.801845544093060e-05, // 210
 1.542305768971905e-01, // 211
 3.235120545954704e-05, // 212
-8.655267965464345e-03, // 213
-5.188153164352579e+00, // 214
-5.073626578089546e-02, // 215
 1.097284474683629e+00, // 216
-4.937244445329845e-01, // 217
 4.635222117704887e+00, // 218
 7.738066428094175e-04, // 219
 6.832699043145603e-04, // 220
 5.481792639128959e-02, // 221
-5.425614734001132e+00, // 222
 1.305546815444197e+00, // 223
 2.690866427624422e-02, // 224
-6.764412239566073e+01, // 225
-3.990955345328736e-05, // 226
-5.161183812621674e-08, // 227
 4.634471018736501e-04, // 228
 1.345992533500829e-02, // 229
 2.948917539480573e-01, // 230
-9.579305917027247e+00, // 231
 8.350635160829929e-01, // 232
-3.249410216467142e-05, // 233
 2.977511163040534e+01, // 234
-3.545497774144769e-02, // 235
 3.475924210494302e+00, // 236
-9.675119210323878e+00, // 237
 1.018688593542844e-01, // 238
-6.482775356725442e+01, // 239
-6.359260938797934e+00, // 240
 1.277666570123760e-01, // 241
-2.470000018112851e-03, // 242
 9.600447968307698e-01, // 243
-2.950537463644461e-06, // 244
 5.378326727571295e-04, // 245
 7.764354876333163e+00, // 246
-1.443669298679103e-04, // 247
 1.255956801653121e-03, // 248
-1.705829352911747e-03, // 249
-7.201195587872334e-04, // 250
-1.173713506435676e+00, // 251
 1.280700547366523e-01, // 252
-4.006751684292525e-02, // 253
 4.288724123980125e+01, // 254
 4.691977770113910e-02, // 255
 9.371690297151672e-03, // 256
 1.504653043275154e+01, // 257
-1.280003636875513e-02, // 258
 1.688954201337457e+02, // 259
 1.972677603479768e+02, // 260
 5.197379360544110e-01, // 261
-4.004998379322794e+00, // 262
 5.433272625348508e-02, // 263
-4.988699383450526e-01, // 264
-2.176417166755984e-02, // 265
 3.391238731791972e-04, // 266
-3.824211930888951e-01, // 267
-2.606461453940770e-01, // 268
-1.962338154126035e-02, // 269
 3.648935721781654e-03, // 270
-4.610171333444887e-01, // 271
 1.934034890493430e+02, // 272
-6.655276853416956e+00, // 273
-4.759890878022987e-01, // 274
-2.127305750224419e-02, // 275
-2.083021342703677e+00, // 276
-2.711953527064550e-04, // 277
-5.245997389256045e-01, // 278
 5.278186773690363e-03, // 279
 3.665562132684954e-05, // 280
-1.291867860328158e+01, // 281
-1.084271951699587e+00, // 282
-4.100229956411156e+00, // 283
-5.565320260677825e-04, // 284
 1.478709953679420e-01, // 285
-6.546904718068215e-02, // 286
-1.508330535494179e-02, // 287
 1.918094671156626e+00, // 288
-2.697672532517957e-05, // 289
 3.977421897192662e-04, // 290
 9.115384006247497e+00, // 291
-1.204711559665077e+01, // 292
 6.519277317706553e-01, // 293
-7.443556318792285e+01, // 294
 4.391034276427841e-01, // 295
-1.152973106683350e-01, // 296
 1.779080388818094e+00, // 297
-5.164397097046191e-03, // 298
 6.349416159204714e-01, // 299
 1.340793916584540e+00, // 300
-2.362390874893369e+00, // 301
 1.441587217845033e-07, // 302
 1.517660160954249e-01, // 303
 3.224568070013416e-04, // 304
 1.846154800830797e+00, // 305
 3.887260917398213e+01, // 306
-5.863237453289268e-07, // 307
 2.428391479759381e+00, // 308
 1.064459167858674e-07, // 309
-2.759915174924720e+01, // 310
-6.245601472357560e-01, // 311
-4.518326498624238e+00, // 312
 3.967768269591905e+01, // 313
-1.523794004317748e-01, // 314
-3.159176087654945e-01, // 315
-1.038414243607055e-05, // 316
 1.260588361709713e+01, // 317
-7.200726209426643e-06, // 318
 1.262814660626533e-03, // 319
 8.867796366645665e+00, // 320
 6.178315761832319e+00, // 321
 1.685898460146847e-03, // 322
-1.890861602591501e-02, // 323
-1.216010971305509e+02, // 324
 4.544910120586747e+00, // 325
-1.306751878731478e-01, // 326
 7.645534373133966e+00, // 327
 1.627887846121654e+00, // 328
 3.428419439320466e-03, // 329
 2.976679693741725e-03, // 330
 1.041359790626110e+01, // 331
-3.037015063999985e-02, // 332
 2.064338009850955e+00, // 333
 1.062425121456019e-01, // 334
-1.035786675421410e-06, // 335
-5.431153722277143e-03, // 336
 5.788643674595947e-06, // 337
-1.791441272179277e+01, // 338
-5.060016072153610e+00, // 339
-2.179922508130352e+00, // 340
-9.035764657826620e-04, // 341
-8.977259171041060e-02, // 342
 2.106159320331942e+00, // 343
 2.393324060797464e-02, // 344
 2.711288940935865e+01, // 345
 2.727637020772523e+00, // 346
-1.085822339836821e-03, // 347
 1.991395649430856e+00, // 348
 2.299591574898312e-03, // 349
 6.862792598705423e-01, // 350
-2.962777843109120e-01, // 351
 9.714020207158119e-01, // 352
-3.341918553803979e-01, // 353
 7.763399262448227e-06, // 354
 2.565790781891424e+02, // 355
 1.146540291895324e+00, // 356
 1.146730538509627e-05, // 357
 9.482166594194855e-01, // 358
-6.041186718253243e-02, // 359
 5.222260127690301e-02, // 360
 3.294749267793087e-02, // 361
 4.281725277913450e-04, // 362
-2.932979992553202e+01, // 363
 7.438746465625887e-01, // 364
-1.286592883058282e+01, // 365
-1.707477520912445e-03, // 366
-6.864388938604302e-03, // 367
-7.629057750544155e-02, // 368
 1.031057243843884e+00, // 369
 2.026013460088408e-05, // 370
 4.242212363300133e+02, // 371
 1.403385244116427e-02, // 372
-2.811460616749916e-05, // 373
 1.895122843896708e-01, // 374
 6.227374377563215e-01, // 375
-3.206909583446932e-01, // 376
 2.946809053665220e-03, // 377
-4.064582090978790e+00, // 378
 1.885804725384869e+01, // 379
-3.663384490777997e-04, // 380
-4.817946957415086e+00, // 381
 3.208962340222908e-05, // 382
 3.137320581289980e-05, // 383
-8.848492030836285e+02, // 384
 1.472920715505278e-03, // 385
 1.857781651385595e-04, // 386
-1.930806449008808e+02, // 387
 3.286700029821578e+00, // 388
-5.184684400869777e-02, // 389
-6.425198408930478e+01, // 390
 1.548956066360045e-02, // 391
-1.169456574083357e-01, // 392
 3.307097696644457e+00, // 393
-1.083732790486482e-05, // 394
 2.715562799542300e-03, // 395
-4.539483298954446e-01, // 396
 1.838572626137854e-02, // 397
 4.912446165000571e-01, // 398
-1.924737583217020e+00, // 399
 4.518965448823905e-01, // 400
-1.687501596808455e+01, // 401
 1.169671789837248e-06, // 402
-4.385220320267929e-02, // 403
-3.582695323718308e-01, // 404
-1.077026616731457e+00, // 405
-1.605773267687630e+00, // 406
-5.618005128622694e-04, // 407
-5.956179236983322e-01, // 408
 2.022076931618516e-03, // 409
 2.050295030915751e+01, // 410
-4.350477299376168e+00, // 411
-6.041222387774281e-02, // 412
 1.622815230502720e+02, // 413
 1.578054708328266e+01, // 414
-3.567688150906675e-01, // 415
-3.184364521602483e-04, // 416
-1.907611434967482e-01, // 417
-3.137527837221146e-01, // 418
 1.426523958312090e-02, // 419
-1.154236600744906e-02, // 420
 8.571160119746683e-03, // 421
 7.712847005999159e-02, // 422
-1.067207657009140e-04, // 423
-7.264098718055696e-02, // 424
 2.002148921746518e-03, // 425
 8.928737222180260e-01, // 426
 3.967003108681723e-02, // 427
 3.695421855443182e-03  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.194623068945859e-01; // A^(-1)
    m_k_OH_intra =         3.060774119116303e-01; // A^(-1)
                           
    m_k_XH_coul =          8.284743593018360e-01; // A^(-1)
    m_k_XO_coul =          8.550494472689398e-01; // A^(-1)
                           
    m_k_XLp_main =         1.008493192013656e+00; // A^(-1)
                           
    m_d_HH_intra =         1.067370468009889e+00; // A^(-1)
    m_d_OH_intra =         1.548024667376308e+00; // A^(-1)
                           
    m_d_XH_coul =          6.247582187500333e+00; // A^(-1)
    m_d_XO_coul =          6.991282760029556e+00; // A^(-1)
                           
    m_d_XLp_main =         4.173878769344205e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.000000000000000e+00; // A
    m_r2f =  6.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_f_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_f_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_f_cutoff(double* r)
#else
void mbnrg_2b_h2o_f_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
