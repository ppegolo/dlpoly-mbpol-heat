#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
 3.652412748351991e+01, // 0
-2.638209712124213e+02, // 1
-5.321014675291359e+01, // 2
 3.035867417031922e+01, // 3
 5.104863598341741e+01, // 4
-1.247129213024104e+01, // 5
 7.291550055000205e+02, // 6
-2.555551384558804e+02, // 7
 2.464785981047051e+02, // 8
 1.358371456203531e+02, // 9
 8.618766214516247e+00, // 10
 6.558873647519301e+00, // 11
 3.616113094514012e+01, // 12
-2.499175984121238e+02, // 13
-2.898167203602495e+02, // 14
-1.096286109331693e+02, // 15
-4.309024087213641e+02, // 16
 1.468490145678939e+02, // 17
 3.648148065376439e+02, // 18
 1.606781703388703e+02, // 19
 8.160078613360409e+01, // 20
 8.172932789239134e+01, // 21
 2.581926623924955e+01, // 22
 6.212138836836363e-01, // 23
-3.602137781321935e+00, // 24
 4.918363440905656e+02, // 25
-3.436849971912598e+01, // 26
-1.055131492901010e+02, // 27
 1.232932083420761e+02, // 28
 2.428024831094770e+01, // 29
-2.863901906702034e+02, // 30
-1.564087717589168e+01, // 31
 1.809803706258135e+01, // 32
 1.849842308658942e+00, // 33
-9.138082046821273e+02, // 34
-6.234372200133537e+01, // 35
-3.134667978847548e+00, // 36
-1.902894219716936e+02, // 37
-2.469412952906427e+01, // 38
-3.455570301754018e+02, // 39
-9.769152469649165e+01, // 40
-1.682117594652937e+02, // 41
 2.346199753519206e-02, // 42
-9.117864424612534e+01, // 43
-1.199038294494122e+02, // 44
-2.877883655783685e+01, // 45
 1.591370936753722e+01, // 46
 8.352814089312261e+02, // 47
-1.884001010237885e+02, // 48
 9.789101553359352e+01, // 49
-4.410788218691828e+00, // 50
-2.514246258422641e+00, // 51
 7.844561891163808e+01, // 52
 2.950142663388248e+02, // 53
-1.594734612430672e+02, // 54
-8.132958909457693e+01, // 55
-3.916403155095659e-01, // 56
 1.189433728313663e+02, // 57
-1.554290936296648e+02, // 58
-7.751300835012155e+01, // 59
 9.295677980106941e+00, // 60
-9.965677589380296e+01, // 61
-3.846518898914503e+00, // 62
 5.020890764514206e+01, // 63
 1.086903724804134e+01, // 64
 6.347491529905577e+01, // 65
 9.638054787654765e+00, // 66
-5.960601069936515e+01, // 67
 9.817135931424744e+00, // 68
 2.579488830374168e+00, // 69
 2.959176833062201e-01, // 70
 2.244099282671079e+00, // 71
 2.044933614678941e-01, // 72
 1.066505772272631e+00, // 73
 4.965945213384464e+02, // 74
-5.692779213986297e+00, // 75
-8.583574498440683e+00, // 76
-1.356325866290798e+02, // 77
-5.723690508713787e+02, // 78
 1.102182834101035e+02, // 79
-1.402371483390095e-01, // 80
-4.040936058267387e+01, // 81
 6.491341485108153e+01, // 82
-1.727623921561828e-02, // 83
-1.724419905341191e+00, // 84
-1.745636863253696e+00, // 85
 1.018042635185616e+02, // 86
 8.523949405685499e+01, // 87
 6.643136478292219e+01, // 88
 2.445810667136334e+01, // 89
 3.378757291674026e+00, // 90
-8.866598685398552e+00, // 91
 9.170420826768239e-03, // 92
-3.423621353909458e+02, // 93
 7.064660614609018e+01, // 94
 4.190676329485110e+01, // 95
 6.858650526456144e+01, // 96
-4.559912963373876e+01, // 97
-1.852714915756047e+02, // 98
-2.420729133723493e+02, // 99
 2.429575628703624e-01, // 100
 5.903258262578467e-01, // 101
-4.458593564298941e+01, // 102
 1.664862760753190e+01, // 103
-1.825413956236393e+02, // 104
-1.786045360342387e+02, // 105
 9.425564589623770e+00, // 106
 3.851375542164287e+01, // 107
-2.052383239325621e+01, // 108
 4.441210933440004e+02, // 109
 1.103537270101102e-01, // 110
-1.658963489994441e+01, // 111
-2.569774100875820e-01, // 112
-1.497356610799515e-01, // 113
-3.065335640970403e+01, // 114
 2.838510668873582e+01, // 115
-7.707315208496195e-01, // 116
 1.348002558985054e+02, // 117
 4.477822994065033e+01, // 118
-4.996280696151618e-02, // 119
-9.195023025492672e+00, // 120
 3.333017105215009e+01, // 121
-1.208804651992461e-03, // 122
 1.254047385321025e+02, // 123
-6.642200653530742e+01, // 124
 1.365485227023356e-01, // 125
-1.005970360307219e+00, // 126
-5.635367328025070e+01, // 127
 4.219781119546155e+00, // 128
-1.222536405693930e+02, // 129
-2.726114499243225e-02, // 130
-1.226860877085902e+01, // 131
-5.770617602212286e+00, // 132
-8.691238050604441e+02, // 133
-1.407408682827255e+00, // 134
-4.509924672476373e-01, // 135
 2.198916006001854e+00, // 136
 1.895011742998435e+02, // 137
-1.093518669676930e+02, // 138
 2.454538423960159e+01, // 139
 1.432765502345255e-01, // 140
-1.422994852434808e+01, // 141
 6.296760719028363e+00, // 142
-8.936728150973718e+01, // 143
 1.696272903328613e+02, // 144
-1.496932325061845e-02, // 145
-6.857152266186959e+01, // 146
-3.918585520143836e+01, // 147
 1.383115096020528e+02, // 148
-8.157896774606252e-02, // 149
-7.494027737731945e+01, // 150
 3.263448895707523e-01, // 151
 3.071995275549009e+00, // 152
-9.165045721592133e-03, // 153
 1.121913056689306e-04, // 154
 1.081146876151628e+00, // 155
 1.738409982510371e+02, // 156
-2.193714834303989e+02, // 157
 3.539604013209849e-04, // 158
 2.227173063286867e+02, // 159
-1.153212821229481e-01, // 160
-2.045323047966939e+00, // 161
 1.304165692143249e+02, // 162
 7.756762178616894e+01, // 163
-1.292450048812273e+02, // 164
-3.776737004489168e+00, // 165
 2.554758524311652e+02, // 166
 5.100048687134478e-02, // 167
-6.851179878515918e+00, // 168
 1.448661721137882e+02, // 169
-4.489363348109861e+00, // 170
-2.627539641075475e+01, // 171
 1.977587873950944e+01, // 172
-1.470389424552915e+00, // 173
-1.391975689257060e+00, // 174
 8.177460936074765e-01, // 175
-1.424049033810224e-01, // 176
-3.621930049226031e+00, // 177
-3.026462497116725e+01, // 178
-6.982468673379333e+00, // 179
-2.377274179446222e-02, // 180
 1.076094048679901e+02, // 181
 1.933391148094672e+00, // 182
 2.729832815491333e-01, // 183
 3.772545269786225e+02, // 184
-2.427833595299509e+00, // 185
-4.834528836623355e-02, // 186
 3.742794273470228e+01, // 187
-2.152030432487522e-01, // 188
-9.720689716613494e-03, // 189
 6.927861608067485e+01, // 190
-1.511106468004973e+01, // 191
-1.493063993249859e-03, // 192
-8.976589880816430e-02, // 193
-5.079405548952818e+02, // 194
-4.324540488102343e+01, // 195
 3.882027513393058e-03, // 196
 2.671545122196744e+01, // 197
-1.849181751126338e+02, // 198
-5.371482845578308e-02, // 199
 2.027445740266029e+02, // 200
-4.397257076515800e-03, // 201
 3.511290683077363e-01, // 202
 8.945846081706955e-01, // 203
 4.099638103097968e+01, // 204
 8.509824536723204e+01, // 205
-5.241066977209181e+01, // 206
 1.049200298397614e+00, // 207
 2.027007021650285e+02, // 208
-4.583864354979733e+01, // 209
 1.761691032468928e-04, // 210
-1.235303129564289e-04, // 211
 1.350143807030435e+00, // 212
-6.117633413603681e-04, // 213
 1.933188615211145e+00, // 214
 8.066262996890151e-02, // 215
 1.434135981928018e+01, // 216
-6.877681558948876e+00, // 217
-9.430060200193852e+00, // 218
 2.881116703084264e-02, // 219
-3.460715763712126e-01, // 220
 3.762624622555286e-03, // 221
-6.161890119444560e-02, // 222
 1.186244673154547e-01, // 223
 5.911158139164036e-03, // 224
 1.859266174986753e+02, // 225
 9.924433611250847e-03, // 226
 4.107445313746223e-02, // 227
-5.472504812563176e-01, // 228
-2.176983699100419e+00, // 229
 1.386604029238151e+01, // 230
 3.500988921774396e-01, // 231
 4.815000046525977e+01, // 232
-1.449529444385206e-01, // 233
 1.180185451648732e-01, // 234
-4.495796492087509e-01, // 235
-7.364586254838215e-02, // 236
-2.383961659124822e-01, // 237
 2.430423538186726e+01, // 238
-1.441281899619525e+02, // 239
-8.586545709755570e+01, // 240
-8.815215495370617e-02, // 241
 4.864824651359631e-03, // 242
 9.849602734656469e-01, // 243
-4.775019677147976e-03, // 244
-7.603499414006178e-04, // 245
 3.989083947272849e+00, // 246
-2.379235232018729e-02, // 247
-5.151951005563633e+01, // 248
-5.704122396844248e-03, // 249
-6.102084672631985e-02, // 250
-1.742647741664113e-01, // 251
 5.117841668878388e+00, // 252
-3.580456232594201e+00, // 253
 1.134119362962570e+02, // 254
 3.126570477586103e-01, // 255
 3.599619085230690e+00, // 256
 8.239155223724799e+01, // 257
 9.085723347601963e-05, // 258
 2.601748518013292e+00, // 259
 7.929682267343148e+00, // 260
 2.193714059011207e-01, // 261
-5.741592653589530e-03, // 262
 2.235520658668948e-01, // 263
 1.694668959023955e-01, // 264
-4.755239815627005e+00, // 265
 1.279379922227783e-01, // 266
-4.223169855579949e+01, // 267
-4.417166007795250e-04, // 268
-4.325991978210986e-06, // 269
 6.503689931509648e+00, // 270
 8.556087069238778e-04, // 271
 1.740252349706963e+01, // 272
-1.653649052896031e-02, // 273
-7.214692298543110e-02, // 274
 1.828003779619696e-03, // 275
-4.667356708096832e+01, // 276
 5.397772218516591e-07, // 277
-6.065384006240970e+00, // 278
 9.210165664960698e+01, // 279
 6.001195985057067e+00, // 280
 1.435094438415804e+01, // 281
-6.798580332647401e+01, // 282
-2.995975336533358e+01, // 283
-1.222649401490004e-01, // 284
 4.967574472693458e-03, // 285
 1.389295848164705e+01, // 286
-2.189732851657716e-02, // 287
-1.141350343947516e-02, // 288
-2.375777937035360e+00, // 289
 8.447031040626961e-01, // 290
 1.524209446233772e-02, // 291
 1.904869068524102e+00, // 292
-3.281390367553422e-03, // 293
-1.467947019083309e+02, // 294
 3.798151731194213e+00, // 295
 1.277016659673147e+00, // 296
 3.969085291415993e+01, // 297
 3.394916629081340e-05, // 298
 7.380847849496013e-05, // 299
-1.881467557634348e+00, // 300
 9.345058847438436e+01, // 301
 1.357668467414969e-01, // 302
-4.270906381441065e-01, // 303
 1.919399272266185e-03, // 304
-2.588673460530417e+02, // 305
-5.059977048062364e+01, // 306
 6.570132342251714e-03, // 307
 2.371286669868539e+02, // 308
 5.762036970973164e-02, // 309
 4.461110555738078e+00, // 310
 2.030138503639263e-02, // 311
 3.417337031296481e-02, // 312
 2.307059821468425e+00, // 313
-9.428873902088546e-04, // 314
 6.996364805652375e-01, // 315
-3.416164053645714e+00, // 316
 6.844770393658789e+00, // 317
 1.192738725777392e+00, // 318
-2.118600002394275e+00, // 319
-2.731579970410252e-02, // 320
-1.338258745778552e+01, // 321
 2.029660301181135e+00, // 322
-1.483310435497755e-03, // 323
-4.936357423934184e-01, // 324
 1.698857462587016e+01, // 325
-4.085384148160599e+00, // 326
 7.908695155740068e-01, // 327
-4.924065628058741e+00, // 328
-2.663660466461943e-02, // 329
-5.584469561968898e-05, // 330
-1.081956210560316e+01, // 331
-4.217060010743212e+01, // 332
-1.424607922857692e+00, // 333
 6.239535362292253e+00, // 334
-3.284673232139440e-03, // 335
 1.283092996858610e+00, // 336
-5.680104167867915e-01, // 337
-1.920823479539218e+00, // 338
-8.378868024471664e+00, // 339
 1.342414502883181e-03, // 340
-1.819800721270127e+00, // 341
-1.118933386592065e-01, // 342
-1.892024052134209e+00, // 343
 1.874641117109445e-01, // 344
-1.238802827517523e+01, // 345
 6.018502413140357e-02, // 346
 3.604785432900281e+00, // 347
 3.123571172717644e+02, // 348
 4.949672354110150e-02, // 349
 9.140534255679681e-03, // 350
 1.283363479831899e-01, // 351
 2.325613379284841e+01, // 352
-1.142184755069066e-03, // 353
-6.272683457080835e-02, // 354
-7.514911143422570e+00, // 355
 5.180357408843990e+01, // 356
 3.256567799898650e-02, // 357
 2.509084975114087e+01, // 358
-1.366650105517226e-02, // 359
 7.083456990070273e-02, // 360
 4.673787199153780e-05, // 361
-6.604441156019799e+01, // 362
 8.485848464720176e-01, // 363
 4.363808299475783e-05, // 364
 7.537377486887804e+00, // 365
 2.084329764114109e-03, // 366
-1.447919463191935e+02, // 367
 3.345290534564796e-01, // 368
-6.877140116373112e-02, // 369
-6.674823552580011e-04, // 370
 3.404923815471059e+02, // 371
-1.662797361677019e-04, // 372
-1.438149917745865e-01, // 373
 5.470032948461471e+01, // 374
-1.461791670390952e+02, // 375
-6.025897506001578e+00, // 376
 4.710270042738332e+01, // 377
-1.701256338021608e+00, // 378
-6.792860512427996e-01, // 379
 1.765560794771981e-03, // 380
-1.222371997642327e-01, // 381
 5.686103131384153e-01, // 382
 8.747731410921820e-02, // 383
-6.714966514997884e+02, // 384
 9.151744407896891e+01, // 385
-1.271967381341529e-05, // 386
-1.479076217267219e+02, // 387
-6.890752499134180e+00, // 388
 2.675122816876448e+00, // 389
-1.550198592481837e-01, // 390
-1.064751149235660e+02, // 391
-4.732625783299345e+00, // 392
 4.627588010138453e-03, // 393
-1.611427738149737e-02, // 394
-1.067707267906718e-02, // 395
 4.423633009708017e-02, // 396
 4.991778105691229e-02, // 397
-1.570797292600550e+00, // 398
-1.569883114126634e-01, // 399
 4.599492494818633e-02, // 400
-3.080234726075352e-01, // 401
-2.489393007163799e-02, // 402
-1.883529187684138e+00, // 403
 6.700285857719530e-04, // 404
 2.567010205191698e-01, // 405
 6.181469383107319e-03, // 406
-9.874830281958476e-02, // 407
 8.102084141507818e-03, // 408
 4.021009221331824e-02, // 409
-2.524390373445406e+00, // 410
-3.178463471670103e+00, // 411
-1.544213176770037e-02, // 412
 6.193096164337203e+01, // 413
 1.234055686636421e+00, // 414
 1.707454860907072e-01, // 415
-7.423108111836761e-02, // 416
-6.180386167157401e-02, // 417
 6.125036859100601e+02, // 418
-3.041596875441138e-02, // 419
 2.788640419486138e+00, // 420
-4.331832197237271e+01, // 421
 1.087227541718348e-04, // 422
-1.476960028241058e+00, // 423
-1.138867340880348e-05, // 424
 1.967416448577833e-07, // 425
-6.115131209319100e-03, // 426
-1.483112866095474e+01, // 427
-1.847694805557228e+01  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         1.690714146830114e-01; // A^(-1)
    m_k_OH_intra =         2.565281925640369e-01; // A^(-1)
                           
    m_k_XH_coul =          3.956462144870756e-01; // A^(-1)
    m_k_XO_coul =          1.176634967561005e+00; // A^(-1)
                           
    m_k_XLp_main =         6.948494465864904e-01; // A^(-1)
                           
    m_d_HH_intra =         1.880727200923587e+00; // A^(-1)
    m_d_OH_intra =         6.152749653490401e-01; // A^(-1)
                           
    m_d_XH_coul =          6.785414811821708e+00; // A^(-1)
    m_d_XO_coul =          6.997789772262751e+00; // A^(-1)
                           
    m_d_XLp_main =         6.318749319126379e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_i_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_cutoff(double* r)
#else
void mbnrg_2b_h2o_i_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
