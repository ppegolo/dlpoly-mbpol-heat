#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
 9.987826837998428e+01, // 0
-2.816228460902369e+02, // 1
 1.906398447945524e+02, // 2
 4.673650421516804e+02, // 3
 6.422836163428666e+01, // 4
 2.220926575739451e+02, // 5
 4.493881939514141e+02, // 6
-2.702907419978260e+01, // 7
-1.019843845904108e+02, // 8
-3.639887618910020e+02, // 9
-8.864192150903682e+01, // 10
 2.742027412165937e+01, // 11
 1.855336487334238e+02, // 12
-3.704014675858998e+02, // 13
-1.614493723916073e+02, // 14
 3.124661431151943e+02, // 15
-4.582557328909322e+02, // 16
 1.203742187476580e+01, // 17
 1.911087527076175e+02, // 18
-7.670739009101482e+01, // 19
 1.106197247185983e+02, // 20
 2.475555170173899e+02, // 21
 2.346371559005733e+01, // 22
 3.365453352739051e+01, // 23
-2.116493151570191e+01, // 24
 6.202681300435389e+02, // 25
 4.516934125931726e+01, // 26
 7.949355061223512e+02, // 27
 9.538021396813667e+01, // 28
-5.162268786504624e+02, // 29
 9.216553394374456e+00, // 30
-2.106475345772295e+01, // 31
 1.995856816632324e+01, // 32
 3.125862063792640e+02, // 33
-6.466061752807882e+02, // 34
-1.909849612631343e+02, // 35
-1.245152097521779e+01, // 36
-7.938393406207783e+02, // 37
 5.630438049888846e-01, // 38
 7.233016105314009e+01, // 39
-1.727655943229705e+02, // 40
-6.661006821976828e+01, // 41
-1.287577041031933e+01, // 42
 3.250335522284692e-01, // 43
-4.579452680021488e+01, // 44
-2.182496152206087e+02, // 45
 9.377116095378001e+01, // 46
 3.299404269273484e+01, // 47
-2.270114252752631e+02, // 48
 7.568874699264251e+01, // 49
 4.023719830432494e+01, // 50
-7.402327147278717e+01, // 51
 2.550516814180142e+01, // 52
 9.546200466447407e+01, // 53
-9.181168151223281e+01, // 54
 5.629696499610358e+01, // 55
 1.370068117027693e+01, // 56
 3.792054005558919e+02, // 57
 9.103402417305553e+00, // 58
 5.955385928162534e+01, // 59
-5.339730295887098e+01, // 60
-8.104835034456671e+01, // 61
 1.503230594821380e-01, // 62
 1.207279877823002e+01, // 63
-9.349984319425967e+01, // 64
 1.594111548724014e+01, // 65
 1.506485771521983e+01, // 66
-5.404562588978792e+01, // 67
-4.206488174579816e+02, // 68
 2.006154228813261e-01, // 69
-9.752926893063756e+01, // 70
 2.616559077708222e+00, // 71
 2.871426026342808e+01, // 72
-1.166479637034774e+02, // 73
 3.046799757323840e+01, // 74
-6.043758802281330e+01, // 75
 5.870956953730959e+00, // 76
-1.501855724898050e+01, // 77
 2.139070346229409e+00, // 78
 1.225182594670403e+02, // 79
 3.249279908621143e+00, // 80
-6.625773044668608e+01, // 81
 3.602747970302683e-01, // 82
 1.556012519650707e+00, // 83
 3.419192339926037e-01, // 84
-7.952706191080458e-04, // 85
 1.251588079652773e+02, // 86
 1.224758188390712e+01, // 87
 6.670640281991384e+02, // 88
 1.121745134178372e+01, // 89
-8.410451421119448e+01, // 90
 1.128700557602953e+01, // 91
-2.518678291100443e+01, // 92
 3.443799778302556e-01, // 93
 4.266486655926915e+01, // 94
 2.445666476480386e-01, // 95
 6.395214296436777e+01, // 96
-8.968314164887519e+01, // 97
-6.739831823532579e+02, // 98
-2.739814880191639e+02, // 99
-8.273331222954765e+00, // 100
-2.686117901423185e-01, // 101
-2.148670589356354e+01, // 102
 3.906349652177586e+01, // 103
-1.954016508097850e+01, // 104
-7.857473781338820e+01, // 105
-6.538054092624847e+00, // 106
-1.327083422515928e+02, // 107
-1.687958306893020e+02, // 108
 4.044002823879283e+00, // 109
 4.604140123879684e+00, // 110
 6.973674272474621e+01, // 111
-2.149450923512947e+01, // 112
-1.638201501736740e-01, // 113
-1.337838943201485e-01, // 114
 1.534004551010113e+02, // 115
-1.537362662867727e+02, // 116
 1.633970713654526e+02, // 117
-7.428407813018135e+00, // 118
-4.762108423552299e+01, // 119
 1.387012900240244e+02, // 120
 1.904516133838362e+02, // 121
 2.249306206745314e-01, // 122
 1.478383576495324e+02, // 123
-1.115506343300736e+02, // 124
 1.811014058983115e+01, // 125
-1.397740661660307e+01, // 126
 1.151814841962751e+01, // 127
 9.584844373023921e+01, // 128
-8.549964583775510e-02, // 129
-4.446606166057987e+01, // 130
-1.381892688950516e+02, // 131
-8.434198416619493e+00, // 132
-1.276809872583899e+01, // 133
 1.124429676826527e+02, // 134
 3.420657370717880e+01, // 135
 8.243901772526169e+00, // 136
-9.676435423574511e-02, // 137
-1.408390723252794e+02, // 138
 1.585144014256018e+02, // 139
-3.851636743312797e+00, // 140
-5.044080803726857e+01, // 141
-3.316276101507781e+01, // 142
 1.936110847326083e+00, // 143
 3.532395389861617e+02, // 144
-1.374497688144987e+01, // 145
-7.313234065773964e-01, // 146
-2.349590002706583e+01, // 147
 1.854577757693823e+02, // 148
 6.546719941050897e+01, // 149
-1.477199637137511e+02, // 150
 7.695735809611801e+00, // 151
-1.018933120414193e+02, // 152
 6.972684974450532e+00, // 153
 1.189430363073559e+00, // 154
 7.159591070357106e+00, // 155
-2.749155778981267e+02, // 156
 3.255311466032663e+00, // 157
-2.905119133519104e+00, // 158
-8.591643212362706e-01, // 159
 8.281746104958771e+01, // 160
 2.311095541046649e-02, // 161
-5.407239410378937e+00, // 162
 7.085760649559779e+00, // 163
 2.068644124781928e+01, // 164
 1.419443255399279e+01, // 165
 7.739027650974150e+00, // 166
-3.071273380235899e+01, // 167
 1.386141656163930e+01, // 168
-1.778323154401443e+01, // 169
-9.188655025382511e+01, // 170
-3.668185368647694e-01, // 171
 2.151457309900619e+01, // 172
 5.644852631885289e+01, // 173
-9.266292459118227e+01, // 174
 1.058369128487850e+02, // 175
-2.063910129517280e+01, // 176
 4.482738768447109e+00, // 177
 4.157458093598899e+01, // 178
 5.712572752277727e+00, // 179
 4.285412256360798e+01, // 180
 9.718953839468271e+01, // 181
-2.413248365322281e+01, // 182
-8.995203603035463e+00, // 183
 5.520028839217986e+02, // 184
 1.344911143839023e-02, // 185
 1.672243558811015e-01, // 186
 6.358356130453627e+01, // 187
 6.226592429435830e-02, // 188
-2.297487368561191e+01, // 189
 4.693558472698069e+01, // 190
-5.422336194883666e+02, // 191
 6.575892331872623e+00, // 192
-1.063217776756519e+01, // 193
-1.417924868451668e+01, // 194
-5.077732679784367e-02, // 195
-2.504558453972071e+00, // 196
-3.659356790496968e-02, // 197
-3.256594029230464e+00, // 198
 1.352889381981921e+01, // 199
-3.502686703939156e+00, // 200
-1.228424756259042e+00, // 201
 4.347727213920312e+00, // 202
-7.618171306877734e+01, // 203
 7.991680519369375e+00, // 204
 7.185301567682849e+01, // 205
-9.124005122464337e+01, // 206
-7.580214617654751e-02, // 207
 7.158981621407424e+02, // 208
-1.308510448407318e+02, // 209
-1.441114150232886e-01, // 210
-9.476951961601954e+01, // 211
 7.779750777646514e-03, // 212
 1.870652758047608e+00, // 213
 3.728583200325053e+01, // 214
 1.723177091568933e+01, // 215
 4.325281320756465e+01, // 216
-2.636800847693327e+01, // 217
-1.641223474268983e+00, // 218
 1.014894353950179e+00, // 219
 2.891467798243229e-01, // 220
-7.041524894954678e+00, // 221
-1.161875856284428e+01, // 222
-1.176694728162884e+01, // 223
-7.883927964843787e+00, // 224
 3.359051602965672e+01, // 225
-2.029315108307239e-01, // 226
 2.563162039086122e-05, // 227
-8.593162700665467e-01, // 228
 1.388193369391062e+00, // 229
 8.831655482837903e+00, // 230
-3.296238745641222e+01, // 231
 8.290965900327530e+00, // 232
-4.085237291526388e-05, // 233
-1.317927813583525e+01, // 234
-9.408555372216872e-01, // 235
 1.843767637577546e+02, // 236
 8.288233523807406e+01, // 237
 8.059305353629440e-01, // 238
-2.620890883593203e+02, // 239
-6.733019404353412e+01, // 240
-2.330196491971020e+01, // 241
-1.902985954298343e+00, // 242
 3.557235429531856e+01, // 243
 6.345335505741336e-03, // 244
 6.253993855869044e-01, // 245
 1.936141882246525e+01, // 246
 7.528396400695528e-02, // 247
-3.130393209253751e-01, // 248
-8.458513721348672e-01, // 249
 3.712377635434422e-01, // 250
-3.963506419086696e+01, // 251
 6.058152536533061e+00, // 252
 2.128380753042653e+00, // 253
 1.185193935942613e+02, // 254
-2.728178573954204e+00, // 255
 8.333200103217964e-02, // 256
 7.462743909679293e+01, // 257
 6.109694213198496e+00, // 258
-7.654489976461632e+01, // 259
 3.208360298200105e+02, // 260
-2.951415614342173e+00, // 261
 1.023995792254871e+02, // 262
 2.300744852067017e+01, // 263
 1.455610637802080e+01, // 264
-4.832612030696017e-01, // 265
 1.710214954542489e-02, // 266
-6.361344639961723e+00, // 267
 4.281574131942330e+01, // 268
 1.687512971840862e+01, // 269
 2.805966058330273e+00, // 270
 1.953240343878131e+02, // 271
 1.571646859902513e+01, // 272
 1.075577036335534e+02, // 273
 8.788721993652085e+01, // 274
 1.735151142574305e+01, // 275
 1.588861584713492e+00, // 276
 7.188289769744405e-01, // 277
-1.587385290951921e+01, // 278
 1.210997234736346e-02, // 279
 7.186514609956804e-03, // 280
-6.638863797091667e+00, // 281
-8.397156427368746e+00, // 282
 1.382407145047651e+01, // 283
-1.583153251120816e+00, // 284
-3.799059477396447e+01, // 285
-2.547640002565247e+00, // 286
-1.390251964591974e+00, // 287
-1.551664391814204e+02, // 288
-7.273667596996946e-03, // 289
-8.637429563961566e-02, // 290
-1.543965655544975e+02, // 291
-2.425698072587108e+02, // 292
-1.751828674548794e+02, // 293
-8.614050610855820e+01, // 294
 5.640431207129502e+00, // 295
-5.592037689139853e+00, // 296
 9.264625357240155e+01, // 297
 1.429788701449638e+00, // 298
-2.751040458470440e+01, // 299
-1.902712897577409e+01, // 300
 5.722552112241918e+00, // 301
-1.190466201433590e-04, // 302
-5.019865240346862e+01, // 303
-3.759817642353981e-01, // 304
-2.228769043887321e-01, // 305
 1.530555330670442e+01, // 306
 6.356293544895243e-05, // 307
 4.575401948772902e+00, // 308
 3.052649250516177e-05, // 309
 5.506606087020263e+01, // 310
 1.237847127865307e+02, // 311
 2.008540543572228e+02, // 312
 1.494867089168482e+02, // 313
 6.009679519291488e+01, // 314
-8.444514688376580e+00, // 315
-1.873922210543549e-02, // 316
 1.344135204560550e+02, // 317
 1.130834852313287e-03, // 318
 2.263305417457106e-02, // 319
-1.572487990797004e+00, // 320
 1.021220440396200e+02, // 321
 1.302252514335804e-01, // 322
-9.929707776876784e-01, // 323
 2.489318775081719e+01, // 324
-4.364878230871869e+01, // 325
-4.757003784769146e+00, // 326
 1.605579634939320e+02, // 327
-4.272693804530186e+01, // 328
 1.379429977608152e+00, // 329
-3.779602550443971e+00, // 330
-2.983594615439911e+01, // 331
-4.432872648430765e+00, // 332
-1.480282390316186e+02, // 333
 3.789440806245789e+00, // 334
-3.230132551222879e-03, // 335
-9.434585478234497e-01, // 336
-2.876321132835775e-03, // 337
-2.310722158700202e+01, // 338
 1.991464988622984e+01, // 339
 7.037400746817464e+01, // 340
-3.243052037928489e-02, // 341
 8.841464327338057e+00, // 342
-3.413928983405094e+01, // 343
 3.272153180105008e+00, // 344
-2.044647228385843e+01, // 345
-4.966084282897813e+01, // 346
-3.765051055151663e-01, // 347
 3.133201449536804e+01, // 348
-6.871829203708872e-01, // 349
-8.855779324878698e+01, // 350
 1.664589972769913e+01, // 351
-1.419106931744028e+01, // 352
 1.461294266801377e+01, // 353
-1.009064191360190e-02, // 354
-4.559104827015668e+02, // 355
 2.223268179253040e+01, // 356
 6.312086750359629e-03, // 357
 3.365624947250251e+01, // 358
 8.684110835774385e+00, // 359
 2.250257855081049e+01, // 360
-8.337100729362129e+00, // 361
-2.187271497922350e-02, // 362
 4.081776578096068e+01, // 363
 1.421163612514291e+00, // 364
-8.888137678641606e+01, // 365
 1.048052049409053e-01, // 366
-1.744831216255655e-01, // 367
-4.685947254898926e+00, // 368
 9.732768235510171e+00, // 369
 5.712942211026609e-02, // 370
 5.616990644746570e+02, // 371
-5.332376677027120e-01, // 372
-1.341853266456885e-02, // 373
-2.168466820826763e+00, // 374
 5.352855319829792e+00, // 375
-4.921640820443017e+00, // 376
 2.353172639766444e-01, // 377
-8.735025154981986e+01, // 378
 8.915024371717755e+01, // 379
 5.146896730824186e-01, // 380
-2.568634626367047e+01, // 381
 1.715364957033892e-04, // 382
 2.731182565133011e-03, // 383
-3.541407086671442e+02, // 384
 1.252201053806293e-01, // 385
-8.091778760572978e-02, // 386
-2.943655516601629e+02, // 387
-3.417806848365169e+01, // 388
-4.396711270051224e+00, // 389
 1.774139266842896e+02, // 390
-1.123329756609646e-01, // 391
-5.549032501875487e+00, // 392
-8.604292681842449e+01, // 393
-3.789908943389220e-04, // 394
 4.908028855618463e-01, // 395
 1.096944598514892e+01, // 396
 1.622572031492484e-01, // 397
-2.075998030484177e+01, // 398
 1.638995593116351e+01, // 399
-1.281871533932353e+01, // 400
 3.227011946755369e+01, // 401
 1.655874289165493e-04, // 402
-2.234875793639116e+00, // 403
 5.753071575346021e+01, // 404
 4.183110666417558e+01, // 405
-3.167271740610338e-01, // 406
-2.852520835682080e-02, // 407
-5.741140472648028e+01, // 408
 3.315732969927012e-01, // 409
 8.786705200028686e-01, // 410
-2.702127247009080e+02, // 411
 8.864629978495701e+00, // 412
-5.812191216438104e+01, // 413
-8.858601629591146e+01, // 414
 2.668847235676273e+01, // 415
-7.577773604613988e-02, // 416
-1.297698561985433e+01, // 417
 8.630382650845601e+00, // 418
 1.449077084324630e+00, // 419
 2.062080501673955e+00, // 420
 7.332183482266263e-01, // 421
-4.566320899176470e+01, // 422
-1.261410929246880e-02, // 423
 4.744149881145528e+00, // 424
-2.435345764456966e+00, // 425
-2.720108453274642e+02, // 426
 1.861901745821386e+00, // 427
 2.597547812939815e-01  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.554230228310247e-01; // A^(-1)
    m_k_OH_intra =         2.791787940287679e-01; // A^(-1)
                           
    m_k_XH_coul =          6.157920027858209e-01; // A^(-1)
    m_k_XO_coul =          7.336370062588925e-01; // A^(-1)
                           
    m_k_XLp_main =         1.030036858073330e+00; // A^(-1)
                           
    m_d_HH_intra =         1.999999983133561e+00; // A^(-1)
    m_d_OH_intra =         1.856124606997361e+00; // A^(-1)
                           
    m_d_XH_coul =          6.787248940959749e+00; // A^(-1)
    m_d_XO_coul =          6.999998345927180e+00; // A^(-1)
                           
    m_d_XLp_main =         3.844616172607531e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_br_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_br_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_br_cutoff(double* r)
#else
void mbnrg_2b_h2o_br_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
