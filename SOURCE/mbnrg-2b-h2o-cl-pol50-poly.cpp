#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
 2.822306033090254e+02, // 0
-4.113106009403226e+02, // 1
 1.733461338904686e+02, // 2
 1.442423379440073e+02, // 3
 6.976322464343122e+01, // 4
-1.086695011981587e+02, // 5
 5.967322965149692e+02, // 6
-3.973086558526656e+01, // 7
-2.656347832361290e+02, // 8
-2.026203107965944e+02, // 9
-9.210798865145540e+01, // 10
 1.196337890792845e+02, // 11
 1.906360480522433e+02, // 12
-4.292037266490456e+02, // 13
-3.988807410046467e+02, // 14
-7.773988057415629e+01, // 15
-6.614761160210402e+02, // 16
 2.869351846450710e+02, // 17
 1.051014246103321e+02, // 18
-1.688503751577662e+02, // 19
 4.984259530123745e+02, // 20
 3.760512221946514e+01, // 21
 3.913053913521692e+00, // 22
 4.253701738618692e+01, // 23
-2.162600090160744e+02, // 24
 8.866599295260309e+02, // 25
 1.662442052159354e+02, // 26
 3.975005624519235e+02, // 27
 2.780508808620767e+02, // 28
-3.508888335450538e+02, // 29
 1.107225257738414e+01, // 30
 2.952678913979838e+00, // 31
 3.492784913402253e+00, // 32
 5.805490678386003e+02, // 33
-1.094734407424511e+03, // 34
-1.057953540861429e+02, // 35
-8.084009279684640e+00, // 36
-3.072672046143556e+02, // 37
 1.251474906059818e+02, // 38
 2.352622102204173e+02, // 39
 8.212327513432876e+01, // 40
-5.914640696561474e+01, // 41
-1.211584139671701e+01, // 42
 3.642155906051148e+00, // 43
-2.159606455978941e+02, // 44
-3.099549708621952e+01, // 45
 9.955110696302116e+00, // 46
 5.585533059022914e+01, // 47
-9.986597500659573e+01, // 48
 1.939378379034762e+01, // 49
 5.852969013975322e+00, // 50
-2.833315400393236e+01, // 51
-4.948067173554471e+01, // 52
 2.565611826232843e+02, // 53
-1.379360560612846e+02, // 54
-2.623603410140741e+02, // 55
 7.880007471357854e+00, // 56
 2.145059926992286e+02, // 57
-8.517109385449699e+01, // 58
-2.884117972687325e+02, // 59
-5.907383761839159e+01, // 60
 8.089900032976320e+01, // 61
 3.430975042476818e-01, // 62
 6.966984016665151e+00, // 63
-3.069228079365748e+00, // 64
-3.377641478339808e+01, // 65
-1.655073822504853e+01, // 66
-7.301972170505783e+01, // 67
-9.200668913979133e+01, // 68
 2.074029809294994e-02, // 69
-3.661012674598168e+01, // 70
-1.794122200977418e-03, // 71
 3.943877563342053e+01, // 72
-5.713375217712637e+01, // 73
 4.134700698651137e+01, // 74
-7.829995299236420e+01, // 75
-4.913897324572513e+00, // 76
-7.414811184715160e+00, // 77
-4.165562878517397e+01, // 78
 2.648880083456109e+02, // 79
 1.057674514646388e+00, // 80
-7.503115980999542e+01, // 81
 4.505466350156874e-01, // 82
 2.944580767277932e-01, // 83
 8.184378435902233e-02, // 84
 1.050193472609486e-03, // 85
-1.672847150550290e+02, // 86
 1.873485902286140e+01, // 87
 3.396935765560865e+02, // 88
 4.084326802438444e+00, // 89
-7.694143749354321e+01, // 90
 2.946546392521424e+01, // 91
-5.022133838312572e+01, // 92
-1.603722842597090e+02, // 93
 5.750236371524357e+01, // 94
 1.490334500832076e+02, // 95
 2.548525757355385e+01, // 96
-1.393897028206854e+02, // 97
-1.212659029774892e+01, // 98
-4.253737727653083e+02, // 99
-4.737145145861683e+01, // 100
-1.881721655638363e-01, // 101
-3.945560793910952e+00, // 102
-4.058801931139964e+00, // 103
-2.060791372894143e+02, // 104
-2.502573263619181e+01, // 105
-9.764974321072403e+00, // 106
 3.637606449675511e+01, // 107
-1.020053021479893e+02, // 108
 1.800116055143907e+01, // 109
-4.862422734290902e-02, // 110
 1.299154471771150e+01, // 111
-6.205331313976219e+01, // 112
-6.999488372901982e-02, // 113
-4.741370658368059e-01, // 114
 9.294207362776804e+00, // 115
-1.276697621740452e-01, // 116
 9.300121225365697e+01, // 117
-2.607612926900712e+01, // 118
-9.182940051364217e+01, // 119
-1.244896761676401e+00, // 120
 5.409338459781144e+01, // 121
-3.638191777402014e+00, // 122
-7.847080322025390e+00, // 123
-2.257255833119782e+02, // 124
-3.736851290328946e-01, // 125
-8.664008158740752e-02, // 126
-5.121748190615114e+02, // 127
 2.496819778067798e-01, // 128
 8.920711168138036e-02, // 129
-4.093399847760594e+01, // 130
-4.574274365337257e+00, // 131
 2.730761681722158e+00, // 132
-2.005661663679502e+01, // 133
 6.290657537576917e+01, // 134
 1.136135634841309e+02, // 135
 1.056862635452785e-01, // 136
-3.238396830529805e+00, // 137
-2.699606866193236e+02, // 138
 8.159435669916346e+01, // 139
-1.570522607486411e-01, // 140
-9.899109752268746e+00, // 141
 7.301524717812086e+01, // 142
 2.326579581163222e+02, // 143
 1.432166576306185e+02, // 144
 1.778778795811550e+00, // 145
-1.436479534681724e+01, // 146
-5.360558690972968e+00, // 147
 4.255630145072501e+01, // 148
 2.804687358721732e+01, // 149
-2.160702328733177e+01, // 150
 4.530986477830570e-02, // 151
-7.525916826476455e-01, // 152
 1.277137433102788e+00, // 153
 2.528933760367742e+00, // 154
 2.101020451076434e-01, // 155
-2.117197217274088e+02, // 156
 9.545796708355574e+00, // 157
-1.460129085852130e+00, // 158
-3.067563178867918e+00, // 159
-1.375219569432657e+00, // 160
-1.876232740150151e-04, // 161
 1.860809126455155e+01, // 162
 3.760816530232414e+01, // 163
 9.400808935041758e+01, // 164
 1.192761484601534e+01, // 165
 2.618307934665498e+02, // 166
 4.073874690150597e+00, // 167
 9.952741963458465e+00, // 168
-3.717485177569965e+01, // 169
-1.151786674459740e+02, // 170
-6.206245945381459e-01, // 171
-2.302485096095594e+02, // 172
 7.210899478757202e+01, // 173
 9.260979865814190e-02, // 174
-8.737358775652977e+00, // 175
-1.331799723299889e+00, // 176
 8.620186120391284e-02, // 177
 2.282071129689498e+02, // 178
 1.635233470288166e-01, // 179
 5.142920958998715e+01, // 180
 3.843629578695019e+02, // 181
 3.206869091512837e-01, // 182
-7.038975886212802e-01, // 183
 2.008954045472975e+02, // 184
 8.502737355387948e-03, // 185
 3.078722532671700e-03, // 186
 2.426476064145502e+02, // 187
 4.366302397266026e-02, // 188
-4.313462264849551e-02, // 189
 5.709423486348750e+01, // 190
-1.393035178274274e+02, // 191
 4.249263731835440e-01, // 192
-3.329637201242974e-01, // 193
-3.884214046924222e+01, // 194
 4.421748510914692e-02, // 195
 2.093215592942112e-03, // 196
-2.656278563570986e-01, // 197
-1.726641395207945e+02, // 198
 6.761452892915016e-01, // 199
-3.082718970958496e+01, // 200
-6.054952922008975e-01, // 201
 1.135540435349481e+00, // 202
-2.204449294550833e-01, // 203
 2.528086245193651e+00, // 204
 3.609354226204269e-01, // 205
-2.890516017218642e+02, // 206
-1.290403910196951e-02, // 207
 1.174046364927951e+02, // 208
-1.015596990280065e+02, // 209
-5.011406314060675e-02, // 210
-1.637526264409161e-02, // 211
 6.761767764380513e-04, // 212
 2.574204108812885e+00, // 213
-6.340660788880792e+00, // 214
 1.018185854587562e-02, // 215
 5.555268236397898e+00, // 216
-3.449508572051477e+01, // 217
-4.800333004200895e+00, // 218
 3.223897980108079e-01, // 219
 2.950766067945260e-01, // 220
-2.628913198470066e+00, // 221
-1.117010288610888e+02, // 222
 9.974536203706744e+00, // 223
-1.124058019838484e+00, // 224
 5.899467208778526e+01, // 225
-2.161292060346286e-02, // 226
 5.040740656373355e-05, // 227
-1.184166190201784e-01, // 228
 7.310369071259402e-02, // 229
 1.598802690012432e+00, // 230
 1.344746992919598e+02, // 231
 2.179653537742193e+00, // 232
 1.042231335485990e-03, // 233
-2.129667731248699e+02, // 234
-3.054022203855936e-02, // 235
 1.195608004646882e+02, // 236
 2.285154444586608e-01, // 237
 6.704918704359797e-01, // 238
 2.365103960260656e+01, // 239
-8.729579330993881e+00, // 240
-6.130070643996092e-01, // 241
-3.907757735139850e-02, // 242
 1.963809573899567e+01, // 243
-2.327205972385594e-03, // 244
 5.120675262875521e-02, // 245
-3.767932053929423e-01, // 246
 8.472171420999959e-02, // 247
-4.756393664192852e-01, // 248
-1.512988874987667e-02, // 249
 8.098575963828975e-03, // 250
-5.513111587652554e-02, // 251
 4.695984511154066e-01, // 252
 4.065045721130176e+00, // 253
 9.419581134255196e+01, // 254
-5.682586666569261e-02, // 255
 2.555178830017841e-01, // 256
-3.309112102159620e+00, // 257
 2.767141446689139e-02, // 258
-2.601394201654560e+01, // 259
 1.467673520637521e+02, // 260
 2.270255094962652e+01, // 261
 4.942471791029937e+00, // 262
 1.665518005301472e-01, // 263
 7.769212253235139e-02, // 264
-2.093271814902159e+00, // 265
 9.844917287997957e-03, // 266
-1.692499402972425e+00, // 267
 5.492888367098901e+00, // 268
-4.932020445855480e-02, // 269
 8.269742449968783e+00, // 270
 2.465826508166230e-02, // 271
-1.922888495715259e+01, // 272
 3.643109574097811e-01, // 273
 6.098052109773183e-01, // 274
 1.243625178956261e-01, // 275
 2.406288389774233e+01, // 276
 6.431882155398241e-02, // 277
-1.790500359103850e+01, // 278
 4.624872968299239e-02, // 279
 6.911927422560592e-03, // 280
 7.304464665097809e+01, // 281
-8.293756083961153e+00, // 282
-2.004565016063365e-01, // 283
-4.080679458777692e-01, // 284
 9.439129677046474e-03, // 285
-3.939001745834231e-01, // 286
-1.507022801765634e+00, // 287
-6.130281309790665e+00, // 288
-6.185273793167902e-03, // 289
-2.567170435354453e-02, // 290
-1.869455332106515e+00, // 291
-3.768910919658229e+01, // 292
-3.015342723144341e-03, // 293
-8.972082543693300e+01, // 294
 2.194586226562425e+01, // 295
-3.752933946049283e+00, // 296
 3.062856901468489e+02, // 297
 5.447735700611374e-01, // 298
-4.241491037817713e+00, // 299
 1.773908645133725e+00, // 300
 8.263165491698793e-01, // 301
 3.731279308822512e-04, // 302
-2.892319369610702e+01, // 303
-4.839762062892056e-01, // 304
-1.328890570813954e+01, // 305
-8.984426747785927e+00, // 306
-1.405842383001576e-03, // 307
-1.090489162579342e+00, // 308
 2.866976197276265e-04, // 309
-1.885681824756840e+01, // 310
 3.002293318201437e-03, // 311
 2.157759234527993e+00, // 312
-7.086454404237044e+01, // 313
-2.831284214990722e-02, // 314
-1.271454070058516e-01, // 315
-1.198648352583481e-02, // 316
 1.276224361788729e+01, // 317
 2.966750532664807e-03, // 318
 3.302240983968927e-02, // 319
 2.502760588643885e+01, // 320
 3.562089962458896e+00, // 321
 1.784317381125439e-02, // 322
-1.272838847512756e-03, // 323
 1.167637038125375e+02, // 324
 1.168508846897098e-01, // 325
-2.155976417345274e-01, // 326
-6.185375345162360e+01, // 327
-1.799649467600697e+02, // 328
 6.597586430911605e-03, // 329
-8.755502669199393e-02, // 330
 3.297599003385535e+00, // 331
-2.914622773567869e+00, // 332
-4.266452510044266e-01, // 333
 3.946450216170020e+00, // 334
 9.910913681913183e-03, // 335
-4.696507523479696e-02, // 336
-5.545100407144225e-03, // 337
-4.676229441960162e+00, // 338
 7.951046798778474e+00, // 339
 2.356229972702674e+00, // 340
-6.580915597032524e-03, // 341
 7.829693975282606e-01, // 342
 4.472681302588445e-01, // 343
 3.948198323488811e-01, // 344
 2.896199336274995e+00, // 345
 9.499590770975766e+01, // 346
-1.100775564650115e-01, // 347
-3.520673154491487e+00, // 348
-1.423892173895541e-02, // 349
-2.793501940263162e+00, // 350
 1.966281485872551e+00, // 351
-2.201499583907575e+00, // 352
-8.579446802730529e+01, // 353
 6.002208282991643e-04, // 354
-6.415118859842306e+01, // 355
 6.264323582740185e+00, // 356
-6.688773380962049e-03, // 357
 1.190824511150629e+01, // 358
 3.199293752709778e-03, // 359
 4.360804911788725e+01, // 360
-3.848488542840857e+00, // 361
 1.593255749496935e-01, // 362
-1.180987703709420e+01, // 363
 1.111213693673109e+02, // 364
-4.543190813825694e+00, // 365
-1.625499195356739e-01, // 366
-2.280091634847620e-01, // 367
-2.159576503394255e+00, // 368
-2.722100321499190e+01, // 369
 3.274497167248026e-02, // 370
 1.029277522175784e+03, // 371
 9.583814892461026e-02, // 372
 2.353869632393659e-03, // 373
-1.751216390421712e+00, // 374
 2.368412343441699e+01, // 375
-4.868691228507773e+00, // 376
 4.633693040818782e-01, // 377
 1.131583778935446e+01, // 378
 3.905584508814358e+01, // 379
 5.572764824181640e-01, // 380
 1.892156313722545e+01, // 381
-1.181746530633257e-03, // 382
 2.757883482815467e-03, // 383
-2.249637834557508e+02, // 384
-9.448633922578457e-02, // 385
 1.095350905840063e-01, // 386
-5.801370850578693e+02, // 387
 5.051012975607533e+00, // 388
-1.636125832389165e-01, // 389
 1.506958779656342e+02, // 390
 9.635850051840017e-01, // 391
-7.319907445765634e+00, // 392
-5.859512513366524e-01, // 393
-7.602232972054488e-03, // 394
 8.304132719213878e-02, // 395
-2.175315019230536e+00, // 396
 1.350198557705355e-01, // 397
-2.369149803251722e-01, // 398
-1.430351045407703e+01, // 399
-1.126459857092210e-01, // 400
-3.791192960400091e+01, // 401
 5.072523910228961e-04, // 402
-4.868864068003263e-02, // 403
-5.157240971658126e-04, // 404
 5.780621621465595e-02, // 405
-2.859115299700094e+01, // 406
-1.023860236655524e-01, // 407
-1.244011837000469e+02, // 408
 1.168327948720672e-03, // 409
 5.040102146213426e+00, // 410
-7.773691449427187e+01, // 411
-1.198666754630155e-03, // 412
 5.484455679356151e+01, // 413
 7.052809678718050e+01, // 414
 9.967035763172433e-01, // 415
-3.676474061157969e-02, // 416
-2.851460051823174e+01, // 417
 5.059979709278139e+01, // 418
 2.782591643419219e+00, // 419
 1.527133166121503e-01, // 420
 1.446389804671127e+00, // 421
 4.286889059409026e-02, // 422
-1.072617443969023e-02, // 423
 2.831614358741749e+00, // 424
 4.426489299228892e-02, // 425
-2.216753953539606e-02, // 426
 7.403313644462542e-01, // 427
 8.516202254346221e-01  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         1.839454690071572e-01; // A^(-1)
    m_k_OH_intra =         2.199030035682704e-01; // A^(-1)
                           
    m_k_XH_coul =          5.740082696960864e-01; // A^(-1)
    m_k_XO_coul =          7.837487022408041e-01; // A^(-1)
                           
    m_k_XLp_main =         1.112445771844149e+00; // A^(-1)
                           
    m_d_HH_intra =         1.169380251799840e+00; // A^(-1)
    m_d_OH_intra =         1.799405409331868e+00; // A^(-1)
                           
    m_d_XH_coul =          6.999839788644834e+00; // A^(-1)
    m_d_XO_coul =          6.999999848474346e+00; // A^(-1)
                           
    m_d_XLp_main =         5.182926061094706e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_cl_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_cutoff(double* r)
#else
void mbnrg_2b_h2o_cl_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
