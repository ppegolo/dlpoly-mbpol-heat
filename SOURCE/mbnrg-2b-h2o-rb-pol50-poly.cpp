#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
 6.201173649996631e+00, // 0
-2.152851435384085e+02, // 1
 9.912568675754552e+01, // 2
 1.349920970808568e+02, // 3
-9.668676961480765e+00, // 4
-5.666569808848650e+01, // 5
-2.019000021372754e+01, // 6
-1.285770463277466e+01, // 7
-3.795659404907477e+01, // 8
-6.608843376567039e+01, // 9
 6.115365839631328e+01, // 10
 9.948681569888878e+00, // 11
-1.178312865774000e+02, // 12
-1.407815013396736e+02, // 13
 5.251723515424885e+01, // 14
-1.294504487693367e+02, // 15
 4.393327758441388e+02, // 16
 3.430345958059083e+02, // 17
 4.489524514997347e+01, // 18
 9.679345437854870e+01, // 19
 2.436003787468132e+01, // 20
-6.354169306078315e+01, // 21
 1.809928043023553e+02, // 22
-3.944798080350041e+00, // 23
 1.037788253106361e+01, // 24
 3.366729836333825e+01, // 25
-7.869906278801606e+01, // 26
 3.756887281704159e+01, // 27
 7.711492460890783e+01, // 28
 1.298145204751284e+02, // 29
-7.678390564150854e+01, // 30
-1.593014657921610e+02, // 31
-1.521846281125041e+01, // 32
-1.701368375067026e+01, // 33
 7.136958670054005e+01, // 34
-6.815933398717253e+00, // 35
-6.549355993549767e-02, // 36
-2.121917190787680e+02, // 37
 9.668807113929573e+01, // 38
 6.453096758650128e+01, // 39
 5.863342810048081e+01, // 40
 8.939272160526772e+01, // 41
 2.187470172833303e-01, // 42
-3.191709725091690e+01, // 43
-2.568989963885155e+02, // 44
 2.981124724773223e+01, // 45
-1.466371459454796e+02, // 46
 1.284336547373267e+02, // 47
 1.444434404010134e+02, // 48
 1.150665864684836e+02, // 49
-1.036074905520144e+02, // 50
 3.907339852684528e+01, // 51
-2.872432823762760e+01, // 52
-6.319494073256179e+01, // 53
-1.481524125625717e+02, // 54
-5.057126106611844e+02, // 55
-4.641027142159723e+00, // 56
-3.777070629164108e+02, // 57
 4.342046541578208e+00, // 58
 2.066549088003936e+02, // 59
 6.204256998852872e+00, // 60
 2.533287225346051e+02, // 61
 9.581199293299112e-01, // 62
-2.466488504164833e+00, // 63
 4.152751070491048e+01, // 64
-1.947266843444867e+02, // 65
 1.407076648155903e+02, // 66
-4.529637153019928e+01, // 67
-2.715199540203583e+02, // 68
 7.719068619614576e+00, // 69
-2.422807411718036e-02, // 70
-1.268380468647935e+01, // 71
-4.319486539184256e+00, // 72
 3.188559718819810e+02, // 73
 1.046128385251858e+01, // 74
 1.408133867274819e+01, // 75
-6.676174180658531e+00, // 76
 2.399366976521419e+02, // 77
-8.722730004942075e+01, // 78
 5.763754103111469e+01, // 79
 8.599584816527129e-01, // 80
 5.454211682087672e+00, // 81
 6.809631027662197e+00, // 82
 1.662023216857151e-01, // 83
 1.566070858976198e+01, // 84
-2.697269896797677e+00, // 85
-5.634330634890640e+01, // 86
-1.066512503199520e+02, // 87
-3.683888815621148e+02, // 88
 4.764085942806054e+01, // 89
-4.939205137450873e+01, // 90
-5.042312026700270e+00, // 91
 1.089472490058866e-01, // 92
-1.711968025992237e+02, // 93
 8.126087557939086e-01, // 94
-7.084419492949417e+01, // 95
-5.291665534445856e+02, // 96
 1.642170470129089e+02, // 97
-3.990693956469829e+02, // 98
-3.457361115066647e+01, // 99
-8.159090202399204e+00, // 100
 1.221151941892370e+00, // 101
-1.026076981462589e+01, // 102
 6.328011486787105e+01, // 103
-1.009834598241532e+02, // 104
-3.823616803346447e+01, // 105
-9.717240166001553e-01, // 106
 1.473488695003474e+01, // 107
 6.567784220672037e+01, // 108
 5.006534289467361e+00, // 109
 1.885583370587198e+01, // 110
-2.103562098052799e+01, // 111
-7.485939843704999e-02, // 112
-1.105663475633290e+00, // 113
 1.401130763113745e+00, // 114
 1.663878691183358e+00, // 115
 9.304857125406953e+01, // 116
 1.129706742661179e+00, // 117
 1.889617584777701e+01, // 118
-2.794582850361561e-01, // 119
-2.483174659162334e+02, // 120
 2.962750255874929e+01, // 121
-3.417043694188240e-02, // 122
 1.046331639563697e+02, // 123
-6.346208955962440e+01, // 124
 3.707025066678673e+00, // 125
-4.524397030920348e+01, // 126
-6.844560492344384e+01, // 127
-9.571340448140905e+00, // 128
 2.159951652077844e+01, // 129
-3.191666644032326e-01, // 130
 4.223549012842215e+02, // 131
 4.255687579715747e+01, // 132
-7.242272670702441e+01, // 133
-5.534812894278736e+00, // 134
 4.893735570481514e+00, // 135
 1.190236942614665e+02, // 136
 1.332096481280356e+01, // 137
 2.827463988845201e+01, // 138
-9.995173054573111e+01, // 139
-2.757908518920684e+00, // 140
-1.898017846213407e+02, // 141
 1.950862665884675e-01, // 142
 2.575531299318777e+02, // 143
 7.633903935692560e+01, // 144
 6.280941900862251e-01, // 145
 2.415229517576521e+01, // 146
-9.524785713169184e+00, // 147
-1.215986016425281e+02, // 148
-2.736018330127535e+00, // 149
 4.721781680666865e+02, // 150
 7.819986066626814e+01, // 151
 9.112542236495071e+01, // 152
 4.526061961675894e-02, // 153
 9.648247596351898e-04, // 154
-7.365472586792922e+00, // 155
-6.649376194945361e+01, // 156
-9.005964819909225e+01, // 157
-3.380231421840562e-03, // 158
-1.234519195254714e+00, // 159
 9.772361429710795e+00, // 160
 2.217546395114944e-01, // 161
 9.022822535214729e+01, // 162
-5.623514872457182e+01, // 163
 1.130490939358571e+02, // 164
 8.390295089858336e+00, // 165
 9.282123464129829e+01, // 166
 1.039897987733925e-01, // 167
 9.626083569679817e+00, // 168
-4.098807247427209e+01, // 169
-1.673358343801691e+00, // 170
-7.631623404709194e+00, // 171
-1.214957514605254e+01, // 172
 2.064885320659023e+01, // 173
-3.515499339110052e+01, // 174
-1.142309268613596e+02, // 175
-2.362570271551669e+01, // 176
 9.167529157127827e+00, // 177
-6.600798934735213e+00, // 178
-4.261017409887658e+02, // 179
-4.508216546882564e-02, // 180
 7.610167982018993e+01, // 181
 1.322052998759358e+01, // 182
-6.260808566040420e+00, // 183
 2.944747887576140e+02, // 184
-3.289084213497617e+00, // 185
 2.190421447590149e+00, // 186
-4.204200246963118e-01, // 187
-1.633555365504119e-01, // 188
 4.275367565834736e-01, // 189
 7.523455283181117e+01, // 190
 1.832643394958581e+01, // 191
 8.195604580716240e-02, // 192
-1.365207826857356e+01, // 193
-8.664837321470918e+00, // 194
 6.969584860722337e+00, // 195
-6.480557835630890e-01, // 196
-1.215257690802025e+01, // 197
-5.637652026226016e+01, // 198
-3.633067029317144e+00, // 199
 7.258576430492050e+01, // 200
-7.087054951499579e-02, // 201
-1.670266254151173e+00, // 202
 1.120725503736463e+02, // 203
 7.072088026908528e+00, // 204
-5.946952213412519e+00, // 205
 3.680421570010476e+00, // 206
-1.364445219696051e+00, // 207
 2.779461187584778e+02, // 208
-2.088848457338147e+01, // 209
-1.076703799292620e-05, // 210
 6.420943945006220e-04, // 211
-4.031311520985718e+00, // 212
 2.827471549323125e-03, // 213
 4.418847623206248e+00, // 214
-4.019354068121582e+00, // 215
-2.386925008860998e+01, // 216
 1.674409001943871e+00, // 217
 5.631936830114294e+01, // 218
 7.649301530784999e-02, // 219
 4.763143909138676e-01, // 220
-2.931406842421235e-03, // 221
 1.061851035419887e-01, // 222
-2.300568562199901e-01, // 223
-2.381357184932632e-01, // 224
 4.912778548440153e+01, // 225
-1.361871250101108e-01, // 226
 1.016541462732522e-02, // 227
-4.067759199806952e+00, // 228
 3.173889574735599e+01, // 229
-1.689523020450124e+00, // 230
-7.923369258947124e-03, // 231
 1.919564350455039e+01, // 232
 3.156132650013679e+00, // 233
-2.266503322500078e-01, // 234
 5.683241520372357e+01, // 235
 6.595409894345219e-03, // 236
-1.311978421402555e+02, // 237
-2.776825460521299e+01, // 238
-1.727089806061845e+02, // 239
 2.840293169086755e+02, // 240
-1.701085430743904e+00, // 241
-3.576269706306693e-01, // 242
-8.491533864309218e+00, // 243
-6.632768767123783e-03, // 244
-2.576522120514086e-03, // 245
-2.224945167892210e+01, // 246
 2.874326133735346e-01, // 247
 2.433874166857513e+00, // 248
 3.503667068825390e-01, // 249
-1.132594575585365e+01, // 250
-3.118124038589747e+01, // 251
 5.766805726163299e+00, // 252
-1.046658311250170e+00, // 253
-4.230408573180955e+01, // 254
 1.126934371445076e+01, // 255
-5.912449846535321e+00, // 256
 6.926838170739245e+01, // 257
 1.009664034451469e-02, // 258
-1.809620168057592e+02, // 259
 4.838314933505989e+00, // 260
-4.005967509089991e-03, // 261
 1.046517728249970e-01, // 262
 2.794964067152889e+01, // 263
-1.930145466855610e+01, // 264
 3.028404341884404e+00, // 265
 4.636202766828606e-01, // 266
-2.853833780743502e+01, // 267
 8.935805775912391e-03, // 268
-1.765692054973591e-06, // 269
-2.031405182322143e-01, // 270
-8.303316441761400e-03, // 271
-1.441537273895932e+02, // 272
 1.797917454097872e+02, // 273
 1.406324564620021e+00, // 274
-1.197011025893147e-02, // 275
-5.272636333536387e+00, // 276
-2.606479663795840e-07, // 277
-3.667808774051906e-01, // 278
 1.457498617282175e+01, // 279
-2.708816392131468e+00, // 280
 7.252181821801374e+00, // 281
-3.589462895851307e+01, // 282
 4.614629414586589e+01, // 283
-2.852639726059770e+00, // 284
-3.746283232368965e-01, // 285
 1.938953700336607e+01, // 286
 7.076990377747532e-02, // 287
 3.730888940844796e-03, // 288
-2.921131354270863e-01, // 289
-4.185951114055282e+00, // 290
 3.756523305102550e+00, // 291
 1.167747063565711e+00, // 292
-2.915674170126696e-01, // 293
-1.511960932803576e+00, // 294
-1.005084400791686e+01, // 295
 3.893799323220758e-01, // 296
 1.211069072104425e+00, // 297
-1.355589370231535e-03, // 298
-1.454273882504366e-03, // 299
-1.103451916124105e+01, // 300
-6.568519762918174e+01, // 301
-1.786538050270292e-01, // 302
-7.014546346181326e-01, // 303
-4.575366524804873e-02, // 304
-2.231803448926652e+01, // 305
-9.279945784030454e+01, // 306
 5.805235082936538e-03, // 307
 4.980203239786348e+01, // 308
-4.135771137487274e-02, // 309
-3.016212150106540e+00, // 310
-9.679649256844300e-02, // 311
-8.520253655277431e-01, // 312
 4.644227328631748e+00, // 313
 5.183418096567931e-04, // 314
 2.341672150291846e+01, // 315
 1.823446793432800e+00, // 316
 2.624502110472032e+00, // 317
 1.649040473862632e+00, // 318
-5.301898951367133e+00, // 319
 2.269256268406710e-01, // 320
 4.188394623657495e+00, // 321
-5.525263973201155e+00, // 322
-5.885783679466180e+00, // 323
-4.145594194599542e+00, // 324
 5.518671660034739e+01, // 325
-2.132030893959714e+01, // 326
-4.919168258241230e+00, // 327
-4.161126668810946e+00, // 328
 5.337552895639135e+00, // 329
 6.819676545939006e-05, // 330
-1.392479111518851e+02, // 331
 4.827954829925338e-01, // 332
-1.225665129833240e+02, // 333
 2.262588413084781e+00, // 334
 1.911758128631828e-04, // 335
-6.250979990827017e+00, // 336
 5.990122402520557e-01, // 337
-1.058230452999883e+00, // 338
-5.255979618777973e+00, // 339
 4.751640107473999e-02, // 340
-5.873215718370578e+00, // 341
 4.640216810590953e-02, // 342
-4.562254393596723e+00, // 343
 8.374766705664122e-01, // 344
-2.090861054965600e+01, // 345
-7.303526210065531e-01, // 346
-1.054211433408945e+01, // 347
 5.889627284569181e+02, // 348
-2.933045782303073e+01, // 349
-1.054110013900309e-01, // 350
 2.351273705316620e-01, // 351
-1.153478407256951e+02, // 352
 1.273729705177485e-02, // 353
 4.852995332483130e-01, // 354
-4.805706856089846e+00, // 355
 1.501465142851503e+01, // 356
-1.255988745670417e-02, // 357
-3.438362535905024e+01, // 358
-4.081412101849469e+00, // 359
-2.834787961555928e-02, // 360
-3.051138106360756e-04, // 361
 1.293726567741828e+00, // 362
-5.537682150182108e+01, // 363
-6.671521772377507e-03, // 364
 4.887287090092232e+01, // 365
-3.702611580081065e-02, // 366
-2.017213725443531e+00, // 367
-2.960563397511531e+00, // 368
-1.220556158434469e-01, // 369
-3.432084870704752e-04, // 370
-6.520988271999808e+00, // 371
-2.079108181103488e-04, // 372
-1.796408899519447e+00, // 373
 4.506288153769191e+01, // 374
-4.942026001216640e+01, // 375
-9.985715212749378e-01, // 376
 6.351894372978018e+00, // 377
 6.733687286629903e+01, // 378
-2.604158115511070e+00, // 379
 9.171095045113736e-02, // 380
 4.617498148265280e+00, // 381
 1.071603883979717e+00, // 382
-1.117727570249054e+00, // 383
-3.069878528596118e+02, // 384
-6.891932704213762e+00, // 385
-5.884254176025263e-05, // 386
-4.695025050070594e+00, // 387
 1.604546881357344e+00, // 388
 1.052923384364706e+01, // 389
 4.562260155270194e-01, // 390
-6.082266027661253e+00, // 391
-3.004377111360995e-01, // 392
 2.530613000863779e-01, // 393
 3.352715776718987e-02, // 394
 1.924682776367041e+00, // 395
 3.309315263615070e-01, // 396
-5.016952462525271e+00, // 397
 5.984463942640545e+01, // 398
 8.833862625151847e-01, // 399
 1.702695392032349e+00, // 400
 2.422792078805075e+00, // 401
-2.379126582782323e-01, // 402
-1.878369961504779e+01, // 403
-1.764939586739884e+01, // 404
-2.301810286067852e+01, // 405
-1.058020591096714e-02, // 406
 1.634329933161352e+00, // 407
-1.509718156419119e-03, // 408
-2.126670023267136e+00, // 409
 7.270817985414308e+01, // 410
-1.908480363204702e+00, // 411
 4.250540332981607e+00, // 412
 4.266126911073987e+01, // 413
 1.304865134975141e+00, // 414
 1.010358053752141e+01, // 415
 1.980793364878820e-01, // 416
 2.253046783256747e-01, // 417
 1.190056724737279e+02, // 418
 2.330166480598325e-02, // 419
-1.209574234612266e+01, // 420
 6.762583623739624e+00, // 421
 9.435032099584875e-05, // 422
 6.597548151353474e+00, // 423
-7.609438514367113e-05, // 424
 1.818077863285297e-08, // 425
-3.104664654188284e-01, // 426
 1.870820476759760e+02, // 427
-4.147116932653467e+00 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.020884164882862e-01; // A^(-1)    
    m_k_OH_intra =         7.538548886230846e-01; // A^(-1)
                           
    m_k_XH_coul =          3.731312948942484e-01; // A^(-1)
    m_k_XO_coul =          1.085901650348962e+00; // A^(-1)
                           
    m_k_XLp_main =         6.988013194992498e-01; // A^(-1)
                           
    m_d_HH_intra =         1.572063797914580e+00; // A^(-1)
    m_d_OH_intra =         1.456297863047463e+00; // A^(-1)
                           
    m_d_XH_coul =          6.469122446679489e+00; // A^(-1)
    m_d_XO_coul =          6.164803647618514e+0; // A^(-1)
                           
    m_d_XLp_main =         3.916345256929881e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_rb_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_rb_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_rb_cutoff(double* r)
#else
void mbnrg_2b_h2o_rb_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
