#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
 1.992108786573811e+02, // 0
-8.387140200659405e+02, // 1
 5.650911147610440e+02, // 2
 2.210430376165250e+02, // 3
 1.023753259139149e+02, // 4
-1.707001283939466e+02, // 5
 9.616875529693134e+02, // 6
-4.067920555659061e+01, // 7
-9.728712665539273e+01, // 8
-5.876697632787894e+02, // 9
 2.822982006701083e+01, // 10
-8.455626839471037e+00, // 11
 1.655078312096410e+02, // 12
-2.682274077135988e+02, // 13
-3.682015483969096e+02, // 14
 1.505774698471652e+02, // 15
-6.431191797661384e+02, // 16
 2.996367112690382e+02, // 17
 1.501260784365025e+02, // 18
-8.082285657445527e+01, // 19
 4.398176714995435e+02, // 20
 7.055660127816824e+01, // 21
-3.380495745217909e+00, // 22
-4.052349001579732e+00, // 23
-6.693603597825734e+01, // 24
 4.312433727166905e+02, // 25
 1.032002427808121e+02, // 26
 6.820313713682332e+02, // 27
 1.575949245738103e+02, // 28
-4.490775154845709e+02, // 29
 1.270224014348218e+01, // 30
-3.015944391573645e+01, // 31
 2.496181469291794e+00, // 32
 2.826253481677410e+02, // 33
-1.090940623589324e+03, // 34
-4.888244012162375e-01, // 35
-1.982812600077667e+00, // 36
-3.752252264705805e+02, // 37
-1.832277630203675e+02, // 38
-3.087734160760047e+01, // 39
 6.982033349529225e+01, // 40
-9.165614783663105e+01, // 41
 2.138669432972345e+01, // 42
 7.845116227408061e-01, // 43
-9.689327665950216e+01, // 44
-1.172757183385094e+02, // 45
-1.038240083940447e+01, // 46
 5.789167407143877e+01, // 47
-7.193600313906968e+01, // 48
 2.004743619138773e+01, // 49
 4.813548752161346e+01, // 50
 8.016951704564276e+00, // 51
-3.151886626575719e+01, // 52
 4.475844051048532e+02, // 53
-9.253353785272630e+01, // 54
 8.437651973662705e+01, // 55
-5.315193824704026e+01, // 56
 4.140985830249481e+02, // 57
-1.457208941003579e+02, // 58
-3.304785499729539e+02, // 59
-2.217274639114340e+01, // 60
-4.404366490891006e+01, // 61
 4.779399778462704e-01, // 62
 4.909854021287986e+00, // 63
-1.819619725690086e+01, // 64
-3.649961734963189e+01, // 65
 7.912339212185572e+01, // 66
-4.199710703919823e+01, // 67
-1.023212320111632e+02, // 68
 5.507157923978376e-02, // 69
 2.088815691032360e+01, // 70
 7.499733234829035e-02, // 71
 5.608982779333522e+00, // 72
-4.519336434847721e+02, // 73
 3.967975280148758e+01, // 74
-3.247833962769786e+02, // 75
 1.726301053743612e-01, // 76
-2.098937161941697e+01, // 77
-3.478765375219643e+00, // 78
 1.737950110095734e+02, // 79
 2.818264925964444e-01, // 80
-1.628640177792254e+02, // 81
 1.404686620040778e-01, // 82
 1.681350608631806e-01, // 83
 1.189774316079702e-01, // 84
-1.677386847642121e-03, // 85
 3.319876301409049e+02, // 86
 1.460635957015530e+01, // 87
 5.081188951535335e+02, // 88
 4.356946987208854e+00, // 89
-3.485708533031390e+01, // 90
-2.538033973182466e+01, // 91
-1.231067028371468e+01, // 92
-8.379546229976773e+01, // 93
 6.956407711842870e+01, // 94
 2.027888764478208e+02, // 95
 3.047250217252204e+01, // 96
-1.172979709064035e+02, // 97
-2.727889005752234e+01, // 98
-1.669580048032266e+02, // 99
-1.380227566557266e+01, // 100
-1.243534567442378e-01, // 101
-3.948169338276006e+00, // 102
 9.369680953754404e+00, // 103
-1.042089447452037e+02, // 104
-2.496734659615336e+01, // 105
-4.110559886993196e+00, // 106
-1.515519606985727e+02, // 107
-1.568526660773612e+02, // 108
 9.396757919354740e-01, // 109
 6.203227720733110e-02, // 110
 1.287430508192387e+01, // 111
-4.545943661987693e+00, // 112
-6.152301231278598e-02, // 113
-6.705247599974183e-01, // 114
 1.456876478060916e+01, // 115
-1.369159388603182e+01, // 116
 1.392464464315393e+02, // 117
-1.254923729024396e+01, // 118
-6.948066813445324e+00, // 119
-7.508867479022525e-01, // 120
 1.128468408320972e+01, // 121
-1.104156466737599e+00, // 122
 1.258272469094693e+01, // 123
 3.278750300027691e+01, // 124
-6.158985586497290e-01, // 125
-3.238328617833168e-01, // 126
-4.420533473546186e+02, // 127
-2.495441567839318e+01, // 128
-4.416733028253601e-01, // 129
 9.446448265407694e-01, // 130
-2.317438307661459e+02, // 131
 1.310382828948102e+01, // 132
-2.041682989959099e+01, // 133
 1.040966548216596e+01, // 134
 2.090660238865800e+01, // 135
 1.553841293909935e-01, // 136
-6.711770791319777e-01, // 137
-1.479717616609379e+02, // 138
 5.474552324781542e+02, // 139
-2.677402737059923e-01, // 140
-3.075691923538171e+00, // 141
 9.262855995858392e+01, // 142
-2.319746536542513e+02, // 143
 1.363272736123546e+02, // 144
 1.287042863339547e+00, // 145
-4.867736527588360e+00, // 146
-4.814360275438727e+00, // 147
 1.838655178550437e+02, // 148
 2.701343393719806e+01, // 149
-5.982009267749206e+00, // 150
 1.819504496209612e-01, // 151
 1.974007443021220e+01, // 152
 5.042873636739682e-01, // 153
 3.086930279751438e-01, // 154
 4.837459571000391e-01, // 155
-4.244761624457736e+02, // 156
-9.527839783906498e-01, // 157
-2.457980947025955e-01, // 158
-4.575581534011258e-01, // 159
-2.674012582166435e+00, // 160
 1.227946681602511e-02, // 161
 1.039266748391725e+01, // 162
 5.022614459154438e+01, // 163
 1.101392281088369e+02, // 164
 4.074239688586977e+00, // 165
 2.127294484449519e+02, // 166
 3.195692581602386e+00, // 167
 3.745759363561620e+00, // 168
-2.133424492267757e+01, // 169
-1.445833885988621e+01, // 170
-1.954473755460321e-01, // 171
-1.107873013912396e+02, // 172
 2.685081655778733e+01, // 173
 4.274415171115231e-01, // 174
-5.130485784703308e+01, // 175
-1.326050414520033e+00, // 176
 2.791648588554395e-01, // 177
 4.797149012171806e+01, // 178
-3.408988530795003e-02, // 179
-7.548508730955700e+00, // 180
 2.153902918911432e+02, // 181
 1.562610161081835e+00, // 182
-4.095495731931535e-01, // 183
 2.013713903635507e+02, // 184
 1.163060670996253e-02, // 185
 1.160124863023216e-02, // 186
 1.333335427495307e+02, // 187
 3.276400713871803e-02, // 188
 1.171201499938104e-01, // 189
 3.015110714491404e+01, // 190
-6.349902433738775e+02, // 191
-1.895566135135278e-01, // 192
-4.568305204235387e-01, // 193
-2.775409761592227e+01, // 194
 4.990689245316944e-02, // 195
 6.079062458446800e-02, // 196
-1.393224061285059e-01, // 197
-1.230537849236875e+02, // 198
-5.747342969229818e-02, // 199
-1.061355507775773e+01, // 200
-1.975458901359205e-01, // 201
 3.970201947917035e-01, // 202
-1.004955845541275e+00, // 203
 2.385329188432487e+00, // 204
-4.577688291854154e+00, // 205
-1.018434636603219e+02, // 206
-3.037830047058708e-02, // 207
 7.683719477746911e+01, // 208
-7.004723457577224e+01, // 209
 3.479822572390345e-03, // 210
 2.531359729005783e-01, // 211
-5.842755256292480e-03, // 212
 2.351182308913856e-01, // 213
 1.058261404642678e+00, // 214
-4.106132043209183e-02, // 215
 4.494564879098585e+00, // 216
-1.128676840069381e+01, // 217
-2.144538265984925e+00, // 218
 8.839376965594528e-02, // 219
 9.399705419947775e-02, // 220
-5.883710423723117e-01, // 221
-4.196671390468032e+01, // 222
-1.755146869021969e-02, // 223
 2.690973708055738e-01, // 224
-7.019415814440492e+00, // 225
-2.326485915537783e-02, // 226
 3.209324945467276e-05, // 227
-6.912479238708394e-02, // 228
 1.694937782296061e-01, // 229
 1.630928098108120e+00, // 230
-2.721703341259396e+01, // 231
 2.754382962281634e+00, // 232
-1.873269969133561e-04, // 233
 7.673656758935905e+01, // 234
-1.500762591236849e-01, // 235
 3.448116346260020e+01, // 236
 1.169150375775676e+00, // 237
 9.179889594302356e-01, // 238
-1.898064370646408e+01, // 239
-8.834673075817410e+00, // 240
-3.055015410357717e-01, // 241
 1.730925135849031e-02, // 242
 7.041493247350796e+00, // 243
-2.031950775749290e-04, // 244
-1.079076665469171e-02, // 245
-1.801772406649374e+00, // 246
 3.286241953669414e-02, // 247
-2.097612712843831e-01, // 248
 1.332518763067695e-02, // 249
 2.348653167946516e-02, // 250
-2.731210510532546e-01, // 251
 7.956633118616279e-01, // 252
-7.415134483170923e-01, // 253
 8.332357804129182e+01, // 254
-8.740273796896521e-03, // 255
 3.109715267033570e-01, // 256
 2.919198416493838e+00, // 257
-8.404312642545626e-02, // 258
 1.063835242771247e+02, // 259
 2.754756237817656e+02, // 260
 1.235256664732201e+00, // 261
 4.184133714420390e+00, // 262
 3.532524356315820e-01, // 263
-8.674817934104133e-02, // 264
-1.082215911195564e+00, // 265
 2.939755488080212e-03, // 266
-2.971364039803098e+00, // 267
 1.636341705709205e+00, // 268
-8.316703640607860e-02, // 269
 2.978040807584450e+00, // 270
-2.943440277954300e-01, // 271
 6.466021477051444e+01, // 272
 1.759241989960127e+00, // 273
 1.169940370830013e+00, // 274
-1.343166046878603e-01, // 275
 9.856777559263509e+00, // 276
-1.601940942860534e-02, // 277
-6.402929818967178e+00, // 278
 3.998775398234826e-01, // 279
 1.581045569047908e-03, // 280
-2.732947475100088e+01, // 281
-8.189929595684722e+00, // 282
-2.281113575334330e+00, // 283
-3.081142240693117e-01, // 284
 5.174806798031407e-02, // 285
-2.538734008990298e-01, // 286
-1.990929164833413e-01, // 287
-4.477275260602680e+00, // 288
-4.962735095443417e-03, // 289
-2.645690345817086e-02, // 290
-3.832334951683879e+00, // 291
-2.631960848192148e+01, // 292
 1.571530564454805e-01, // 293
-1.281415072923965e+02, // 294
 7.971497975906297e+00, // 295
-1.559514903150930e+00, // 296
 8.806056930345083e+01, // 297
-1.619396528827405e-01, // 298
-1.562402481163689e+00, // 299
-8.241376848978598e-01, // 300
 7.110074256724020e+00, // 301
 5.417622666220169e-05, // 302
-9.147243832054929e+00, // 303
-5.512702843924840e-02, // 304
-9.890305744654099e-01, // 305
 3.644064746250175e+01, // 306
-4.708386430679298e-04, // 307
 1.845319125360156e+00, // 308
 1.456942960090271e-04, // 309
-8.799666337642600e+00, // 310
-5.637101190140557e-02, // 311
 3.917085761813095e+00, // 312
 5.788870028286691e+01, // 313
-1.130010527450897e-01, // 314
-6.206673127760784e-02, // 315
-1.252661132773504e-02, // 316
 2.669824699465675e+01, // 317
 1.014372645411418e-03, // 318
-7.963570349179191e-02, // 319
 2.766070504432400e+00, // 320
 4.743722083564653e+00, // 321
 6.616481316175990e-02, // 322
-1.740696293096981e-02, // 323
-1.351607740881771e+02, // 324
-2.174849133346797e+00, // 325
-2.270004510011741e-01, // 326
-4.497160340007917e+01, // 327
-3.400594292716579e+01, // 328
-8.871787795841806e-03, // 329
 5.693816474333713e-02, // 330
 2.731879774916651e-02, // 331
-2.609855127428903e+00, // 332
-1.906833107770516e+00, // 333
 2.884249729642408e+00, // 334
 4.471001940329830e-04, // 335
-3.239994690682912e-02, // 336
-2.543757502660508e-03, // 337
-3.327112490160030e-01, // 338
 4.425256733578492e+00, // 339
 2.189612194506381e+00, // 340
-5.032540588985768e-03, // 341
 3.703942161259542e-01, // 342
 5.655008211280064e+00, // 343
 3.518331416551533e-01, // 344
 4.338479220679372e+00, // 345
 2.672971671604099e+01, // 346
-8.219137817805970e-02, // 347
-6.486156314962371e+01, // 348
-5.869677270886713e-02, // 349
-2.096563223068471e+00, // 350
 1.132854999821852e+00, // 351
-1.436596857917909e+00, // 352
-9.670759632199189e+00, // 353
 8.648934568511580e-05, // 354
 9.053759320874798e+01, // 355
 6.028963689350185e+00, // 356
-4.495382440743555e-04, // 357
 9.630581320451046e+00, // 358
-4.037778717112451e-02, // 359
 5.910578573857273e+00, // 360
-4.617340208004820e-01, // 361
 1.044262582572909e-01, // 362
-3.232268813368830e+01, // 363
 1.615507892098708e+01, // 364
-8.686332407452031e+00, // 365
-1.199261049211493e-01, // 366
-2.815469103339357e-01, // 367
-1.306164475539778e+00, // 368
-1.832116102385827e+00, // 369
 1.156710591456594e-02, // 370
 9.477529034357518e+02, // 371
 1.449043402011043e-01, // 372
 4.749357649505744e-04, // 373
 8.598245339644052e-01, // 374
 7.268821794946299e+00, // 375
-2.464410221307105e+00, // 376
 1.098924402957659e-01, // 377
 2.056940080618140e+01, // 378
 3.512339317924763e+01, // 379
 1.543689023186348e-01, // 380
 2.222960883759192e+00, // 381
 1.056351639973198e-03, // 382
 2.673592819450938e-03, // 383
-3.244207103448585e+02, // 384
-4.996994572852771e-02, // 385
 3.382602326928903e-02, // 386
-3.666162626965650e+02, // 387
 4.402234433237152e-01, // 388
-3.587087424075692e-01, // 389
-5.750463317757372e+01, // 390
 1.710025543284481e-01, // 391
-2.672166493011895e+00, // 392
-1.402224528495488e+00, // 393
-2.397148679427193e-03, // 394
 1.440761192090954e-01, // 395
-3.694977976171304e+00, // 396
 2.646942747341094e-01, // 397
-4.329616583638918e-02, // 398
-9.146785371660204e-01, // 399
 5.291143820188342e-01, // 400
-2.572741287727650e+01, // 401
 4.410139348371374e-04, // 402
-1.402510022992882e-01, // 403
-3.303378522115991e-02, // 404
 3.555658622256792e-01, // 405
-1.048926999941242e+00, // 406
 6.573253011961640e-02, // 407
-1.385048317927622e+01, // 408
-5.872850106996149e-03, // 409
 7.815032040192816e+00, // 410
-6.171937263040822e+01, // 411
-1.075104282221178e-02, // 412
 8.932005732106241e+01, // 413
 7.415107856622016e+01, // 414
-2.086778248248712e-01, // 415
-5.679342010585588e-02, // 416
-4.031663688201457e+00, // 417
 4.895380932724607e+00, // 418
 6.128296119349805e-01, // 419
 2.733352545172873e-01, // 420
 6.257091025339957e-01, // 421
 1.337963458287758e-01, // 422
-4.524436713275118e-03, // 423
 4.300023511596629e-01, // 424
 2.124413969098847e-02, // 425
 2.199344432023815e-01, // 426
 1.194344098953613e+00, // 427
 6.660281753348003e-02  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         1.937475858379097e-01; // A^(-1)
    m_k_OH_intra =         2.470886477967268e-01; // A^(-1)
                           
    m_k_XH_coul =          6.014958217038713e-01; // A^(-1)
    m_k_XO_coul =          9.479736651996044e-01; // A^(-1)
                           
    m_k_XLp_main =         1.219299589766097e+00; // A^(-1)
                           
    m_d_HH_intra =         1.999999878598716e+00; // A^(-1)
    m_d_OH_intra =         1.999999346810650e+00; // A^(-1)
                           
    m_d_XH_coul =          6.738395678844217e+00; // A^(-1)
    m_d_XO_coul =          6.617349018610607e+00; // A^(-1)
                           
    m_d_XLp_main =         4.516776017962630e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
     m_out_of_plane_gamma= 9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_cl_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_cutoff(double* r)
#else
void mbnrg_2b_h2o_cl_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
