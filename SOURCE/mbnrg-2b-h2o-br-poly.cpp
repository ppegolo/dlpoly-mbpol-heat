#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
 3.039081242319857e+01, // 0
-8.516539589005231e+01, // 1
-3.499466703855688e+01, // 2
 2.325091838738678e+01, // 3
-2.958153478636817e+01, // 4
-1.480842370064439e+02, // 5
 4.975954481673228e+02, // 6
-2.837080681295556e+02, // 7
 1.598231232832849e+02, // 8
 8.656815563416485e+01, // 9
-3.092230796561504e+01, // 10
 1.150675545357165e+02, // 11
 1.435833988903608e+02, // 12
-5.998662286195316e+02, // 13
-2.717738221259935e+02, // 14
-2.025355969562393e+02, // 15
-3.012829510185967e+02, // 16
 3.228315687650907e+02, // 17
 8.061040211812488e+02, // 18
 1.042607052739781e+02, // 19
 2.177193731901028e+02, // 20
 7.237728334827843e+01, // 21
 1.958577673713229e+01, // 22
 7.228192601390123e+00, // 23
-1.189508012958952e+02, // 24
 8.871010288288925e+02, // 25
 3.552565606882251e+01, // 26
-8.851606916456805e+01, // 27
 2.749316669749014e+02, // 28
-5.621921429732175e+01, // 29
-1.661402705451776e+02, // 30
-5.938678693794849e+00, // 31
 4.575381417786673e+00, // 32
 1.577076894019319e+02, // 33
-7.035477931950987e+02, // 34
-1.227926216740356e+01, // 35
-3.010846287537732e+00, // 36
-1.039212660927560e+02, // 37
 6.834441407604050e+00, // 38
-1.962138913667170e+02, // 39
 1.262064852002543e+02, // 40
 2.720134413774210e+01, // 41
 5.944473049243792e-01, // 42
-1.748015176789864e+01, // 43
-5.157471227126214e+01, // 44
-2.567777033590590e+01, // 45
-8.252958237202717e+00, // 46
 7.923842270187954e+02, // 47
-9.539422449651385e+02, // 48
 5.778776393622932e+01, // 49
-1.151237906808869e+01, // 50
-9.275330520148072e+00, // 51
 5.259858149418939e+01, // 52
 1.616586740219087e+02, // 53
-9.264742239751403e+01, // 54
-2.345600256637504e+02, // 55
-1.603602169386819e+00, // 56
 5.404182537766737e+01, // 57
-1.724751733997077e+02, // 58
-3.083211236923606e+02, // 59
-5.412036045724426e+01, // 60
-2.559032515960390e+01, // 61
-1.268113725262919e+01, // 62
-3.188189987775570e+00, // 63
 5.970578769928728e+00, // 64
-2.661716626341440e+02, // 65
 2.094489852280945e+01, // 66
-9.899157456169609e+00, // 67
-1.343711395654545e+02, // 68
 2.040494155756603e+00, // 69
 1.755766266862576e+00, // 70
 4.775546636877409e-01, // 71
 5.660001700101510e+00, // 72
-2.363107790073373e+02, // 73
 1.082966620218306e+02, // 74
-4.694238421603484e+01, // 75
-1.562333119151037e+01, // 76
-1.542875453565464e+01, // 77
-2.411663853931401e+02, // 78
 3.355036284448872e+02, // 79
-1.881860851841469e+00, // 80
-2.357734276165297e+01, // 81
 2.787051979894208e+01, // 82
 9.382191412000736e-02, // 83
-1.100925046283215e+00, // 84
-9.639022091234007e-01, // 85
 8.863134789749289e+01, // 86
 9.613382460752014e+01, // 87
 1.841776343525789e+02, // 88
 1.007596152683925e+01, // 89
 6.259471376164845e+00, // 90
-1.567627773732586e+01, // 91
 1.446924284067134e+00, // 92
-3.364669761152263e+02, // 93
 8.895521414620977e+01, // 94
 6.873320644496981e+01, // 95
 4.117137614719087e+01, // 96
-8.927082508051029e+01, // 97
-3.476522282884690e+01, // 98
-3.866059961028819e+02, // 99
 5.172339588551189e+01, // 100
 1.922095906759807e-02, // 101
-8.942121120416420e+00, // 102
 4.491675801367634e+00, // 103
-4.733675510878497e+02, // 104
-8.245986864958337e+01, // 105
 4.240732261860131e+01, // 106
 1.162961771145353e+01, // 107
-7.435477584132511e+01, // 108
 1.414851802122269e+02, // 109
 2.805347322071280e-01, // 110
-3.388820405341264e+00, // 111
-3.484723092024735e+00, // 112
-1.500573607027619e+00, // 113
-6.385867754682415e+00, // 114
-3.642875715527958e+01, // 115
-3.328405488458952e+00, // 116
 2.841913888021043e+01, // 117
 4.757334636353358e+00, // 118
-1.100361627296530e+00, // 119
-2.739824658750293e-01, // 120
 1.184982493076381e+01, // 121
 3.669093733600741e-05, // 122
 1.484087721680701e+01, // 123
-1.194856043593311e+02, // 124
 1.816595242336054e-01, // 125
-3.104960236716917e-01, // 126
-1.023080778336741e+02, // 127
 8.221966082572340e+00, // 128
-2.780122704036119e+02, // 129
 6.871008052383443e+01, // 130
 8.773123853247074e+01, // 131
-4.358601474650608e+00, // 132
-4.957523687512157e+02, // 133
 2.599920654720673e+00, // 134
-7.933878871911441e+00, // 135
-4.830994247974789e-01, // 136
 1.182758528749502e+02, // 137
-2.234417377456262e+02, // 138
 7.408841555913506e+01, // 139
 3.003667280024613e-01, // 140
-7.024263498458169e+00, // 141
-1.576837573642567e+01, // 142
-1.670640645518985e+02, // 143
 7.293048255933266e+01, // 144
-1.336772672173848e-01, // 145
-6.141497679340415e+00, // 146
-4.940633708528871e+00, // 147
 2.723572919947050e+02, // 148
-2.911719623065085e+00, // 149
-2.028893394801172e+01, // 150
 1.504194405828573e-01, // 151
 6.952716700469204e-01, // 152
-7.145179190485521e-02, // 153
 6.391755535250426e-04, // 154
 3.886919759260611e-01, // 155
 1.419620922127893e+02, // 156
 2.345310749438886e+02, // 157
-3.388301400968718e-03, // 158
 1.239622393583561e+02, // 159
-1.343295948911406e-01, // 160
-1.375767343624663e-01, // 161
 9.913224711906828e+01, // 162
 2.180610347810041e+02, // 163
-5.511005058270928e+01, // 164
-1.364588889847899e+01, // 165
-1.429465490623222e+01, // 166
 2.307208913412555e-01, // 167
-1.899813550179260e+01, // 168
-3.794907858839160e+02, // 169
 6.050874856405307e+00, // 170
-3.086407599004595e+01, // 171
 4.689884761007615e+02, // 172
 1.164841084237310e+00, // 173
-6.374594089502490e-01, // 174
 6.250598215559314e+00, // 175
-4.211372263881128e-01, // 176
-1.658447256703050e+00, // 177
-4.445073464255923e+01, // 178
 2.793784310340956e+00, // 179
-6.100132934915159e-01, // 180
 8.944770077352067e+01, // 181
 9.834810951730839e-01, // 182
 2.486934067354666e+00, // 183
 3.639607742241589e+02, // 184
 9.631898209564587e-01, // 185
 2.822619320586330e-02, // 186
 7.917801403127446e+01, // 187
 6.753062002453636e-02, // 188
 6.640361879046010e-04, // 189
 1.171252189476815e+01, // 190
 8.686445361462063e+00, // 191
 3.879630024770030e-02, // 192
 7.572917858166670e-02, // 193
-2.354340509797388e+02, // 194
-6.363426496620401e+01, // 195
 1.723140459573776e-03, // 196
 5.310683931942800e+01, // 197
 6.630173933717916e+01, // 198
-8.826187273135234e-02, // 199
 2.672912206836854e+01, // 200
-1.093132412657469e-01, // 201
 1.536965002291733e-01, // 202
 2.740092589452305e-01, // 203
 6.342776331190803e+00, // 204
 2.151863685933934e+01, // 205
-2.168450540355376e+02, // 206
-1.154154294645414e-01, // 207
 1.689092586965011e+02, // 208
-4.305610563477821e+01, // 209
 4.700589215094940e-04, // 210
-9.511809617099634e-04, // 211
-3.742601966742851e-01, // 212
-3.118768879656153e-02, // 213
-5.016253228707582e-02, // 214
-9.839044792554057e-03, // 215
 8.063494078043107e+00, // 216
-1.561045243584091e+01, // 217
-4.359854470682309e+00, // 218
 6.872307967890269e-02, // 219
 4.224108765643587e-01, // 220
 6.106128135558350e-02, // 221
 5.540545139815074e-01, // 222
 1.138783173442297e+00, // 223
-1.138896571009561e-01, // 224
 1.829371820826517e+02, // 225
-6.300385155735233e-03, // 226
 1.969440720573853e-02, // 227
-6.315240578176398e-02, // 228
-4.805710214227600e-01, // 229
 2.828830089947434e+00, // 230
 7.705189521356242e+00, // 231
 1.029210852922653e+01, // 232
-2.538664684804972e-02, // 233
 7.034384847784909e+00, // 234
-2.187771524870082e-01, // 235
-4.722677651734630e-01, // 236
-9.088657870436728e-02, // 237
 1.898461040663655e+01, // 238
-3.257617012161357e+01, // 239
-4.510590300958779e+01, // 240
-5.324894525130253e-02, // 241
-5.294456317868962e-03, // 242
 4.726368492451813e+00, // 243
 7.480092774508552e-03, // 244
 4.186593376696560e-03, // 245
 9.548933916392942e-01, // 246
 2.549621232644413e-01, // 247
-2.306131638435771e+01, // 248
-1.620396429538638e-02, // 249
 1.638198178857950e-02, // 250
-6.027048011241240e-02, // 251
 2.934531665814337e+00, // 252
 6.543389587556361e-01, // 253
 1.148342597926836e+02, // 254
 7.213970518336510e-02, // 255
-5.472455199253035e+00, // 256
 2.644814124386133e+01, // 257
 5.349985994096829e-04, // 258
 9.644100359806603e+01, // 259
 4.958518322738972e+00, // 260
 1.640699884009838e+00, // 261
-8.531413823000125e-02, // 262
 6.818966854201970e-02, // 263
 7.986446714923812e-02, // 264
-1.660103527468367e+01, // 265
 9.156871145130122e-02, // 266
-2.436190370974443e+01, // 267
-5.869907362466512e-03, // 268
 5.283398918635461e-06, // 269
 6.278766048955798e+00, // 270
 1.137235289192881e-03, // 271
-3.235463989263961e+01, // 272
 4.565873248941740e-02, // 273
-4.753391673242397e-02, // 274
-1.498543747249821e-03, // 275
-2.400178350612727e+02, // 276
-1.404169128601100e-04, // 277
-1.518594514560738e+01, // 278
 1.480191210911742e+02, // 279
 5.181968496073927e+00, // 280
 1.100383567027681e+02, // 281
-5.023554974401360e+01, // 282
-1.379501644441634e+01, // 283
-5.064328458720225e-01, // 284
 2.146506317396817e-03, // 285
 4.983751553662301e+00, // 286
-8.491361929681730e-02, // 287
-2.764478572497367e-02, // 288
-1.512867485986813e+00, // 289
-2.981490433341346e-02, // 290
 7.172895879427948e-02, // 291
-2.151627035928626e+00, // 292
-3.354757258461107e-03, // 293
-5.538673092122786e+01, // 294
-1.404927451883756e+00, // 295
 4.692628092062354e+00, // 296
 6.326102067046937e+01, // 297
 6.023992493458213e-02, // 298
 1.512581937344911e-02, // 299
 2.678651311637779e+00, // 300
-1.983764455505794e+00, // 301
 2.723539218768751e-03, // 302
-2.314093327516068e+00, // 303
-7.852455849763322e-02, // 304
-4.931861333124439e+01, // 305
-4.175348804719967e+01, // 306
 4.129729850630055e-02, // 307
 3.696439978271306e+02, // 308
-1.270196189431947e-02, // 309
 4.284513617693171e+00, // 310
 2.381425199646246e-04, // 311
 1.698368861981333e-02, // 312
-8.248267205797375e-01, // 313
-8.506080515683005e-04, // 314
 2.240900189673180e-01, // 315
-2.000811377292993e+00, // 316
-7.679245036105852e-01, // 317
 1.311851573948305e+00, // 318
 9.906376108453704e-01, // 319
-3.541845641522947e-01, // 320
 8.983569944360640e-01, // 321
 3.055263639580308e-01, // 322
-3.655364682858432e-03, // 323
-1.316499929907576e+01, // 324
 2.704835706440461e+00, // 325
-9.984151110673353e-01, // 326
 3.350301119003137e+00, // 327
-2.269619237487114e+01, // 328
 5.827898131521409e-03, // 329
 3.069370297130473e-04, // 330
 3.334987873059281e+00, // 331
-1.296304269782692e+01, // 332
-4.179340700286511e-01, // 333
 9.703112877375734e+00, // 334
-2.836028416350396e-02, // 335
 2.623225305405353e-01, // 336
-2.534437635764322e-01, // 337
-1.976640707021034e+00, // 338
-6.582193514041512e+00, // 339
 2.726865642429675e-03, // 340
-1.010869393415050e+00, // 341
-9.303274699138389e-02, // 342
-2.266786800671118e+00, // 343
 1.769723763089062e-01, // 344
-1.491529519429559e+00, // 345
-1.093688516744238e-01, // 346
-7.230349810085179e-02, // 347
 8.298341793700948e+01, // 348
 2.358043317736094e-02, // 349
 2.756151887070994e-02, // 350
-9.461281669227432e-02, // 351
 1.349375114055078e+01, // 352
 1.035334913912061e-01, // 353
-5.458598066962274e-03, // 354
 2.089531328114207e+01, // 355
 2.139283686944218e+01, // 356
 4.697891825798049e-02, // 357
 1.512061599297990e+01, // 358
 5.567537145666683e-03, // 359
 1.219214086845388e+00, // 360
 3.246292069443878e-03, // 361
-1.624876923352977e+01, // 362
 4.151572804586004e-01, // 363
-2.440763553971276e-01, // 364
 4.020444363783133e-01, // 365
 1.685955038024826e-03, // 366
-7.822388920741011e+01, // 367
 1.768972344858281e+00, // 368
 7.769333156462088e-01, // 369
-8.141220769194531e-04, // 370
 9.574334213539109e+02, // 371
-2.178834335796106e-02, // 372
-4.525216524537123e-02, // 373
 8.358940767755550e+00, // 374
-3.389132403021769e+01, // 375
-2.015799389429398e+00, // 376
 5.772198410105741e+01, // 377
-7.102013407946274e-01, // 378
 1.239251980653115e+00, // 379
 2.781068364861334e-01, // 380
-8.501181870148672e-01, // 381
 3.073146789579818e-01, // 382
-1.766713048857783e-02, // 383
-4.443051766700411e+02, // 384
 5.504308462439751e+01, // 385
 4.208091602329441e-03, // 386
-4.526293936749149e+02, // 387
-3.470940190347218e+00, // 388
 8.827584176153457e-01, // 389
-2.444894292830251e+01, // 390
-4.679316155944873e+01, // 391
-1.993939036621131e+00, // 392
 3.281844200304656e-03, // 393
 4.389186927525794e-02, // 394
-3.051789354596836e-02, // 395
-4.928070286534071e-01, // 396
 1.623690288027750e-01, // 397
-7.684816399528874e-01, // 398
-1.831635651189135e+00, // 399
-1.333395478516708e-01, // 400
-1.435407597536553e+00, // 401
-3.082021044109189e-02, // 402
-5.768289522154730e-01, // 403
 1.172801103176721e-03, // 404
 4.335508435374056e-02, // 405
 1.300879222029960e-01, // 406
-2.127586781019722e+00, // 407
 1.025517343016101e-01, // 408
 1.004090219154241e-02, // 409
-4.392675203079695e-01, // 410
 4.118130280357422e+00, // 411
-1.744935830625170e-03, // 412
-9.708300886966897e+01, // 413
-2.897172930351921e+00, // 414
 9.495377835810023e-01, // 415
 2.275234689729910e-01, // 416
-1.595873820512997e+00, // 417
 2.910485147875224e+02, // 418
-7.403912548700911e-01, // 419
 9.888768764481387e-01, // 420
-2.404566462612401e+01, // 421
 3.871309182052614e-04, // 422
-4.023169241842086e-01, // 423
-8.056901695776650e-03, // 424
-1.715655037183749e-06, // 425
 2.327127775917583e-03, // 426
-1.362689257946548e+01, // 427
-1.030836259672611e+01  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         1.506400791024554e-01; // A^(-1)
    m_k_OH_intra =         2.557486258798791e-01; // A^(-1)
                           
    m_k_XH_coul =          3.932122284618181e-01; // A^(-1)
    m_k_XO_coul =          1.027953655163443e+00; // A^(-1)
                           
    m_k_XLp_main =         6.739555648921951e-01; // A^(-1)
                           
    m_d_HH_intra =         8.646914496566701e-07; // A^(-1)
    m_d_OH_intra =         1.873274822691616e+00; // A^(-1)
                           
    m_d_XH_coul =          6.679733184436204e+00; // A^(-1)
    m_d_XO_coul =          6.358308984583858e+00; // A^(-1)
                           
    m_d_XLp_main =         6.998940825229095e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_br_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_br_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_br_cutoff(double* r)
#else
void mbnrg_2b_h2o_br_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
