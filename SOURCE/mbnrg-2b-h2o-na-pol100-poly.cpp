#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
 7.062376199607463e+00, // 0
 7.876779442419362e+00, // 1
-2.540666047566872e+01, // 2
 3.948252266733609e+02, // 3
 5.314135157998759e+02, // 4
-3.930693512599895e+01, // 5
 1.540356363043104e+02, // 6
-2.491081711503587e+02, // 7
-2.322557656779389e+02, // 8
-5.255134365046548e+01, // 9
-2.600827298650614e+02, // 10
 2.722503493833930e+02, // 11
-1.795734067854713e+01, // 12
-6.019158810092059e+02, // 13
 1.581922886120943e+02, // 14
 5.171010812777662e+00, // 15
 9.920419228408308e+00, // 16
 2.910296014471396e+02, // 17
 5.111307941767492e+02, // 18
 1.313733185287126e+01, // 19
-7.040675896528435e+01, // 20
-1.054288848623221e+02, // 21
 2.897682264557853e+02, // 22
 2.776971223956378e+02, // 23
 2.256517156627207e+02, // 24
 6.876324843686112e+02, // 25
-3.078779460468725e+02, // 26
-5.009247824021773e+01, // 27
 2.831814483585729e+00, // 28
 1.308500876174027e+02, // 29
-3.962995351447443e+02, // 30
-5.096118056533329e+01, // 31
-1.323236423048705e+02, // 32
-6.189670921475869e+01, // 33
 1.624870935179561e+02, // 34
-4.638349615208307e+01, // 35
 1.832431373946983e+02, // 36
-6.148820458961964e+02, // 37
 6.233597615718048e+01, // 38
 8.834377908871703e+01, // 39
 1.441515691000653e+02, // 40
-6.233471986274212e+02, // 41
-4.725000679361220e+01, // 42
 4.396883020521047e+02, // 43
-1.654639377552077e+02, // 44
-1.429209480440670e+02, // 45
-3.018495059097571e+01, // 46
 8.840856229330237e+02, // 47
 1.317064289384403e+02, // 48
-2.034163295960322e+02, // 49
-1.611054162471814e+02, // 50
-3.594102257343074e+02, // 51
 9.660024757352368e-01, // 52
-2.078037260666510e+02, // 53
-1.791550317176616e+02, // 54
 9.703754793357438e-01, // 55
 5.337284921778549e+01, // 56
-8.145735118623330e+00, // 57
 1.731575956829367e+02, // 58
 1.045585366645986e+02, // 59
 6.730246452999205e+01, // 60
 3.488740973851727e+02, // 61
 4.340189997895418e+01, // 62
 1.634041358282493e+02, // 63
 7.684443166364998e+01, // 64
-4.236631795748391e+02, // 65
 2.142228018870500e+02, // 66
-3.207555266610152e+02, // 67
 6.787822121931450e+01, // 68
 2.949730466140675e+02, // 69
 5.939265328812892e+01, // 70
-4.893046248672103e+02, // 71
-3.116736938799630e+02, // 72
 2.727121826001024e+01, // 73
 8.511860326208676e+02, // 74
 4.443163916490896e+01, // 75
 1.727015209085808e+02, // 76
 1.103687034012897e+02, // 77
-8.087566965556729e+02, // 78
 7.205688384645677e+01, // 79
 2.830945674267440e+02, // 80
 1.005843403057973e+02, // 81
-3.543569119073973e+01, // 82
-2.250903249879085e+02, // 83
 3.935338421139630e+01, // 84
 1.186280478041889e+02, // 85
 1.302779747955888e+02, // 86
 2.036162138019338e+02, // 87
-7.586382980329179e+01, // 88
-8.554534775870432e+01, // 89
-2.034910916112283e+02, // 90
-9.304950243177569e+01, // 91
-1.136162095857590e+00, // 92
-9.042923009544013e+01, // 93
 1.622036212145654e+02, // 94
-5.226032564839525e+02, // 95
 2.061313176091941e+02, // 96
-4.147826353152529e+01, // 97
-1.362262861182418e+02, // 98
-4.623177425660130e+02, // 99
 6.718053203538689e+01, // 100
 3.615122182731776e+02, // 101
-2.418550742624495e+02, // 102
 5.311564751137674e+01, // 103
-2.984833181113837e+02, // 104
-3.277885193121206e+02, // 105
 2.218956634938060e+02, // 106
 1.231125236050859e+02, // 107
-5.093118267582090e+01, // 108
 4.752665582151657e+02, // 109
 8.092650266393822e+01, // 110
 6.853157518493030e+00, // 111
 1.593599340696099e+02, // 112
-5.730435360948219e+02, // 113
-7.655016762897723e+01, // 114
 6.224806589606323e+01, // 115
 6.512740467174307e+01, // 116
-1.095455833347012e+02, // 117
-2.067944105494161e+02, // 118
 3.370288069638955e+01, // 119
-4.897397384212086e+01, // 120
 4.401103675143799e+02, // 121
 1.732739962168147e+00, // 122
-2.125345550013928e+02, // 123
-3.386369147191708e+01, // 124
-3.903974288955971e-01, // 125
 1.826239855760294e+01, // 126
-6.177875695837314e+01, // 127
-6.060278068368903e+01, // 128
-3.472356878354158e+02, // 129
-2.271350521481605e+01, // 130
 3.079816896967733e+01, // 131
 3.219512529569654e+00, // 132
-5.747721383962464e+02, // 133
-1.918523793805438e+02, // 134
 1.019573343077006e+02, // 135
 4.056594792510613e+02, // 136
 1.977773876136694e+02, // 137
 2.044020440245756e+02, // 138
-6.961589152015172e+01, // 139
 3.873171436726140e+02, // 140
-2.067015635811307e+00, // 141
-4.332927717399762e+01, // 142
 9.447597760517380e+01, // 143
 3.904426159877464e+02, // 144
 3.931952194567637e+00, // 145
 3.967731674650226e+01, // 146
-3.725430310606688e+02, // 147
-2.331591497894728e+02, // 148
-1.712152594388276e+00, // 149
 5.117719617516417e+02, // 150
-4.567950947419670e+00, // 151
 3.626534004301559e+01, // 152
-3.313579785320597e+01, // 153
 3.401339501965174e-02, // 154
-4.107344046005846e+01, // 155
-2.524161614790823e+02, // 156
-4.324032131963203e+01, // 157
 1.260797239264707e+01, // 158
-6.208542078337930e+02, // 159
-4.059863036989840e-01, // 160
 2.058800178817257e+02, // 161
 4.047278507081504e+02, // 162
 3.098934869541325e+02, // 163
 4.381624626408783e+02, // 164
 4.197870636249102e+02, // 165
 3.085893824113941e+02, // 166
-1.088325363170316e+01, // 167
 4.906563372607137e+02, // 168
-3.574724548539091e+02, // 169
-2.867023415175276e+02, // 170
-9.835660272375260e+01, // 171
-4.854932914825754e+02, // 172
 2.729236064670484e+02, // 173
 1.606338449010595e+01, // 174
-1.110520982350208e+02, // 175
-6.149131493432449e+01, // 176
 3.891784324975202e+02, // 177
 1.418738722777069e+02, // 178
 2.992497280649022e+02, // 179
-2.263605888705655e+01, // 180
-1.394116372303144e+01, // 181
-2.084224930962465e+01, // 182
-7.096560089862326e+02, // 183
-3.102946613601628e+02, // 184
-1.822430912306104e+03, // 185
 9.420486552874225e+01, // 186
 5.555565514241425e+01, // 187
-1.997649049293264e+01, // 188
-6.343699575617353e-01, // 189
 1.952959783573123e+02, // 190
-1.801576704268845e+01, // 191
 6.232414776910107e+00, // 192
 1.870998017995587e+01, // 193
 3.298072277530073e+02, // 194
 4.349216759397419e+01, // 195
 2.979686105286543e+00, // 196
-4.132826203334123e+01, // 197
-3.373022856953918e+01, // 198
-1.401338696073115e+01, // 199
 1.325585695341575e+02, // 200
-2.809492993337890e+01, // 201
-4.183841530496039e+02, // 202
 1.546728251256928e+01, // 203
 6.555076003314103e+02, // 204
-8.068809193220002e+01, // 205
 1.450614841874730e+01, // 206
-2.547601498756266e+01, // 207
 4.262653968985462e+01, // 208
-8.562166521530123e+01, // 209
 7.602297435937756e-01, // 210
 1.069415421949599e-01, // 211
 1.096798005871464e+03, // 212
-4.994396554575995e+00, // 213
 3.198585926242338e+02, // 214
 6.724514506901979e+00, // 215
-1.433181689258851e+02, // 216
-3.900136824845134e+02, // 217
-2.283615771552013e+01, // 218
 8.286599444872216e+01, // 219
 1.143691539367182e+02, // 220
 1.681714671490167e+01, // 221
-6.864764113204349e-01, // 222
-1.302353450736559e+02, // 223
 7.167286119330889e-01, // 224
 1.282355347327233e+02, // 225
 2.340548618807360e+00, // 226
 1.108435021009391e+01, // 227
-1.366538354842280e+01, // 228
 1.184280488380784e+02, // 229
-2.022675859652401e+02, // 230
-1.683129332964361e+00, // 231
 7.221172266744190e+02, // 232
 1.152614027466944e+02, // 233
 2.148653567502370e+00, // 234
 1.151348980401428e+02, // 235
-2.472077973836805e+00, // 236
 3.556534739079473e+00, // 237
-6.112849383083725e+01, // 238
-3.142690164613310e+01, // 239
 8.567599228522938e+01, // 240
-8.873234862208842e-01, // 241
-3.633550972057299e+01, // 242
-2.813988518995095e+01, // 243
 4.147850274129160e+01, // 244
 1.237985100640568e+00, // 245
 2.752649010530324e+01, // 246
 6.456909751315833e+01, // 247
 7.269073931094994e-03, // 248
 1.716295795317793e+01, // 249
-3.316624929636056e+02, // 250
 1.227624052449378e+00, // 251
 4.768809448863719e+01, // 252
 5.999887500885434e+01, // 253
-1.401597687931859e+01, // 254
 3.972668933496125e+01, // 255
-1.010189632496595e+03, // 256
 6.094486940698756e+01, // 257
-2.117088039888291e+00, // 258
 8.220612783326230e+00, // 259
-9.875034910749084e+00, // 260
-1.077174118646509e+01, // 261
-5.751490907615121e+00, // 262
 1.408800426873368e+01, // 263
 9.586418215989902e+00, // 264
 5.657980574295982e+01, // 265
-6.538483553760673e+01, // 266
 2.669201254546566e+01, // 267
-1.288335487705156e+00, // 268
-2.410017379805113e-02, // 269
 4.470777439914538e+01, // 270
-1.534659989807959e-01, // 271
-4.329612600162442e+00, // 272
-1.142321084420232e+01, // 273
-7.976140489698802e+00, // 274
 2.760297065924923e+00, // 275
 1.180969254104616e+01, // 276
-6.045064137196157e-02, // 277
 6.755744956606629e+02, // 278
 1.338181909988415e+01, // 279
-2.564063718676278e+01, // 280
-3.498319333328643e+00, // 281
 6.189660129214530e+01, // 282
-5.485736395679049e+00, // 283
-5.842587375102747e+01, // 284
-1.044321095976449e+00, // 285
 1.010885616329953e+03, // 286
 1.559046155070071e+02, // 287
-1.840613791971630e+00, // 288
 1.945679188289369e+02, // 289
-1.046668023857608e+02, // 290
 6.303831520507583e+00, // 291
 2.739358852085693e+01, // 292
 4.268035430863045e+00, // 293
-3.556496170543524e+01, // 294
-7.346792827220993e+01, // 295
 2.158975416272029e+02, // 296
 1.615154814367557e+01, // 297
-1.060623922220730e+00, // 298
-1.318705760453932e-01, // 299
-9.210618869858288e+01, // 300
-2.355047685258133e+02, // 301
-4.541419283715026e+02, // 302
-1.282141760800498e+02, // 303
-4.106852290670417e+01, // 304
-2.621025448398805e+02, // 305
-2.021589159825134e+01, // 306
-1.553099075729627e+01, // 307
 4.912770656372167e+02, // 308
 1.133331843031312e+02, // 309
 2.819292240179609e+01, // 310
 2.550718840398739e+00, // 311
-6.101785879926203e-01, // 312
 4.626886390896758e+00, // 313
-2.173649406209067e-01, // 314
 9.037961254867612e+00, // 315
 8.144633638809589e+02, // 316
 2.605534878231846e+00, // 317
-6.864729477529269e+01, // 318
-4.148412215176747e+02, // 319
 1.404450831069009e+01, // 320
-1.780613949898071e+01, // 321
-1.404653570785094e+02, // 322
-3.360464661998081e+00, // 323
-4.286931235013704e+00, // 324
 4.455304416664827e+01, // 325
 6.953042486667704e+01, // 326
 6.206983156445312e+00, // 327
-9.656581446311957e+01, // 328
 2.025557484658070e+01, // 329
 1.075421522788772e-01, // 330
-9.145834291783078e+02, // 331
-4.882880720616304e+01, // 332
-1.689357755030285e+01, // 333
-1.867453000123594e+01, // 334
-2.899659128964988e+00, // 335
-9.467793890960941e+01, // 336
 6.736004045515109e-03, // 337
-4.517216172391762e+01, // 338
 5.341618832974422e+02, // 339
 3.508759023645881e+00, // 340
 9.273889483678371e+01, // 341
-2.903778573394008e+01, // 342
 4.107171514102031e+01, // 343
 7.697096539305198e+01, // 344
-1.513062647407133e+01, // 345
-1.455275618249999e+00, // 346
-2.815077830879056e+02, // 347
 8.525203682983081e+01, // 348
-9.287328025408063e+01, // 349
 5.119275863663841e+00, // 350
-4.184347102157144e+01, // 351
-5.753348221037951e+00, // 352
 1.197436122591416e-01, // 353
-7.038222343247197e+00, // 354
-1.605973186148326e+01, // 355
-6.889118187885397e+02, // 356
 2.832623226539398e+01, // 357
 3.018727544838449e+02, // 358
-2.493225092281019e+00, // 359
 5.935270674831982e+01, // 360
 3.873918170410745e-01, // 361
 2.411106032586108e+02, // 362
-8.293482227887548e+00, // 363
 5.393639127386719e-01, // 364
 3.206103879358083e+00, // 365
-1.138201742525430e+01, // 366
 2.805942121384393e+02, // 367
-4.115282407703996e+00, // 368
 3.764657020470931e-01, // 369
 1.513931634024170e+01, // 370
 1.350972483111087e+01, // 371
-6.919404167935816e-01, // 372
-2.449421652404132e+02, // 373
-6.514309126888212e+00, // 374
-7.708497509223212e+02, // 375
-3.968334545153887e+02, // 376
-8.774714832202851e+01, // 377
-3.274518119255777e+00, // 378
-1.122372769717546e+00, // 379
 2.249703197340325e+01, // 380
 3.540032318081872e+00, // 381
 1.662160372082695e+02, // 382
 6.443889933196695e+02, // 383
-1.176712746266124e+01, // 384
-5.646890067832411e+01, // 385
-4.758396285564613e-01, // 386
 8.658684730303212e-01, // 387
-1.267209449292337e+02, // 388
-8.933830818177178e+01, // 389
 3.290157286390468e+00, // 390
-6.051497447881317e+02, // 391
-6.235707358046528e+02, // 392
-7.175674576368499e+00, // 393
-4.675638275396689e+02, // 394
 4.925750928447552e+01, // 395
-1.080979615572641e+01, // 396
-3.786961743958115e+01, // 397
-6.927334458208209e-02, // 398
 9.147916690677947e+01, // 399
-3.668050992992519e+01, // 400
-3.294300232724288e-02, // 401
 1.724066839014228e+00, // 402
-6.821457940441546e+01, // 403
-4.398162152525914e+00, // 404
 2.043690791585859e+00, // 405
-1.938504867740869e+00, // 406
 1.965696766185527e+02, // 407
-5.420066138499398e-01, // 408
-3.450120825593304e+01, // 409
 3.171248413797755e+00, // 410
-2.724311636540675e+01, // 411
 1.684092313127073e+00, // 412
 6.314301900245066e+01, // 413
 4.155149807246777e+00, // 414
 2.904273261245517e+01, // 415
 1.121867172812304e+01, // 416
 8.125392255303922e+00, // 417
 6.596466253325673e+02, // 418
-2.365594692096816e+01, // 419
-1.163414057506954e+02, // 420
-3.217680248045486e+02, // 421
 4.787515911330439e-02, // 422
-3.471037116348015e-01, // 423
 3.861609781665429e-02, // 424
 2.702705152366816e-03, // 425
-5.583050257931888e+00, // 426
 1.335673631199852e+02, // 427
 4.882646296571478e+02 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         7.823878977486063e-01; // A^(-1)
    m_k_OH_intra =         1.999999957825146e+00; // A^(-1)
                           
    m_k_XH_coul =          7.950431747693237e-02; // A^(-1)
    m_k_XO_coul =          6.680682051951390e-01; // A^(-1)
                           
    m_k_XLp_main =         8.311885364375440e-01; // A^(-1)
                           
    m_d_HH_intra =         1.999918468032695e+00; // A^(-1)
    m_d_OH_intra =         5.269425988634360e-01; // A^(-1)
                           
    m_d_XH_coul =          6.287228652758436e+00; // A^(-1)
    m_d_XO_coul =          6.242799339695940e+00; // A^(-1)
                           
    m_d_XLp_main =         3.872159916140287e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_na_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_na_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_na_cutoff(double* r)
#else
void mbnrg_2b_h2o_na_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
