#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-1.774422452872845e+02, // 0
-9.485590806465954e+01, // 1
 1.126405084950678e+01, // 2
 3.166405192133195e+02, // 3
-1.585650978688539e+02, // 4
-3.064216546085722e+02, // 5
-3.899484445954932e+02, // 6
-2.473523675748071e+02, // 7
 1.002020584994674e+02, // 8
 4.482308793451447e+01, // 9
 4.407074156549050e+02, // 10
-8.864726253269708e+01, // 11
 1.603707909831621e+02, // 12
-3.662098866443804e+02, // 13
 1.563244703209280e+02, // 14
-4.589127599318383e+01, // 15
 3.855406268323280e+02, // 16
 2.064903468790554e+02, // 17
 1.537273732346694e+02, // 18
-5.998755953499341e+01, // 19
-1.103527219379362e+01, // 20
-2.137040330241793e+02, // 21
 1.784247969782814e+02, // 22
-7.410656846021868e+00, // 23
 6.630963529054480e+01, // 24
 2.888863334730045e+02, // 25
-3.093278920298330e+02, // 26
 2.690595008290986e+01, // 27
 1.132422678419943e+02, // 28
 2.527319117775501e+01, // 29
 7.744243186306805e+01, // 30
-2.240580917094784e+02, // 31
 9.203137874399670e+01, // 32
-1.580752278534593e+01, // 33
 1.075355981167043e+02, // 34
-4.452791592380304e+01, // 35
-3.021202829845079e+01, // 36
-3.908629317567026e+02, // 37
-5.958439631949897e+01, // 38
 2.282311161613730e+02, // 39
 1.457541280406939e+02, // 40
 5.352552233259186e+01, // 41
 2.168774171275765e+00, // 42
-6.451067223923111e+01, // 43
-6.569444700526124e+01, // 44
 6.183185451343484e+01, // 45
-4.243350251261684e+02, // 46
 3.206367865543089e+02, // 47
 5.099959847517585e+01, // 48
 1.773275545187601e+02, // 49
-3.124226306622888e+01, // 50
 7.076553962299559e+01, // 51
-2.653678124837355e+01, // 52
 3.929607229783097e+02, // 53
-4.849385247072188e+02, // 54
-7.383303315098525e+02, // 55
-1.013791191453265e+01, // 56
-3.906845037650612e+01, // 57
-6.127988568141985e+01, // 58
 3.901723243669111e+02, // 59
-7.360537957423702e+01, // 60
 2.875815477000168e+02, // 61
-2.531630876785496e+01, // 62
 6.386620694079020e+01, // 63
-1.054813679138899e+02, // 64
 2.916066939376225e+02, // 65
 1.382387057565641e+02, // 66
-8.564068261028014e+01, // 67
-2.091633727025404e+02, // 68
 5.697456569986527e+00, // 69
 5.888482890366173e-01, // 70
 3.385058149200607e+00, // 71
-3.002245956504488e+00, // 72
 3.737283994334189e+02, // 73
 6.825399307717072e+01, // 74
 5.877848845004102e+00, // 75
 3.828056018499913e+01, // 76
 7.231915460280986e+01, // 77
-9.709591727499001e+01, // 78
 2.885591031740439e+01, // 79
-7.829772050060029e-01, // 80
-1.336880896164979e+01, // 81
 1.790408728780824e+01, // 82
 2.888297854508806e-01, // 83
 1.330190657671579e+01, // 84
-1.624524661453596e+00, // 85
 3.262389368818985e+00, // 86
-4.322050291153685e+01, // 87
-6.649519175940943e+02, // 88
 2.860386096850687e+01, // 89
-1.395469064134799e+01, // 90
-4.903892562509415e+00, // 91
 3.518890521856036e-01, // 92
-1.969858265505675e+02, // 93
-2.212266503997442e+01, // 94
-2.916185354174564e+01, // 95
 7.602621355150237e+01, // 96
 1.170503760578728e+02, // 97
-3.539084575601134e+02, // 98
-1.267511064471516e+02, // 99
 2.819560488107030e+01, // 100
 7.712987721544956e-01, // 101
-7.897337871077937e+01, // 102
 1.122417943441242e+02, // 103
-9.625671636291925e+01, // 104
-8.074701587749514e+01, // 105
-7.109255068116087e+00, // 106
 4.802954763558907e+01, // 107
 1.047695748994360e+02, // 108
-5.277101437019391e+01, // 109
 1.502404047764533e+01, // 110
-6.854038952705437e+01, // 111
-1.821230285679438e+00, // 112
-9.339070257264734e-01, // 113
 1.835792452597449e+01, // 114
 2.195964084085436e+01, // 115
 3.558866979605295e+01, // 116
 5.910584823346144e+01, // 117
-2.292953773633741e+01, // 118
 6.287137667897222e+00, // 119
-1.301636996536798e+02, // 120
 9.849442795740570e+01, // 121
-3.195858409653475e-02, // 122
 6.766249426944857e+01, // 123
-3.843317555362815e+01, // 124
 9.706124738568567e+00, // 125
-3.741251665493665e+01, // 126
-7.457542226357513e+01, // 127
-3.060991907772530e+01, // 128
-1.540819683169185e+01, // 129
-1.065346641758783e+00, // 130
 7.978911885983055e+01, // 131
 1.201439426849474e+02, // 132
-1.006667203889372e+02, // 133
-5.000299828654239e+01, // 134
 3.275635052626790e+00, // 135
 3.875972427559986e+01, // 136
 5.866572624140726e+01, // 137
 3.720326834651602e+01, // 138
 1.414496640918200e+00, // 139
-1.428470060147209e+00, // 140
-2.084963167243026e+02, // 141
 1.778991182208963e-02, // 142
 2.581700104615285e+02, // 143
 1.138087519055496e+02, // 144
-1.052259526364096e+00, // 145
-7.721596006579796e+01, // 146
-6.397989997016541e+01, // 147
-3.615976645240745e+02, // 148
-2.682050058904664e+00, // 149
 4.874581040605353e+02, // 150
 8.323465003564911e+01, // 151
 1.194521872297045e+02, // 152
 2.009450501586274e-01, // 153
-3.626034071393636e-03, // 154
 2.232040151763133e+01, // 155
 4.477891191822865e+00, // 156
-2.279832846864413e+01, // 157
-2.687560734230278e-02, // 158
 3.377598956689761e+01, // 159
 5.125948950514794e+00, // 160
 4.209144391560306e-02, // 161
 9.291965316855763e+01, // 162
-2.194453130120016e+02, // 163
 1.482469824875785e+02, // 164
 2.317088583613747e+01, // 165
 1.688810068174724e+02, // 166
 1.129076274484934e+00, // 167
 2.383864089746214e+01, // 168
-1.895864149076009e+02, // 169
-9.959550595272677e+00, // 170
-2.730997885541524e+00, // 171
 2.857531186032272e+01, // 172
 2.156273197996125e+01, // 173
-2.670468774570382e+02, // 174
-3.208964355064973e+01, // 175
-3.152514162818805e+01, // 176
-1.697878543011699e+01, // 177
-4.345966658584199e+01, // 178
-1.393971778150834e+02, // 179
-5.659268000976998e-01, // 180
 2.572016758531523e+02, // 181
 3.392145869853471e+02, // 182
 1.150543911945993e+01, // 183
 1.102605315275688e+02, // 184
-5.042440719326734e+00, // 185
 1.370912978035252e+00, // 186
-8.262437883697842e-03, // 187
-8.995503520777244e-02, // 188
 1.411676370747956e-01, // 189
 1.074311457046840e+02, // 190
-2.182822579068269e+01, // 191
 2.263980696063668e-02, // 192
-3.839239291239637e+00, // 193
-4.270504477186209e+01, // 194
 2.558865850976499e+00, // 195
-2.367637637757916e-01, // 196
-2.644321242455295e+00, // 197
-1.027988342197546e+02, // 198
-5.627636748182927e+00, // 199
 2.399792731481925e+01, // 200
-6.864882910465728e-02, // 201
-3.823281812191853e+00, // 202
 1.243038544954270e+02, // 203
 2.599080704338137e+01, // 204
 2.577865246978895e+01, // 205
 8.245252691043939e+00, // 206
-2.085890253795659e+00, // 207
 2.484883558715968e+02, // 208
-2.269773573893539e+01, // 209
-1.061497722195536e-04, // 210
 3.022692262064352e-03, // 211
-2.575591819677445e+00, // 212
 1.228691562422387e-02, // 213
 1.337388721887147e+01, // 214
 6.591945094751135e+00, // 215
-1.811108207197070e+01, // 216
 8.979765787219046e+00, // 217
 1.917616916328462e+01, // 218
-4.014833586156136e-01, // 219
 1.845555928219908e+00, // 220
-1.070652881489826e-01, // 221
-9.624919177628412e-02, // 222
-1.917668049239137e+00, // 223
-1.508354735620892e-01, // 224
 3.411988253754259e+01, // 225
-1.318779848543855e-01, // 226
-7.184102512110838e-04, // 227
 3.312835937417548e+00, // 228
-1.947918254002094e+00, // 229
 1.258068733809726e+01, // 230
 5.643963286556012e-01, // 231
 1.552117720324843e+01, // 232
 1.683276075159525e+00, // 233
-7.807534661490424e-01, // 234
 5.490682108113776e+00, // 235
 1.596577418251885e-01, // 236
-3.010359353430185e+01, // 237
-1.545595135410206e+00, // 238
-1.947259642630454e+02, // 239
-5.173231661667017e+01, // 240
-1.854287644730341e+00, // 241
 2.033927264108411e-01, // 242
 1.691594211424015e+00, // 243
-1.128624295928664e-02, // 244
-4.080059774821901e-03, // 245
-3.551945181188010e+01, // 246
 3.535951799733046e-01, // 247
-1.869446166946833e+00, // 248
-4.964499556815587e-03, // 249
-5.563689508489470e+00, // 250
-3.107816849735757e+01, // 251
 5.776836622842232e+00, // 252
-3.684935735099889e+00, // 253
-6.857326734702549e+00, // 254
-3.585599154666882e+00, // 255
-5.714038817756036e+00, // 256
 5.220169460500419e+01, // 257
 8.919445799259712e-03, // 258
-1.225257497518374e+02, // 259
 1.115649819086455e+01, // 260
 8.844515126388620e-01, // 261
 9.346144714521502e-02, // 262
 2.035886748932437e+01, // 263
-9.791968426879382e+00, // 264
-3.768808826353091e-01, // 265
 2.780645292253162e-01, // 266
-1.167510318457855e+01, // 267
 1.720366874754463e-03, // 268
-5.988890752728322e-06, // 269
 1.440953387317757e+00, // 270
-4.980226992437792e-02, // 271
-2.932427076236990e+01, // 272
 4.181415019637461e+01, // 273
 1.051033083933047e+00, // 274
-5.046177156095603e-03, // 275
-2.166281215041300e+01, // 276
 4.037327691693280e-06, // 277
-3.357724888257447e+00, // 278
 8.624425955830405e+00, // 279
-1.425590364840666e+00, // 280
 1.962484011511978e+01, // 281
-2.603670071066644e+01, // 282
 6.813753230053854e+00, // 283
-1.160558596833069e+00, // 284
 2.520009917167933e-01, // 285
 5.441747495060703e+01, // 286
 1.908987450799417e-01, // 287
 6.056213916178694e-01, // 288
-5.538374847008309e-01, // 289
-2.567941576340020e+00, // 290
 8.090054463627848e-02, // 291
 7.367486462899096e+00, // 292
-1.676282809075553e+00, // 293
-7.008794034521338e+01, // 294
-4.598590532495358e+00, // 295
-9.075905883338821e-01, // 296
-8.388537557674072e+00, // 297
-3.204709771696936e-03, // 298
-9.210657043678457e-03, // 299
-4.177907568981660e+00, // 300
-1.323433412564466e+01, // 301
 6.752273389655533e-02, // 302
-2.402808110811129e+00, // 303
-6.481154757381362e-02, // 304
 2.070559143774495e+01, // 305
-6.946396615787725e+01, // 306
 3.145147772421870e-03, // 307
 8.232382197766509e+01, // 308
 1.459321747273118e-02, // 309
 1.930826968190971e+00, // 310
-1.239814832961935e+00, // 311
-1.491814089562479e+00, // 312
 1.317591458897650e+01, // 313
 5.217480828438849e-02, // 314
 1.854480346836657e+01, // 315
 1.627683930372885e+00, // 316
 4.040832396173204e+01, // 317
 1.097225433711538e-01, // 318
 6.767514252035562e+00, // 319
-2.861162311722547e-01, // 320
-3.302689022127472e+01, // 321
-7.314116047250680e+00, // 322
-2.033816024948901e+00, // 323
-5.093216278533924e+00, // 324
 7.765545316076357e+01, // 325
-1.160518933536111e+01, // 326
-6.976088115323095e-01, // 327
-2.281739809102702e+01, // 328
 1.485177224082951e+00, // 329
 4.288200516196953e-04, // 330
-1.633661516823093e+02, // 331
-1.216351841414030e+01, // 332
-1.599373772815671e+02, // 333
 3.061829654821453e+00, // 334
 3.752012886760832e-04, // 335
-4.212228371850150e+00, // 336
 3.744761674051891e-01, // 337
 1.368025297223519e+00, // 338
 1.120272817129112e+01, // 339
-1.209277534377185e-02, // 340
-6.838809578585011e-01, // 341
 3.829402712323949e+00, // 342
-9.784992050201398e+00, // 343
-6.009797109212621e-01, // 344
-5.002992857018435e+01, // 345
-2.668362608340324e-01, // 346
-1.129548236726887e+01, // 347
 6.493730393537919e+02, // 348
-7.021295843152126e+00, // 349
-8.300067427530328e-02, // 350
-4.372169674256356e+00, // 351
-4.733332509855534e+00, // 352
 3.462938125494285e-02, // 353
 1.044608791671275e-02, // 354
-1.908014246112123e+01, // 355
 2.983276079628517e+01, // 356
-1.237033018325060e-02, // 357
-5.134224034856541e+01, // 358
-2.677798475941288e+00, // 359
 3.523726090773306e-01, // 360
 9.911759163674281e-04, // 361
-3.209699635720448e+00, // 362
-4.382694646649396e+01, // 363
-4.157709850747592e-03, // 364
 4.370912178840269e+01, // 365
 6.854505307217364e-03, // 366
-5.100339885818433e+00, // 367
 4.959754575647445e-01, // 368
-7.029062416129674e-01, // 369
-2.298907438136588e-03, // 370
 3.572014737454274e+00, // 371
-2.869789329458231e-03, // 372
-2.224950405366088e+00, // 373
 3.955894332446369e+01, // 374
-3.942526605096065e+01, // 375
-7.748806821932659e-01, // 376
-5.332267447183159e-01, // 377
 6.574977470912930e+00, // 378
-7.832732532123062e-01, // 379
 1.258069413945915e-01, // 380
 5.630845983384516e+00, // 381
 9.002771348151846e-01, // 382
-8.278488996551292e-01, // 383
-3.467295582112409e+02, // 384
-5.012600808862347e-01, // 385
 1.378399043228563e-04, // 386
-5.841913868380560e+00, // 387
 1.320150186884552e+01, // 388
 1.187993222243953e+01, // 389
 2.955500393302218e+00, // 390
-1.822290584833969e+01, // 391
-3.055749904917253e+00, // 392
 1.437901532987958e+00, // 393
 3.350986670212390e-02, // 394
 3.438662217982970e-01, // 395
 1.546043457044461e+00, // 396
-7.649810296717529e-01, // 397
-8.821624594138463e+00, // 398
-1.051207864239306e+00, // 399
 4.133801048652851e+00, // 400
-1.709284581076155e-01, // 401
-4.993323637980647e-02, // 402
-6.756768518372214e+00, // 403
-2.231680503865928e+00, // 404
-3.076675402818175e+00, // 405
 4.677243067967592e-02, // 406
-5.324363030848075e-01, // 407
-5.193667869364905e-02, // 408
 2.795703488192981e-01, // 409
 3.880777410937197e+00, // 410
-1.848207498550588e+01, // 411
-1.516433575268965e+00, // 412
 5.466666398525950e+01, // 413
 1.939902576081149e+00, // 414
 1.187332509063862e+01, // 415
 1.644884660216587e+00, // 416
-4.892944838767648e-01, // 417
 1.996021875552261e+02, // 418
 1.803761422161650e-02, // 419
 1.402999922756583e+01, // 420
 2.903892069166482e-01, // 421
-1.319030282540027e-04, // 422
 4.306788664434078e+00, // 423
 4.415779460227259e-05, // 424
 6.338210366889176e-07, // 425
 2.322537032073241e+00, // 426
-4.289546117528194e+01, // 427
-6.980198925747598e+00 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.418356162428376e-01; // A^(-1)
    m_k_OH_intra =         3.760948616075574e-01; // A^(-1)
                           
    m_k_XH_coul =          4.355574735817115e-01; // A^(-1)
    m_k_XO_coul =          9.970388969117101e-01; // A^(-1)
                           
    m_k_XLp_main =         6.771893256000681e-01; // A^(-1)
                           
    m_d_HH_intra =         1.998465969152339e+00; // A^(-1)
    m_d_OH_intra =         1.999745711872710e+00; // A^(-1)
                           
    m_d_XH_coul =          6.331169164351936e+00; // A^(-1)
    m_d_XO_coul =          6.050756912670806e+00; // A^(-1)
                           
    m_d_XLp_main =         4.309622503190793e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cs_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_cs_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cs_cutoff(double* r)
#else
void mbnrg_2b_h2o_cs_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
