#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-1.193279302565962e+02, // 0
 1.167310704546285e+02, // 1
-2.096605884768717e+02, // 2
 4.457125706438524e+02, // 3
 1.234842893773271e+00, // 4
-4.386364354699472e+02, // 5
-4.884177273560681e+02, // 6
-9.301303399287126e+01, // 7
-1.522036000847310e+01, // 8
 3.862444765891662e+02, // 9
 3.890011373524932e+02, // 10
-1.084291447380785e+02, // 11
 1.971200027309839e+02, // 12
-4.522082367070057e+02, // 13
 1.966530645657500e+02, // 14
-2.536169200802673e+02, // 15
 5.928269763001688e+02, // 16
-4.337654909583932e+01, // 17
 1.324171694516216e+02, // 18
-1.022019738011532e+02, // 19
 5.605218748493630e+01, // 20
-2.777600912398423e+02, // 21
 8.505839976478622e+00, // 22
-7.008035405406658e+01, // 23
 5.514996601667735e+01, // 24
 3.920391311915834e+02, // 25
-2.834982163570381e+02, // 26
 2.448335159078539e+01, // 27
 2.829524091764335e+02, // 28
 3.150251979716970e+02, // 29
 2.929936087218311e+01, // 30
-2.861862296387297e+02, // 31
 5.738519616933383e+01, // 32
-1.831371446675512e+02, // 33
-1.563689696933768e+02, // 34
-2.122270419052391e+02, // 35
-4.558624899092273e+01, // 36
-4.809310808305337e+02, // 37
-1.411878248070449e+02, // 38
 3.622421016845374e+02, // 39
 2.267360752146549e+02, // 40
-1.209683491766831e+01, // 41
 5.087627921318358e+01, // 42
-1.040638723443064e+01, // 43
-1.481068864715381e+02, // 44
-3.283123573246287e+01, // 45
-4.305113069980483e+02, // 46
 1.432437333448912e+02, // 47
 2.081562922712589e+02, // 48
 1.184735828182085e+02, // 49
 2.230715759801234e+01, // 50
 1.887333799230666e+02, // 51
-8.642116449568712e+01, // 52
 9.573483645628855e+01, // 53
-4.224379826889000e+02, // 54
-4.274070235802046e+02, // 55
-1.271070643040659e+02, // 56
-2.328337853882632e+02, // 57
-3.746630325851333e+01, // 58
 3.859635855629610e+02, // 59
-9.861887280114763e+01, // 60
 1.491701503123768e+02, // 61
-6.568920793928067e+00, // 62
 7.997506093684709e+00, // 63
 9.010152838768282e+01, // 64
 8.120325030057980e+01, // 65
 4.155638194934576e+02, // 66
-5.087394115714079e+01, // 67
-1.782657008587877e+02, // 68
 5.380155591623183e+00, // 69
 4.836508192885724e+01, // 70
 8.449191513495945e+00, // 71
 2.702400723083479e+01, // 72
 4.167098421084058e+02, // 73
 4.313067722590760e+01, // 74
 3.534613661222607e+01, // 75
-2.022550108007109e+01, // 76
 4.507796312942683e+01, // 77
-4.571006918966268e+01, // 78
 7.605681856488756e+00, // 79
-9.741010325534321e+00, // 80
-6.016118203730394e+01, // 81
 6.085511614044775e+00, // 82
 1.247324632677404e+00, // 83
 3.578850201742804e+00, // 84
-8.879772089264689e-01, // 85
 4.464242127952737e+01, // 86
-7.749266630055325e+01, // 87
-4.294572115321956e+02, // 88
 3.299260438132467e+01, // 89
-1.733085617282651e+01, // 90
-2.142920309344076e+02, // 91
 1.085798476249536e+01, // 92
-7.598050746291867e+01, // 93
 7.351510628262747e+01, // 94
 5.027906044783750e+00, // 95
 4.038708521344773e+01, // 96
 2.336168523838719e+02, // 97
-3.044083441178218e+02, // 98
-1.576897422116671e+02, // 99
 6.910670990538695e+01, // 100
-1.231085658216194e+00, // 101
-6.997224774330077e+01, // 102
 1.608300824667953e+02, // 103
-1.179113282393780e+02, // 104
-4.118979291878264e+01, // 105
-2.320685814843804e+01, // 106
 1.271737118102437e+02, // 107
-5.774360558654167e+00, // 108
-4.905085303841823e+01, // 109
 4.555506008252371e-01, // 110
-2.786463366817783e+01, // 111
-1.926214474349527e+01, // 112
-2.909908805301671e+00, // 113
 6.003409832719236e+00, // 114
 9.925570003562441e+01, // 115
 8.671459610134603e+01, // 116
 4.305630779979315e+01, // 117
-2.019776928570243e+00, // 118
 6.326148984180006e+01, // 119
-1.092136176107639e+02, // 120
 2.728854539929045e+01, // 121
 3.755321806338051e+01, // 122
 5.542899796339074e+01, // 123
-8.464106412966964e+01, // 124
 8.905879682730951e+01, // 125
-2.788293881781659e+01, // 126
-7.731212861234452e+01, // 127
-7.015756770603049e+00, // 128
-3.074340443460239e+00, // 129
-2.278085515179390e+01, // 130
-1.268643359726144e+02, // 131
-3.662866221206690e+01, // 132
-3.124458933485589e+01, // 133
-1.355091517272201e+02, // 134
 9.336100998870899e+00, // 135
-9.172006955082248e+00, // 136
 1.695198339176631e+01, // 137
 3.448308242481284e+01, // 138
-4.334680528421609e+01, // 139
 6.361152895366291e-01, // 140
-4.785836634805639e+01, // 141
 2.735749472411197e+01, // 142
 1.304257404472393e+02, // 143
 1.453521527382147e+02, // 144
-8.341996146077140e+01, // 145
 2.308561756442833e+01, // 146
-2.969857957812837e+01, // 147
-2.548197849654167e+02, // 148
-3.007454213035527e+01, // 149
 3.639443045791668e+02, // 150
 1.515785008294961e+01, // 151
 7.997442647045754e+01, // 152
 1.440292147237535e+01, // 153
-8.096036023343350e+00, // 154
 6.926782525438486e+01, // 155
 1.116581493296848e+02, // 156
 2.696413761082215e+01, // 157
-3.384223773616098e+00, // 158
 1.671523212045523e+00, // 159
 1.566554922572633e+02, // 160
 6.183046327506488e-01, // 161
 3.893243555925895e+01, // 162
-7.906679997106234e+01, // 163
 2.546615870951811e+02, // 164
 1.926425394126597e+01, // 165
 1.670687971550302e+02, // 166
-1.140782397285270e+02, // 167
 5.203858768940784e+01, // 168
-1.080125039310578e+02, // 169
 2.733776690823427e+01, // 170
-1.338303301644837e+00, // 171
-1.040011828747728e+02, // 172
 2.424925407713872e+01, // 173
-2.603721128329396e+02, // 174
-5.077296895674378e+01, // 175
-8.955021053554475e+01, // 176
-3.345955647892768e+01, // 177
-1.569953645849979e+01, // 178
-7.080397033299322e+01, // 179
-1.730418877148421e+01, // 180
 2.102222816014840e+02, // 181
 1.634315237138545e+02, // 182
 3.281971484797138e+01, // 183
 7.764729308195709e+01, // 184
-2.151595809348599e+00, // 185
 5.210303796744741e-01, // 186
 1.080975411503076e+01, // 187
 5.544514636776438e-01, // 188
-9.159020925541445e-01, // 189
 1.023688096535616e+02, // 190
-7.904976442175423e+01, // 191
-6.555176879886026e+00, // 192
-1.827430527898221e+01, // 193
-1.854244001729916e+01, // 194
-1.678328993249621e-01, // 195
 6.426656589422933e-01, // 196
 1.714034227668887e+00, // 197
-7.352039789452229e+01, // 198
-1.131693843518644e+00, // 199
 2.130925959495746e-01, // 200
-7.527995176686987e-02, // 201
-1.026799342584107e+01, // 202
 1.010282203372638e+02, // 203
 1.950210521115049e+01, // 204
-6.431618126628860e-02, // 205
 3.757045869016966e+00, // 206
-1.499828048736387e+00, // 207
 1.014481709572957e+02, // 208
-5.975681409431144e+01, // 209
-7.877727802556854e-03, // 210
 9.527013622245725e-02, // 211
-1.927654054419691e+00, // 212
 5.358152745081598e-01, // 213
 1.339136284202700e+01, // 214
 8.426043726751242e+00, // 215
-4.879082476692782e+00, // 216
 3.934682186995148e+01, // 217
 2.158197207565955e+01, // 218
-9.419746464386472e-02, // 219
 4.176695223500861e+00, // 220
-2.996129720904227e+00, // 221
 1.077880933708687e+01, // 222
-9.644894544772585e+00, // 223
-2.411865219200784e-01, // 224
 1.230439785387354e+01, // 225
-7.023520105917398e-02, // 226
-9.966395227865672e-04, // 227
 8.786925543474744e+00, // 228
-9.092531095500109e-01, // 229
 1.817765023770377e+01, // 230
 5.212865288187476e-01, // 231
-2.684547184489001e+00, // 232
 4.620747083249785e-01, // 233
 4.507204144318833e+00, // 234
 6.347085595817660e+00, // 235
 3.373558388748277e+01, // 236
-2.650171430954973e+01, // 237
 3.237704724167901e-01, // 238
-2.047580123880190e+02, // 239
-5.344622244677738e+01, // 240
 4.866962987111337e-02, // 241
 1.819466133600064e+00, // 242
 1.899919681973592e+01, // 243
-2.991988715547362e-02, // 244
-2.564940682326535e-02, // 245
-4.243586507053659e+00, // 246
 1.897157725017814e+00, // 247
 5.279530100501802e-01, // 248
-6.747310491686953e-01, // 249
-1.100953144001617e+00, // 250
-1.665827875836662e+01, // 251
-6.326793397335821e+00, // 252
-3.035389198953808e+01, // 253
 2.260538014285928e+01, // 254
 2.771807390841509e+00, // 255
-3.276978086454835e+00, // 256
 2.637921771930128e+01, // 257
-5.403972539320980e-02, // 258
-1.483010138982359e+02, // 259
 3.202549100293703e+01, // 260
 1.013191375451246e+01, // 261
-1.293112602769860e+00, // 262
 1.553257680153941e+01, // 263
-3.660517203848056e+01, // 264
-5.468527880433066e-01, // 265
-4.187976571950366e-01, // 266
-9.359268052585442e+00, // 267
-1.163460713485810e+01, // 268
-7.949533963520092e-03, // 269
 1.083181410535524e+01, // 270
-4.751708184383122e-01, // 271
 7.775994032269395e+01, // 272
 3.595878757770946e+00, // 273
-1.434351626792162e+01, // 274
 2.450696193611190e-01, // 275
-2.315884256121051e+01, // 276
 8.379428716967768e-04, // 277
-9.660492532009098e+00, // 278
 4.581828116607931e+00, // 279
-1.822615451842451e-01, // 280
 7.200094358323850e+01, // 281
-2.745843957047116e+01, // 282
 2.359087726343876e+01, // 283
-5.945893083354804e+00, // 284
 3.425568529047977e-01, // 285
 1.856924610586066e+01, // 286
 2.216324780242911e+00, // 287
 4.627885276263713e+01, // 288
-6.880791491062987e-01, // 289
-3.052143923101222e+00, // 290
 1.143750001411574e+01, // 291
-6.185605095180804e+01, // 292
-1.355462043592524e+00, // 293
-6.543643984696327e+01, // 294
 2.197598903879751e+00, // 295
-1.116451669077266e+01, // 296
 1.972795446466847e+01, // 297
-7.711149680670289e-02, // 298
-8.532403381931283e-01, // 299
 5.605528977627900e-01, // 300
-1.278350357235561e+01, // 301
 1.635471852431527e-02, // 302
 1.017013384158062e+00, // 303
-7.850893744400400e-01, // 304
 2.086165045638798e+01, // 305
-7.521824622704750e+01, // 306
 5.986782309625707e-03, // 307
 4.431976014456031e+01, // 308
 1.476972830016764e-02, // 309
 1.104099356503654e+02, // 310
-6.372282395030722e-01, // 311
-6.403472854132700e+01, // 312
 1.475574330835144e+01, // 313
 1.856927342466171e-01, // 314
-1.576394356368968e+00, // 315
 2.136207731678011e-01, // 316
 3.581922637530185e+01, // 317
 1.781699777769576e-02, // 318
 4.645834250665309e+00, // 319
-3.026872437424545e+01, // 320
 3.697118336642303e+01, // 321
-3.114556639704694e+00, // 322
-5.295487252603437e-01, // 323
-1.971750542016703e+01, // 324
 3.313021880925564e+01, // 325
 6.785515197496576e+00, // 326
 5.008620730682490e+01, // 327
-7.495535579315046e+01, // 328
-1.436659642075544e+00, // 329
 1.148706584119476e-02, // 330
-6.802735166400622e+01, // 331
-1.868798204709027e+01, // 332
-5.707756771497332e+01, // 333
 6.130132111230876e+00, // 334
 2.226325359538087e-02, // 335
-3.243174634597862e+00, // 336
 1.865896772090546e-01, // 337
 2.253972103869377e+01, // 338
-1.327581758291493e+01, // 339
 1.391293872159043e+00, // 340
 5.852431970146407e-01, // 341
 6.262057230072601e+00, // 342
-2.822933298475560e+01, // 343
-2.658196488867871e+00, // 344
-7.595432514450964e+01, // 345
-3.173849052362066e+01, // 346
-6.912215915508389e+00, // 347
 4.421069363811670e+02, // 348
-7.652182584983647e+00, // 349
 2.123728692033662e+01, // 350
 1.119607375814479e+01, // 351
 2.410132639707445e+00, // 352
 9.894309485649474e+00, // 353
 1.351968991135814e-02, // 354
-3.630329077989558e+01, // 355
 2.139227067551954e+01, // 356
-1.231552598659532e-01, // 357
-5.919767328176796e+01, // 358
-3.824676723742736e+00, // 359
 1.124984631411866e+00, // 360
 2.475111511104802e+00, // 361
-1.755304804112555e+00, // 362
-3.189870740321648e+01, // 363
-3.989546950335980e+00, // 364
 4.012566831532479e+01, // 365
 9.375286153834135e-02, // 366
-3.593167409865512e+00, // 367
 1.279689078784184e+01, // 368
-8.223556448710484e-02, // 369
-3.987259137051838e-02, // 370
 7.040259841475891e+01, // 371
 1.212168923039423e+00, // 372
-2.019212262257248e-01, // 373
 5.160084287612995e+01, // 374
-1.214410853287771e+01, // 375
 7.437088085124160e+00, // 376
 1.189230526542470e-02, // 377
-8.855011373384151e+00, // 378
-2.335522564489796e+01, // 379
 2.335970921019434e+00, // 380
-5.270944284194561e+00, // 381
 4.412689541945466e-01, // 382
-4.703078234111047e-01, // 383
-1.298856482279025e+02, // 384
 7.325289517228567e-01, // 385
 2.045657384173515e-02, // 386
-2.368897409459909e+01, // 387
 3.112208360203820e+00, // 388
 1.776823308907758e+01, // 389
 1.070914227766509e+01, // 390
-8.436928338397241e+00, // 391
-1.039724151647644e+01, // 392
-2.903295730801581e+00, // 393
 1.467556867502122e-01, // 394
 3.553737151917572e+00, // 395
 1.425880794146092e+01, // 396
-6.988027808297604e+00, // 397
 6.867635178163214e+00, // 398
-1.402982263572148e+01, // 399
 4.389066060293407e+01, // 400
 3.792749868812138e+01, // 401
-2.085452707155334e-02, // 402
-3.173995773364664e+00, // 403
 6.450766535751244e-02, // 404
 7.399536742099797e+00, // 405
 7.522623324080345e+00, // 406
-1.950183875013815e+00, // 407
-9.989378406524771e+00, // 408
 1.665246732595100e+00, // 409
-2.713471440204793e+01, // 410
-4.231468793028850e+01, // 411
-7.880350561013443e-01, // 412
 1.736379164236605e+01, // 413
 9.238289392268355e+00, // 414
 7.922762327909322e-01, // 415
 2.406014282045332e+00, // 416
-9.298228013442419e+00, // 417
 8.532631363993424e+01, // 418
-3.321242929508329e+00, // 419
 1.747853223524192e+01, // 420
-5.236802446445099e-01, // 421
 2.300928130794089e-02, // 422
 1.988515102654683e+00, // 423
 1.704337608157505e-01, // 424
 1.031322059709675e-03, // 425
 3.360771125272207e+00, // 426
-3.415765634028732e+01, // 427
-2.057874119529295e-01 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.485213251789945e-01; // A^(-1)
    m_k_OH_intra =         4.396432908043376e-01; // A^(-1)
                           
    m_k_XH_coul =          4.146462556666625e-01; // A^(-1)
    m_k_XO_coul =          7.487441597480277e-01; // A^(-1)
                           
    m_k_XLp_main =         8.740013315063402e-01; // A^(-1)
                           
    m_d_HH_intra =         1.999874208601311e+00; // A^(-1)
    m_d_OH_intra =         1.999999439458326e+00; // A^(-1)
                           
    m_d_XH_coul =          6.911488207498632e+00; // A^(-1)
    m_d_XO_coul =          6.142522352175076e+00; // A^(-1)
                           
    m_d_XLp_main =         3.701076763410543e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cs_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_cs_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cs_cutoff(double* r)
#else
void mbnrg_2b_h2o_cs_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
