#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
-1.776211177459765e+01, // 0
-1.024845148851527e+03, // 1
-2.656256617951373e+01, // 2
 1.738531255527328e+02, // 3
-1.958189561684165e+01, // 4
 3.193022057345738e+01, // 5
 1.802548622283909e+03, // 6
-2.805126029679571e+02, // 7
 4.116471702167226e+02, // 8
 1.291528600407701e+01, // 9
 4.135133522628283e+01, // 10
 1.684602259454464e+00, // 11
-1.764569230549456e+02, // 12
-1.053233146728526e+02, // 13
-1.304945658030331e+02, // 14
 1.173143954272661e+02, // 15
-2.432253979768186e+02, // 16
 3.284867183988417e+02, // 17
 1.366899673023739e+02, // 18
 3.823236651022980e+02, // 19
 1.110694491189966e+02, // 20
 5.445575675492985e+01, // 21
 5.228405802549397e+01, // 22
 7.713050493098926e-02, // 23
 2.036212053763400e-01, // 24
 1.640477601417518e+02, // 25
-8.674475413241073e+01, // 26
-1.475177449710828e+02, // 27
-1.302446960349115e+02, // 28
 2.159464178062454e+01, // 29
 2.228669518959778e+02, // 30
-3.081059754595354e+01, // 31
 9.737005052041402e+00, // 32
 6.826766394028239e-01, // 33
-1.533615905005407e+03, // 34
 7.840052683726626e+01, // 35
-1.643414895225581e+00, // 36
-4.193171742466679e+02, // 37
-9.718811467647321e+01, // 38
-7.237741996760190e+02, // 39
-2.374604372956517e+02, // 40
 1.218636446142915e+02, // 41
 1.493922975182651e-02, // 42
-1.080438606588619e+01, // 43
-2.962352705777341e+02, // 44
-2.251461146278604e+02, // 45
-6.788111975175420e+01, // 46
 6.737016034409438e+02, // 47
-2.493492274671218e+01, // 48
 4.630406638375892e+01, // 49
-8.192002660049125e+00, // 50
 9.222477337132027e-01, // 51
 4.917205190388371e+01, // 52
-3.835637661008716e+02, // 53
-2.643449825761755e+02, // 54
 3.824756345712008e+02, // 55
-3.049146391879312e-01, // 56
 2.020441207629231e+02, // 57
-4.713614443258020e+02, // 58
-2.114619852414331e+02, // 59
-5.654974011370286e+00, // 60
 1.012519636949935e+02, // 61
 2.633669943243564e+00, // 62
-3.437699909286555e+01, // 63
 1.988207233313700e+01, // 64
-2.641415229224886e+02, // 65
 1.835168287999424e+01, // 66
 5.500887087394360e+01, // 67
 4.262390556783828e+01, // 68
 3.011304414551942e-01, // 69
 2.530787972908052e-01, // 70
 7.127254358014354e-01, // 71
-3.033453455957554e+00, // 72
 9.441143523212931e+01, // 73
 4.684850687128216e-01, // 74
-2.770826792450636e-01, // 75
-5.244860663098258e+01, // 76
 4.771286191144885e+01, // 77
-2.528054423639432e+02, // 78
 1.416365717349202e+01, // 79
-5.809390429009139e-02, // 80
-5.676110645225202e+00, // 81
 5.791663947614595e+00, // 82
-7.835319599202369e-03, // 83
-4.499839999072030e-01, // 84
-2.373441866038253e-01, // 85
 3.756821200715993e+02, // 86
 2.021350397544316e+01, // 87
 1.650643658899091e+02, // 88
 1.126019345565742e+01, // 89
 1.400876827861550e+00, // 90
-1.548524232983861e+01, // 91
 2.702491116612448e-03, // 92
-6.499489998718320e+02, // 93
 1.043368934761175e+02, // 94
 5.546917954315343e+02, // 95
-1.566680350321185e+01, // 96
-3.121738248186474e+01, // 97
-2.820524524677588e+02, // 98
-9.882420774084237e+01, // 99
-1.357199438878297e+00, // 100
 1.519010528036273e-01, // 101
-1.777949208392269e+01, // 102
 3.500585728879786e+01, // 103
-6.217610439284935e+01, // 104
-7.361735472290833e+01, // 105
 2.316034050057098e-01, // 106
-1.587229866741454e+02, // 107
-1.024776223928730e+02, // 108
-7.364496503414479e+01, // 109
 3.442736563602791e-01, // 110
 4.406394816619367e+00, // 111
 1.852314189547778e-01, // 112
 4.469669931335250e-03, // 113
-8.789860008263439e+00, // 114
 4.467057561022455e+01, // 115
-2.064901229140824e+00, // 116
 2.496425436323194e+02, // 117
-1.409545918354421e+02, // 118
-9.831207535301383e-03, // 119
-1.474744133400004e+01, // 120
 5.530005688204674e+01, // 121
-4.556010749954547e-04, // 122
 2.601958622652454e+02, // 123
 1.321667516489475e+02, // 124
 3.481278279394734e-01, // 125
-2.385171863145613e+00, // 126
-5.270727233744651e+02, // 127
 8.414842526798985e+00, // 128
-9.584914390466446e+00, // 129
 1.002118930401465e+00, // 130
-9.690018612379851e+01, // 131
-1.101809343908619e+01, // 132
-4.476266883783014e+02, // 133
-2.206534498031144e+00, // 134
-7.748829051102833e-02, // 135
 1.253095048876109e+00, // 136
 2.540654732250016e+01, // 137
-4.962491869553011e+01, // 138
-7.447202710234891e-01, // 139
 5.695302344570616e-02, // 140
-4.844127804693758e+01, // 141
-8.072105761253913e-02, // 142
-3.108449244955938e+02, // 143
 2.275704496344601e+02, // 144
-2.804287675534504e-02, // 145
 6.578400785293216e+01, // 146
-2.584295838678987e+01, // 147
 2.159265489426303e+02, // 148
-2.833473639963794e-02, // 149
 7.126862065234485e+01, // 150
 2.078674640794425e+00, // 151
 4.235857625305074e+00, // 152
-1.102951948563256e-02, // 153
 5.849885963488623e-06, // 154
 1.838962667555289e+00, // 155
 1.114856663845726e+03, // 156
 6.305717658738572e+01, // 157
 6.564234772107429e-04, // 158
 2.284330024511020e+01, // 159
-4.110027569566308e-01, // 160
-8.148895864084811e-02, // 161
-4.791966126765460e+01, // 162
 1.950900560542394e+02, // 163
 9.400316693182620e+01, // 164
 2.286359843054649e+00, // 165
 4.255005782305760e+02, // 166
 8.281482071886773e-02, // 167
-4.598996311231102e-01, // 168
-1.605021009131164e+02, // 169
-3.522424806558908e+00, // 170
-1.141607440366476e+00, // 171
 2.334140076418658e+01, // 172
 5.279054827228773e-01, // 173
-8.799590334420433e+00, // 174
 2.563020145420663e+00, // 175
-5.044775236612715e-01, // 176
-5.857370551541916e-01, // 177
-9.200894573640644e+00, // 178
 4.870373050369325e-01, // 179
-1.785093888361733e-02, // 180
 7.008781417110390e+01, // 181
 1.243068266033304e+01, // 182
 6.960286328340436e-01, // 183
 5.790091169911727e+02, // 184
-1.109742728448460e-01, // 185
 2.484805738720150e-02, // 186
 2.566792093137325e+01, // 187
-3.674147383138598e-02, // 188
-1.016196156560502e-02, // 189
 3.944465029469683e+00, // 190
-2.773077142724898e+02, // 191
 1.841332832738254e-03, // 192
-3.243619094803627e-01, // 193
-1.017250243057633e+02, // 194
-1.030555568303112e+00, // 195
 6.509404858902689e-03, // 196
 2.201572603770276e+00, // 197
-3.849148807472640e+02, // 198
-1.114249760377733e-01, // 199
-3.241371671293999e+01, // 200
 1.792885830831405e-03, // 201
 1.227809263063181e-01, // 202
 6.761383751472784e+00, // 203
 1.248470093999576e+01, // 204
 4.246445402851675e+01, // 205
-1.407708944754834e+01, // 206
 1.888649335181504e-01, // 207
 1.267399370329868e+02, // 208
-8.508665836924497e+01, // 209
 2.381908631977763e-05, // 210
-1.171256372287297e-05, // 211
 1.196958908536095e-01, // 212
-2.974283425618847e-04, // 213
 2.219448674714855e+00, // 214
 9.734811394559260e-03, // 215
 3.543417597815972e+01, // 216
-4.216952995095306e+00, // 217
-8.486211785884105e+00, // 218
-7.582992187917498e-03, // 219
 3.053065876593208e-02, // 220
 9.050187861411308e-04, // 221
-1.026805276970752e-02, // 222
-5.301851225638241e-02, // 223
 1.856919637063425e-03, // 224
-1.017232545208808e+02, // 225
 7.131783024088758e-04, // 226
 8.609387490595734e-04, // 227
 1.389819471268943e-01, // 228
-3.157865649721360e-01, // 229
 1.011782180398411e+00, // 230
 8.629416219784427e-01, // 231
 2.267735616516094e+01, // 232
-2.045489032621399e-02, // 233
-2.477821358000017e-01, // 234
-5.792846300663246e-01, // 235
-8.145871562175996e-02, // 236
-2.544960202803600e+00, // 237
 1.258794774748708e+00, // 238
-1.925925346793855e+02, // 239
-1.600419732652449e+01, // 240
-1.852171596754173e-01, // 241
 4.572918617359225e-03, // 242
 2.542045230270247e-01, // 243
-9.071405005394524e-04, // 244
-3.557295383357966e-04, // 245
-6.970566143703198e-01, // 246
 1.844241674013070e-02, // 247
-5.409665530091258e+00, // 248
 3.499345244286103e-03, // 249
-1.925430832980692e-01, // 250
-1.493095289323246e+00, // 251
 2.038858345343934e+00, // 252
 1.579725944352164e-01, // 253
 1.014369359511487e+02, // 254
 1.285879878967308e+00, // 255
 3.236286592131533e+00, // 256
 5.259903010612559e+01, // 257
-2.815786386175316e-04, // 258
-5.363537360371684e+01, // 259
 7.558320889002374e+01, // 260
 5.820434232620997e-02, // 261
-5.118760098016579e-04, // 262
 1.428155169754264e+00, // 263
-1.547698236271548e+00, // 264
-1.141940614176818e-01, // 265
 1.444598208560683e-02, // 266
-9.569108151205596e+00, // 267
-8.391202351166307e-05, // 268
-4.507235075833853e-06, // 269
 6.983924346438940e-01, // 270
-1.264002762663807e-05, // 271
 6.793655141177553e+01, // 272
 3.591566507980352e+00, // 273
-1.902532772574894e-01, // 274
 1.112621364657103e-03, // 275
-4.942688888204238e+01, // 276
-8.854004659163391e-07, // 277
-2.827775268989160e+00, // 278
 3.769548617976678e+00, // 279
 2.108215364953468e-02, // 280
 1.474325172125242e-01, // 281
-3.908824912425487e+00, // 282
-1.944177649648081e+01, // 283
-1.145958232584074e-02, // 284
 8.547600905347405e-03, // 285
 9.488578759931757e+00, // 286
-2.917070173126408e-03, // 287
-2.511653326452695e-02, // 288
-8.963162569920115e-02, // 289
-4.195726868291644e-02, // 290
-1.484916773621163e-02, // 291
-1.729835050139125e+00, // 292
-1.065625357439854e-02, // 293
-2.648577505661151e+02, // 294
-1.582109875275357e-01, // 295
 7.284551619300629e-01, // 296
 1.022208657824544e+01, // 297
 5.181966014737266e-05, // 298
 2.318538557526879e-05, // 299
 9.475447007089913e+00, // 300
-2.849061802540944e+01, // 301
 6.440913890643096e-03, // 302
-3.475709913977780e-01, // 303
 2.919400001803971e-04, // 304
 1.103770090616909e+02, // 305
 3.583622621258827e+01, // 306
-1.338676557398221e-03, // 307
 1.485978399522260e+02, // 308
 5.423109713608240e-03, // 309
 4.627235304386402e+00, // 310
 4.398883441236631e-02, // 311
 1.245655779919408e-01, // 312
-6.926366498406586e+00, // 313
-8.242253173958763e-04, // 314
 8.465209443027684e-01, // 315
-1.373028515732904e-02, // 316
-2.476136638487550e+00, // 317
 3.077733804217917e-02, // 318
 2.067899235723616e-01, // 319
-1.622910389512192e-02, // 320
-6.098889542867062e+00, // 321
 5.421995315570511e-01, // 322
-4.682456900497036e-02, // 323
 6.174363771319952e+00, // 324
 1.537414474867586e+01, // 325
-2.473061964299177e+00, // 326
 8.300021127608520e-01, // 327
-2.780554426038958e+00, // 328
-3.087816919246018e-02, // 329
 1.622416084642768e-07, // 330
-2.798921185492778e+01, // 331
-6.586919929117347e+00, // 332
-1.045906026531857e+01, // 333
 4.884334882239431e-01, // 334
-1.031686710545616e-04, // 335
 7.287248601688004e-01, // 336
-2.975220207809146e-02, // 337
-2.493538631017115e+00, // 338
-5.654414454533021e+01, // 339
-4.779356460486189e-04, // 340
-2.062959608419761e-01, // 341
-1.478411692382705e-01, // 342
-1.118520465988323e+00, // 343
 1.775146641002946e-03, // 344
-1.714601995038646e+01, // 345
 8.957195482801286e-03, // 346
-1.436809650474681e-02, // 347
 3.729094574422866e+02, // 348
 3.137355152227568e-02, // 349
 1.388981352049763e-02, // 350
 2.060858117881003e-01, // 351
 4.666872957444026e+00, // 352
 2.337024000912284e-04, // 353
-4.043637808027450e-04, // 354
-2.994669573402981e+01, // 355
 2.933068286002803e+01, // 356
 3.191330023239874e-03, // 357
 2.848392660390704e+01, // 358
 6.989156860749318e-02, // 359
 2.792657056799649e-02, // 360
 1.353686471088702e-05, // 361
-2.035856586725770e+00, // 362
 4.652892747586245e-01, // 363
-8.059987129019858e-04, // 364
 9.504564637130571e+00, // 365
 1.084473324925082e-03, // 366
-5.613541049006493e+00, // 367
 1.549437633699437e-01, // 368
-6.211568398784617e-02, // 369
-1.648407786103038e-05, // 370
 1.384495757799225e+02, // 371
-1.759506313478939e-04, // 372
-5.007544159367448e-02, // 373
-7.133266883646580e-01, // 374
 4.599872263906762e+01, // 375
-2.041741656067396e+00, // 376
 3.573343690006262e+00, // 377
-3.014346138129998e+00, // 378
 4.664005765678597e-01, // 379
-2.778216091844265e-04, // 380
 7.342291082554353e-01, // 381
 1.095122128005081e-01, // 382
 1.268232489582457e-02, // 383
-7.461997534505305e+02, // 384
 2.563669079199410e+00, // 385
-6.598171075613538e-06, // 386
-3.837776719377321e+01, // 387
-3.582857422514401e+01, // 388
 1.042873150605151e+00, // 389
 8.584227111143986e-01, // 390
-1.252625155884661e+01, // 391
-1.479700297129813e+00, // 392
 3.831357618225504e-02, // 393
-2.348078732458517e-03, // 394
-1.506140956282042e-02, // 395
 4.159241287437992e-02, // 396
 2.023046558967374e-02, // 397
-1.249302612537919e+00, // 398
 2.471813514301826e-01, // 399
 3.820872383507353e-01, // 400
-5.384177515203221e-01, // 401
 1.151682358394701e-02, // 402
-7.016688065709266e-01, // 403
 3.237588656318458e-02, // 404
 8.520227286151596e-01, // 405
 4.030626611583896e-03, // 406
-3.317526034873326e-02, // 407
 4.102376142810412e-03, // 408
-2.374049316196508e-02, // 409
-1.801995589507530e-01, // 410
 3.304021637109455e+00, // 411
-4.764377122704272e-02, // 412
 6.286110114776993e+02, // 413
-3.805015413205169e-01, // 414
 1.787501607159824e-01, // 415
-1.307653692062470e-02, // 416
-1.499600659657510e-02, // 417
 9.906707403771770e+01, // 418
-7.215558438522961e-03, // 419
 2.245997358357399e-01, // 420
-6.486283714618903e+00, // 421
 9.085646030580370e-05, // 422
-1.829181923475664e-01, // 423
-3.434212804509719e-06, // 424
 2.054857067515115e-07, // 425
 8.535955390685177e-03, // 426
-6.402400123215184e+00, // 427
-8.984010742681987e+00  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.663119079456753e-01; // A^(-1)
    m_k_OH_intra =         3.020843563055387e-01; // A^(-1)
                           
    m_k_XH_coul =          5.032477742167175e-01; // A^(-1)
    m_k_XO_coul =          1.130046725270823e+00; // A^(-1)
                           
    m_k_XLp_main =         6.527960258688869e-01; // A^(-1)
                           
    m_d_HH_intra =         1.438933188793173e+00; // A^(-1)
    m_d_OH_intra =         4.162682294936985e-01; // A^(-1)
                           
    m_d_XH_coul =          6.323240727506818e+00; // A^(-1)
    m_d_XO_coul =          6.946595566060685e+00; // A^(-1)
                           
    m_d_XLp_main =         5.897318559954781e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_cl_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_cutoff(double* r)
#else
void mbnrg_2b_h2o_cl_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
