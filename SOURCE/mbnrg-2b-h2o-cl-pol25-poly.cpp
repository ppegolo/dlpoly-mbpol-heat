#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
 3.095480401532512e+02, // 0
-5.565939970422340e+02, // 1
 4.811044609715689e+02, // 2
 2.702675910984520e+02, // 3
 7.724757539189665e+01, // 4
-1.691577046692964e+02, // 5
 6.664267678868002e+02, // 6
-8.393184390315234e+01, // 7
-3.487846695816954e+02, // 8
-5.508218285996107e+02, // 9
-3.816607953185965e+01, // 10
 2.105452632495178e+01, // 11
 1.850425550961481e+02, // 12
-2.601100105109356e+02, // 13
-3.724906387317841e+02, // 14
 2.410567585522662e+02, // 15
-4.825765698220986e+02, // 16
 4.200849780155771e+02, // 17
-1.868712119842336e+01, // 18
-1.018625709839109e+02, // 19
 5.372176929599453e+02, // 20
 9.454902340926481e+01, // 21
 2.746664700018709e+01, // 22
 3.131308854590407e+01, // 23
-6.229086600694649e+01, // 24
 6.020571086202468e+02, // 25
 1.376782534453816e+02, // 26
 8.743814833929201e+02, // 27
 4.545046174658750e+01, // 28
-5.796940289581979e+02, // 29
 3.818121801587841e+01, // 30
-1.264024516897996e+01, // 31
 1.459950124886014e+01, // 32
 3.169937410123047e+02, // 33
-1.019836208784909e+03, // 34
-1.388038096463277e+02, // 35
-1.023695586269223e+01, // 36
-6.292111682791784e+02, // 37
-1.572560970310997e+02, // 38
 1.352884106563695e+02, // 39
 8.616716861503951e+01, // 40
-6.901920234455598e+01, // 41
 1.088692790528103e+01, // 42
 7.187552823286543e+00, // 43
-6.476749829432661e+01, // 44
 1.902512060110696e+01, // 45
 6.899218719621054e+01, // 46
 1.163549846275444e+02, // 47
-1.068365529253917e+02, // 48
 8.792830871463595e+01, // 49
 6.562231145330777e+01, // 50
-6.420235545872079e+01, // 51
-6.540934442412397e+01, // 52
 3.238519505047229e+02, // 53
-2.007253857292668e+02, // 54
 8.692401971946578e+01, // 55
-3.672689241005132e+01, // 56
 5.696449873083187e+02, // 57
-6.663238034602482e+01, // 58
-4.872648771054921e+02, // 59
-8.407488316353830e+01, // 60
 2.057812054722886e+01, // 61
 2.977264467452013e-01, // 62
 2.183603730255111e+01, // 63
-4.637815503631588e+01, // 64
-1.908746420310855e+00, // 65
 3.078909719907997e+01, // 66
-1.719350403407647e+02, // 67
-3.210606386667008e+02, // 68
 9.736589069941404e-02, // 69
-1.604359972108104e+01, // 70
 3.298039606705950e-01, // 71
 6.730044595027481e+01, // 72
-3.229203485601817e+02, // 73
 4.837553552039163e+01, // 74
-1.557310044965865e+02, // 75
-2.555437828970142e+01, // 76
-1.832759400958035e+01, // 77
-4.955024332372508e+01, // 78
 1.103380114370029e+02, // 79
 2.422909848149482e+00, // 80
 4.247989695686088e+01, // 81
 1.304233867419697e+00, // 82
 5.725656458526549e-01, // 83
 6.426116134627834e-01, // 84
 7.212726313130044e-03, // 85
 3.583657760683412e+02, // 86
 3.540944822193991e+01, // 87
 5.615751921365638e+02, // 88
 1.281765436528036e+01, // 89
-8.925608881318890e+01, // 90
 5.976156935798648e+01, // 91
-2.363474550268668e+01, // 92
-7.737138249458464e+01, // 93
 3.138407154326147e+01, // 94
 1.237106732649101e+02, // 95
 8.382885797936905e+01, // 96
-2.958368295794761e+02, // 97
 4.756558294048563e+00, // 98
-3.113652451181070e+02, // 99
-2.989039292712803e+01, // 100
-5.209924063005106e-01, // 101
-1.798019256196064e+01, // 102
-2.836145156497100e+01, // 103
-3.077602416839169e+01, // 104
-1.036547663034370e+02, // 105
-1.046551161993692e+01, // 106
-1.321629973253975e+02, // 107
-1.199617375321339e+02, // 108
 2.040243353795834e+00, // 109
 1.984755545685069e-01, // 110
 4.794296169352542e+01, // 111
-3.491910189615432e+01, // 112
-1.263871485380248e-01, // 113
-7.557016093538413e-01, // 114
 2.308884485441706e+02, // 115
-5.510451502302519e+01, // 116
 1.329875014991573e+02, // 117
-3.160631811244993e+01, // 118
-5.173526317594404e+01, // 119
 1.551526673216511e+01, // 120
-5.427512322660994e+01, // 121
-3.123025374374560e+00, // 122
 8.146880251020356e+01, // 123
-2.439440801626368e+00, // 124
-1.967548764420795e+00, // 125
-1.814807681109166e+00, // 126
-3.507062896803469e+02, // 127
-1.605638420029244e+01, // 128
 1.004111725582944e+00, // 129
-1.088821422380865e+02, // 130
-1.653035746913848e+02, // 131
 3.067337714604901e+01, // 132
-4.366012057090370e+01, // 133
 1.078324704937827e+02, // 134
 4.372800380021204e+01, // 135
 2.734929908950979e+00, // 136
-7.235637120649977e+00, // 137
-1.226961088982547e+02, // 138
 3.211608054611489e+02, // 139
-1.067594899099413e+00, // 140
-4.944771998492308e+01, // 141
-4.047232924620231e+01, // 142
-1.078031172286904e+02, // 143
 3.163852149735574e+02, // 144
 3.992305746040492e+00, // 145
-7.229004113856288e+01, // 146
-2.194617617926608e+01, // 147
 1.160141432893397e+02, // 148
 6.224950507697809e+01, // 149
-1.147250059907365e+02, // 150
 6.545383731444741e-01, // 151
 4.563965795588348e+01, // 152
 2.302075530405164e+00, // 153
 7.776847359330534e-01, // 154
 2.781116837877906e+00, // 155
-4.205623527457831e+02, // 156
 1.626583775428625e+00, // 157
-9.921562281132030e-01, // 158
-7.154789779623028e+00, // 159
-1.033965587521996e+01, // 160
-1.361372181724385e-03, // 161
-4.264165864730279e+00, // 162
 1.858330867261370e+01, // 163
 1.085082080239469e+02, // 164
 1.498141651647451e+01, // 165
 2.259777610760824e+02, // 166
 1.063199379123628e+01, // 167
 1.470742511717605e+01, // 168
-3.679478456326843e+01, // 169
 7.270113952151267e+00, // 170
-8.064034062538882e-01, // 171
-7.739778935567215e+01, // 172
 9.705478422456540e+01, // 173
 1.818723878378990e+00, // 174
-1.053489344684010e+02, // 175
-6.631783431957043e+00, // 176
 1.396978333365098e+00, // 177
 1.775882662456118e+02, // 178
 4.477597064688974e+00, // 179
 8.628780153938504e+00, // 180
 2.506093679925348e+02, // 181
 7.339280572901399e+00, // 182
-5.133507913780958e+00, // 183
 2.053897398612744e+02, // 184
 3.750156007773817e-02, // 185
 6.005753617305033e-02, // 186
 8.859859092684719e+01, // 187
 9.332918770075097e-02, // 188
-6.194127038600507e-02, // 189
 9.480778371722496e+01, // 190
-7.563481328554761e+02, // 191
-4.870167590862572e-02, // 192
-4.806803066375278e+00, // 193
-3.172774484105047e+01, // 194
 9.872967549753971e-02, // 195
 2.091435107920254e-01, // 196
-1.097029216734648e+00, // 197
-9.083490886188122e+01, // 198
 1.336418604987451e+00, // 199
-1.536132790063186e+01, // 200
-8.224203217479840e-01, // 201
 4.256583887655943e+00, // 202
-5.313544999421143e+00, // 203
 1.028225500107306e+01, // 204
-6.494478550839699e+00, // 205
-9.795339541537551e+01, // 206
-7.558163004647465e-02, // 207
 3.209093455372554e+02, // 208
-1.428715646502819e+02, // 209
-2.751696236629455e-02, // 210
 4.041660086652786e-01, // 211
-1.333247977354765e-02, // 212
 1.331759142605976e+00, // 213
-9.264324715255364e+00, // 214
 1.415964361971974e-01, // 215
 3.166339595940148e+01, // 216
-4.783301731910850e+01, // 217
-1.706186576582320e+01, // 218
 8.421139838547539e-01, // 219
 6.666616213411390e-01, // 220
-4.072252625753081e+00, // 221
-7.779397199955329e+01, // 222
 4.924199255511743e+00, // 223
-4.152318072670986e-01, // 224
 5.499839501215146e+01, // 225
-1.252211197930305e-01, // 226
 4.351303176605418e-04, // 227
-9.359805345327541e-01, // 228
 4.785053406011382e-01, // 229
 7.664561619355839e+00, // 230
-2.397365902739790e+01, // 231
 1.016029223740576e+01, // 232
 8.748035222322367e-03, // 233
 2.754949650865284e+01, // 234
-1.020172442762350e+00, // 235
 1.184599156741869e+02, // 236
 3.541837792264772e+00, // 237
 1.347025459996196e+00, // 238
-3.428438470519630e+01, // 239
-1.704086681918755e+01, // 240
-2.688542043549690e+00, // 241
-2.086726966607009e-01, // 242
 1.189803698305720e+01, // 243
-3.069754055776918e-03, // 244
 8.360281989567979e-02, // 245
-6.580176853380888e+00, // 246
 1.660019978514973e-01, // 247
-1.371199046265998e+00, // 248
-6.398716204755787e-02, // 249
 1.478836310508718e-01, // 250
-1.215884735808929e+00, // 251
 3.475138736971983e+00, // 252
 3.789981023861913e+00, // 253
 9.642282628227522e+01, // 254
-5.648706996522853e-01, // 255
 6.934843073510727e-01, // 256
-8.122294780969222e+00, // 257
-1.245191435747258e-01, // 258
 6.741112626384279e+01, // 259
 3.607584629127110e+02, // 260
 1.244916337403613e+01, // 261
 8.722167396757959e+00, // 262
 2.655729658684136e+00, // 263
 3.585761030768769e-01, // 264
-1.404525390638752e+00, // 265
 4.526965777636417e-02, // 266
-7.393646012366466e+00, // 267
 5.017903862846464e+00, // 268
-1.485490843579464e-01, // 269
 6.643542215401149e+00, // 270
-4.702474775030230e-01, // 271
 4.195715691311282e+01, // 272
 5.499120508062258e+00, // 273
 4.691195752180279e+00, // 274
 6.555251513839830e-02, // 275
 1.357731688161978e+01, // 276
-3.937970314025959e-03, // 277
-2.663312101216116e+01, // 278
 2.200250792640889e-01, // 279
 5.673804595526451e-03, // 280
 5.947126816344508e+00, // 281
-1.189438822092880e+01, // 282
-5.950486888415359e+00, // 283
-8.416895414600224e-01, // 284
 2.854339825628731e-01, // 285
-4.547638971813961e+00, // 286
-1.840984435429735e+00, // 287
-1.688020998696635e+01, // 288
-1.085820341475884e-02, // 289
-1.392646134485705e-01, // 290
-9.692837554223228e+00, // 291
-1.141071628712147e+02, // 292
 3.442112178588703e-01, // 293
-1.092689576898908e+02, // 294
 1.028605760896472e+01, // 295
-5.923488832427263e+00, // 296
 1.430299114424577e+02, // 297
-4.796977935191438e-02, // 298
-2.613432534843973e+00, // 299
 7.607712624244862e+00, // 300
 6.345949030602461e+00, // 301
 2.400033594919159e-03, // 302
-5.279749055134354e+01, // 303
-4.219518979243624e-01, // 304
 4.278950753020337e+00, // 305
 6.514399375435633e+00, // 306
-4.840146017469625e-03, // 307
-2.045729286912418e+00, // 308
 1.899260436591571e-03, // 309
-4.819784033388884e+01, // 310
-2.207910508465323e-03, // 311
 1.766748988999315e+01, // 312
 7.887263816424455e+01, // 313
-3.964580108980349e-01, // 314
-9.339598272132256e-01, // 315
-5.280081891595024e-02, // 316
 1.178516929607610e+02, // 317
 8.243943050728167e-03, // 318
 2.591074284116013e-02, // 319
 1.756084953218727e+01, // 320
 3.239911449929520e+01, // 321
 2.267570314055194e-01, // 322
-1.029516911484681e-01, // 323
-6.640970300467248e+01, // 324
-2.672260300468416e+00, // 325
-2.474007865602866e+00, // 326
-6.527814115707896e+01, // 327
-9.847701707973043e+01, // 328
 1.058531200681518e-01, // 329
 2.369984438571253e-02, // 330
 1.914190967784506e+01, // 331
-7.000032298318316e+00, // 332
-1.050415833553282e+01, // 333
 6.139395523536277e+00, // 334
 1.141922023534758e-02, // 335
-3.630548257023701e-01, // 336
-2.900532783235140e-02, // 337
-7.049385413155365e+00, // 338
 4.094611060392511e+01, // 339
 4.334152380656327e+00, // 340
-6.307187353318477e-02, // 341
 3.445003852222312e+00, // 342
 9.635785702592523e+00, // 343
 1.661358764357298e+00, // 344
 2.422226922051073e+01, // 345
 3.322000598152503e+01, // 346
-7.454284439358900e-01, // 347
-1.247303989169233e+02, // 348
-4.342932940929670e-01, // 349
-7.456560823965108e+00, // 350
 9.455365774829918e+00, // 351
-3.462993655118916e+00, // 352
-9.999867444212793e+00, // 353
 3.475496650430400e-04, // 354
-1.938094527187523e+02, // 355
 2.873673216044529e+01, // 356
-2.216215227840766e-02, // 357
 4.952815551316144e+01, // 358
-5.325807974690180e-02, // 359
 2.641456621172498e+01, // 360
-1.187590876879623e+00, // 361
 4.757778057210295e-01, // 362
-7.618997571242188e+01, // 363
 2.538271750786962e+01, // 364
-2.957203113640868e+01, // 365
-6.086206294115424e-01, // 366
-7.296146505832003e-01, // 367
-5.258119254042947e+00, // 368
-9.515397470152172e+00, // 369
 5.925041978767119e-02, // 370
 8.939282082731221e+02, // 371
 3.372196572998848e-01, // 372
 2.378040243578528e-02, // 373
-4.437749389830400e+00, // 374
 1.831832071164917e+01, // 375
-7.262757754551304e+00, // 376
 6.144853188856684e-01, // 377
 3.583285359894955e+01, // 378
 8.318585530595543e+01, // 379
 3.651819036837253e-01, // 380
 2.036367550927305e+01, // 381
-6.609217316403132e-03, // 382
 2.942039979105996e-02, // 383
-2.987811111888385e+02, // 384
-2.338624588484705e-01, // 385
 1.434092095046609e-01, // 386
-3.860417335145042e+02, // 387
 2.622377149497865e+01, // 388
-2.041940652274068e+00, // 389
 1.004426695820857e+02, // 390
 2.357172731535262e+00, // 391
-9.873205632050420e+00, // 392
-3.287399477469267e+00, // 393
-2.616601737103884e-02, // 394
 8.858481572276882e-01, // 395
-5.374773471138554e+00, // 396
 1.529460012638370e+00, // 397
-1.377198012460648e+00, // 398
-2.351161254115280e+01, // 399
 1.228172143258334e+00, // 400
-3.949448204400942e+01, // 401
 5.196911009871985e-03, // 402
-6.902598344256473e-01, // 403
-1.288896953520132e-01, // 404
 1.006515730408915e+00, // 405
-6.397713643212321e+00, // 406
-3.294493501275014e-02, // 407
-4.045188646040426e+01, // 408
 6.323784760476248e-03, // 409
 1.547481524033619e+01, // 410
-2.341501711232225e+02, // 411
-8.866848336270537e-02, // 412
-3.128189894565054e+01, // 413
 1.491045364082929e+02, // 414
 1.491910602178124e+00, // 415
-1.767444431031680e-01, // 416
-5.700192491114501e+00, // 417
 4.548353173408736e+01, // 418
 2.196891702982640e+00, // 419
 9.765932444617149e-01, // 420
 4.325433838196275e+00, // 421
 3.127483590571561e-01, // 422
-4.224081964577166e-02, // 423
 5.986905081337278e-01, // 424
 3.351942189685291e-02, // 425
 1.494741648008281e-01, // 426
 5.598373392191037e+00, // 427
 1.946777650767479e+00  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.897242932611510e-01; // A^(-1)
    m_k_OH_intra =         2.518257550741797e-01; // A^(-1)
                           
    m_k_XH_coul =          5.807104388483646e-01; // A^(-1)
    m_k_XO_coul =          8.317296975458423e-01; // A^(-1)
                           
    m_k_XLp_main =         1.150689103186469e+00; // A^(-1)
                           
    m_d_HH_intra =         1.999998724290001e+00; // A^(-1)
    m_d_OH_intra =         1.431971039928150e+00; // A^(-1)
                           
    m_d_XH_coul =          6.193381873173879e+00; // A^(-1)
    m_d_XO_coul =          6.998692559916806e+00; // A^(-1)
                           
    m_d_XLp_main =         4.327410661274436e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_cl_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_cutoff(double* r)
#else
void mbnrg_2b_h2o_cl_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
