#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  100%polfac 03/15/17
static const double the_poly[] = {
 2.083780722614274e+02, // 0
-6.395144975109851e+02, // 1
 3.461196120015529e+02, // 2
 1.086184440907786e+02, // 3
 9.507532145770762e+01, // 4
-7.896402750719990e+01, // 5
 8.640856689004796e+02, // 6
-3.730368047161393e+01, // 7
-2.143426985761753e+02, // 8
-4.124093862582318e+02, // 9
-1.303377268702813e+01, // 10
 1.840515405294200e+01, // 11
 1.210579217263846e+02, // 12
-1.927627981101880e+02, // 13
-3.131668349904282e+02, // 14
-3.127809762505852e+01, // 15
-5.333940908900775e+02, // 16
 1.717049898118284e+02, // 17
 5.327612108083171e+01, // 18
-1.353337428216999e+01, // 19
 4.904458740175452e+02, // 20
 7.402845193335939e+01, // 21
-1.350047373116454e+00, // 22
-5.833822291403955e+00, // 23
-7.565225449546517e+01, // 24
 4.218996522217525e+02, // 25
 8.626702207342292e+01, // 26
 6.403463772027640e+02, // 27
 3.012928061976975e+02, // 28
-3.200037632143001e+02, // 29
 1.458718105900030e+01, // 30
-6.688629773164680e+00, // 31
-1.510598900484945e-01, // 32
 2.917808252253106e+02, // 33
-1.262269375409833e+03, // 34
-4.273580420375765e+01, // 35
 1.580992814446404e+00, // 36
-2.574209848478253e+02, // 37
-3.377614870761175e+01, // 38
 1.191822918270118e+01, // 39
 5.066916978364483e+01, // 40
-9.563180224221776e+01, // 41
 1.490373253951794e+01, // 42
 3.987894462475974e-01, // 43
-5.732373335646509e+01, // 44
-2.499307456888616e+01, // 45
-4.241377739097777e+00, // 46
 6.776496283055118e+01, // 47
-1.063155528636837e+02, // 48
 9.420204161613460e+00, // 49
 1.424592330992334e+01, // 50
 6.064283363065635e+00, // 51
-6.058495046621228e+01, // 52
 4.560698544141814e+02, // 53
-2.980884367306223e+02, // 54
-1.476907305359556e+02, // 55
-2.482402015982995e+01, // 56
 2.057509704263154e+02, // 57
-8.964901700419904e+01, // 58
-2.083120957024333e+02, // 59
-1.526542521390545e+01, // 60
 1.604744832784505e+02, // 61
-9.541746822376272e-02, // 62
-3.347968287112729e+00, // 63
-3.346326306660835e+00, // 64
-3.204342627684070e+01, // 65
 2.622276119572258e+01, // 66
-7.386687798800415e+01, // 67
-5.873201550361227e+01, // 68
 1.885197054082902e-02, // 69
 1.308760388384481e+01, // 70
 6.976300087672643e-03, // 71
 3.827192592124030e+00, // 72
-2.794275509224721e+02, // 73
 4.460493787861785e+01, // 74
-3.697995505185539e+02, // 75
-4.036194888538185e-01, // 76
-5.422446297806469e+01, // 77
-9.703009241669138e+00, // 78
 2.249382448320060e+02, // 79
 2.743849637051445e-01, // 80
-1.228648628506995e+02, // 81
 6.810113853454173e-01, // 82
 9.305526979459659e-02, // 83
 5.941664733067536e-02, // 84
 1.788792510777653e-03, // 85
-5.531965516082666e+01, // 86
 1.432674899859877e+01, // 87
 3.161052917201918e+02, // 88
 3.638968129907428e+00, // 89
-2.861890211040238e+01, // 90
-1.310145402214853e+01, // 91
-1.108624322789441e+01, // 92
-3.240215444104020e+02, // 93
 3.104366900289234e+01, // 94
 1.114330002330313e+02, // 95
 1.691117727612540e+01, // 96
-8.391982127151240e+01, // 97
-2.310774603462078e+01, // 98
-1.956999607378130e+02, // 99
-2.040839311111500e+01, // 100
-8.974644489808287e-02, // 101
-1.357492696411804e+00, // 102
 3.307833001798083e+00, // 103
-9.045098795898389e+01, // 104
-1.588383270208209e+01, // 105
-4.954771611751934e+00, // 106
-1.931565570068125e+01, // 107
-1.432512534167981e+02, // 108
-1.668332239443072e-01, // 109
 7.824367561910690e-02, // 110
 7.522684324875923e+00, // 111
-3.378367198978688e+00, // 112
-3.836108357098413e-02, // 113
-9.729926287729405e-02, // 114
-2.615658424025858e+01, // 115
-6.135636778802857e+00, // 116
 9.878286911765751e+01, // 117
-2.244605924593082e+01, // 118
-4.291847167357418e+00, // 119
 1.854399566044116e-01, // 120
 4.463507461719620e+01, // 121
-2.728784385480267e-01, // 122
-8.575671237275669e+00, // 123
-9.663617916031150e+01, // 124
-3.882277173588596e-02, // 125
-8.811697444695005e-02, // 126
-5.155379691522697e+02, // 127
-8.955472761637376e+00, // 128
 2.842135049481415e-01, // 129
 2.396111149871458e+01, // 130
-1.160169434632448e+02, // 131
 2.739088461648761e+00, // 132
-2.664055870958564e+01, // 133
 5.637403994133549e+00, // 134
 2.483373379227995e+01, // 135
 4.239153782204828e-02, // 136
-7.619603127244844e-01, // 137
-1.481696115292973e+02, // 138
 4.383375404362389e+02, // 139
-8.848407235577471e-02, // 140
-1.528571584148616e+00, // 141
 9.747059143870455e+01, // 142
-1.556364540167677e+02, // 143
 1.133434904817975e+02, // 144
 1.753437259926783e-01, // 145
-2.831090130083946e+00, // 146
-1.638930668246970e+00, // 147
 1.130207572659625e+02, // 148
 1.621829791012220e+01, // 149
-2.684596310580844e+00, // 150
 1.406054207631653e-02, // 151
 4.867288046713935e+00, // 152
 1.718284410970535e-01, // 153
 1.221516312768307e-01, // 154
 9.190048787430169e-02, // 155
-2.224466257167315e+02, // 156
 3.984272438661320e+00, // 157
-1.391010744317079e-01, // 158
-3.304303736783036e-01, // 159
-2.807939112378608e-01, // 160
-2.435322424469426e-04, // 161
 2.309975748462382e+01, // 162
 7.056083475020671e+01, // 163
 8.386478806526279e+01, // 164
 5.621311943059899e-01, // 165
 3.614968318746675e+02, // 166
 5.427085568709848e-01, // 167
 1.113881268013204e+00, // 168
-3.022241540775847e+01, // 169
-5.015282376367651e+01, // 170
-3.945915103288993e-01, // 171
-1.170794270907107e+02, // 172
 2.473176951437868e+01, // 173
 5.657358556715993e-04, // 174
-1.914258096066636e+01, // 175
-3.774327721625780e-01, // 176
 7.132638435837856e-02, // 177
 1.301101640282114e+02, // 178
 1.277294591587070e-01, // 179
-7.182330087615712e+00, // 180
 4.315638245790331e+02, // 181
 1.406476799422887e-01, // 182
-2.895805652270624e-01, // 183
 1.632744470828462e+02, // 184
 1.462601449034046e-02, // 185
 3.586197048830725e-03, // 186
 1.648187758159973e+02, // 187
 1.567467391326159e-02, // 188
 1.493938806935975e-02, // 189
 6.592306785298443e+01, // 190
-4.612008434222298e+02, // 191
 7.306025811275153e-03, // 192
-1.101511071946773e-01, // 193
-4.152091303447739e+01, // 194
 1.817721956166372e-01, // 195
 1.015324089631306e-02, // 196
-1.437783383902542e+00, // 197
-2.503588072943150e+02, // 198
-4.421670856853111e-02, // 199
-2.955141217039301e+01, // 200
-1.848429041059177e-01, // 201
 4.088706705186526e-01, // 202
-7.418687599373026e-02, // 203
 1.477243551201259e+00, // 204
-1.574421896844394e+00, // 205
-1.718352460494490e+02, // 206
-5.728498441629654e-03, // 207
 5.649733124941597e+01, // 208
-7.690307345695996e+01, // 209
 2.847593860533223e-04, // 210
 6.771839282129588e-02, // 211
-3.986268447889304e-03, // 212
 1.416813961820101e-01, // 213
 6.775516557918453e-01, // 214
-3.020111641606587e-03, // 215
 1.365281632616723e+00, // 216
-1.230892078507399e+01, // 217
-1.728393864208422e+00, // 218
 4.102788947290634e-02, // 219
 1.389951278364434e-01, // 220
-2.466771761863118e-01, // 221
-3.121640802179944e+01, // 222
-3.941784248815791e-01, // 223
 2.211115568715221e-01, // 224
 1.218856177550215e+02, // 225
-1.079042924531857e-02, // 226
 4.896732585056708e-05, // 227
-3.135070559109792e-02, // 228
 8.699855510197993e-02, // 229
 1.075530190729774e+00, // 230
 2.497828812668912e+01, // 231
 1.815663200520182e+00, // 232
-3.639258972130357e-04, // 233
 6.698434379818075e+01, // 234
-2.541136539647396e-02, // 235
 1.803750743103697e+01, // 236
 1.684901346158735e-01, // 237
 1.223066979580943e+00, // 238
 1.048317247150734e+01, // 239
-7.463605721206065e+00, // 240
-1.949134874316202e-01, // 241
-6.845175387017259e-04, // 242
 9.501807136530557e+00, // 243
 2.563351033130033e-04, // 244
-5.716940108285016e-04, // 245
-2.615495447106254e-01, // 246
 2.127366303847076e-02, // 247
-3.889888192624538e-01, // 248
 1.062633487823536e-03, // 249
 7.437029984383777e-03, // 250
-2.007501773725979e-02, // 251
 3.812748466031087e-01, // 252
-4.371784351798510e-01, // 253
 9.827468211121692e+01, // 254
 1.280873063242120e-02, // 255
 1.298628780445832e-01, // 256
 1.271791346502369e+00, // 257
-1.793995873307637e-02, // 258
 6.389986776476428e+01, // 259
 2.386604650242059e+02, // 260
 2.435141682655650e+00, // 261
 1.293023347097615e+00, // 262
 1.112331779034372e-01, // 263
 7.761248621009790e-03, // 264
-2.291839196504296e+00, // 265
 2.470134166009241e-02, // 266
-3.410908130181077e+00, // 267
 4.059290530647922e-01, // 268
-3.062753088577688e-02, // 269
 4.249748412091348e+00, // 270
-5.894831282026824e-02, // 271
 2.748387399478166e+01, // 272
 2.616879827515716e-01, // 273
 1.175514242089348e-01, // 274
-2.408854641992110e-02, // 275
 2.022299280631947e+01, // 276
-6.067459091030279e-03, // 277
-6.611498636373919e+00, // 278
 1.209643082078464e+00, // 279
 2.139402629439784e-03, // 280
 4.435293878334480e+00, // 281
-9.476558836843340e+00, // 282
-5.957150923922000e-01, // 283
-2.455286619238140e-01, // 284
 8.772637320635608e-03, // 285
-2.481823561905396e-01, // 286
-3.108798515350683e-01, // 287
-8.199414940792787e-01, // 288
 1.106565609143946e-03, // 289
-7.383702887659917e-03, // 290
-8.152190955116002e-01, // 291
-1.035652517440811e+01, // 292
 2.407374341951008e-02, // 293
-1.115059828814915e+02, // 294
 1.313435209077922e+01, // 295
-1.399976775715615e+00, // 296
 1.348419931587628e+02, // 297
-1.720863123439973e-01, // 298
-6.857443774242106e-01, // 299
 4.352076145562476e-01, // 300
 1.867017133664374e+01, // 301
 2.391240137480032e-04, // 302
-3.347611932296506e+00, // 303
-3.695147654287707e-02, // 304
-1.409920475133928e+00, // 305
 1.588038906098848e+01, // 306
-3.523524416062505e-04, // 307
 1.109880056477497e+00, // 308
 1.824066095832505e-04, // 309
-4.103145825197386e+00, // 310
-6.221711228410397e-03, // 311
 4.945065010824924e-01, // 312
-1.159158834533507e+01, // 313
-2.483468117505785e-02, // 314
-2.034078674950882e-02, // 315
-1.109748399552184e-02, // 316
 6.658191679187603e+00, // 317
 3.378434871226517e-03, // 318
-1.353329656260243e-02, // 319
 2.329102070030773e+00, // 320
 1.631582373272319e+00, // 321
 4.963587657166260e-02, // 322
-2.211972639658277e-03, // 323
-9.161129664880002e+01, // 324
-9.348928392145481e-01, // 325
-1.301912749649515e-01, // 326
-2.734917385731321e+01, // 327
-1.147294557657685e+02, // 328
 2.444313894577058e-04, // 329
 1.570991197897516e-02, // 330
 3.387651582706663e-01, // 331
-2.452439703824845e+00, // 332
-1.864666129776067e-01, // 333
 5.193902440071359e+00, // 334
-4.189189110676334e-04, // 335
-6.085278527803723e-03, // 336
-6.523932189145181e-03, // 337
-8.709541060762845e-01, // 338
 3.953897038974971e-01, // 339
 6.508488651590998e-01, // 340
-1.962791247517571e-02, // 341
 8.461008542966518e-02, // 342
 3.047804242703634e+00, // 343
 2.254889038628432e-01, // 344
 1.434245672575918e+00, // 345
 2.283950134918584e+01, // 346
-8.761002028633212e-02, // 347
-1.820146471510188e+01, // 348
-1.041282625939613e-02, // 349
-3.380048684067687e-01, // 350
 3.816252928998453e-01, // 351
-1.899356392069494e+00, // 352
-1.172175836765883e+01, // 353
-3.589970890514061e-04, // 354
 1.098647567076832e+02, // 355
 4.192301071242992e+00, // 356
 7.002597985095872e-04, // 357
 7.220775302175289e+00, // 358
-4.063718617680777e-03, // 359
 3.261952446926342e+00, // 360
-1.655430380815881e-01, // 361
 5.448418911947170e-02, // 362
-1.138616446175815e+01, // 363
 1.723812871917453e+01, // 364
-3.367255363110018e+00, // 365
-4.172725115187382e-02, // 366
-1.163273794558281e+00, // 367
-9.324156220643582e-01, // 368
-2.683637222896219e+00, // 369
 8.053283715480170e-03, // 370
 1.246757090866167e+03, // 371
 5.629254058489302e-02, // 372
-4.324674182738000e-04, // 373
 7.456322508383935e-01, // 374
 1.942890837072470e+01, // 375
-2.036009942722862e+00, // 376
 2.188440973497444e-01, // 377
 8.710714336132632e+00, // 378
 1.851970744974552e+01, // 379
 1.761594054938450e-01, // 380
 2.709855852024500e+00, // 381
-1.403903949669795e-03, // 382
 1.929284951078765e-03, // 383
-2.597212621255119e+02, // 384
-2.204874708575818e-01, // 385
 1.658024741680859e-02, // 386
-5.183444455242493e+02, // 387
 1.561534267095112e+00, // 388
-1.610267824174856e-01, // 389
-9.006876427912026e+01, // 390
 5.879327954407614e-01, // 391
-2.392850524935263e+00, // 392
-2.805788303670193e-01, // 393
-2.857368635876901e-03, // 394
 3.566304325227107e-02, // 395
-3.387545425219224e+00, // 396
 6.395007389681180e-02, // 397
 2.542655960369722e-02, // 398
-2.638037137350926e+00, // 399
 9.387309483756730e-02, // 400
-1.521196982501367e+01, // 401
 2.171186446052390e-04, // 402
-6.059997861203546e-02, // 403
-3.900112873758184e-03, // 404
 4.821986057248125e-02, // 405
-1.195994599523931e+00, // 406
 9.512176592113574e-03, // 407
-1.024075013765944e+01, // 408
-5.242742233804687e-04, // 409
 3.188174556488157e+00, // 410
-2.168830062298348e+01, // 411
-1.351941610910161e-03, // 412
 7.678600038941462e+01, // 413
 3.766170279877631e+01, // 414
-2.021975549362762e-01, // 415
-6.390038585321349e-02, // 416
-7.727237343104103e+00, // 417
 7.109783735790157e+00, // 418
 6.686760030329445e-01, // 419
 1.633227418451861e-01, // 420
 1.247755165630902e+00, // 421
 3.780134529328136e-02, // 422
-1.037162823246894e-02, // 423
 2.741884762572843e-01, // 424
 1.046770383685069e-02, // 425
 3.228098789964905e-02, // 426
 5.383938669671359e-01, // 427
 9.972076600766774e-02  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         1.803764515766746e-01; // A^(-1)
    m_k_OH_intra =         2.455510243054397e-01; // A^(-1)
                           
    m_k_XH_coul =          5.727284246987321e-01; // A^(-1)
    m_k_XO_coul =          9.038929866178769e-01; // A^(-1)
                           
    m_k_XLp_main =         1.189917505825965e+00; // A^(-1)
                           
    m_d_HH_intra =         8.252943668845549e-01; // A^(-1)
    m_d_OH_intra =         1.407938223988861e+00; // A^(-1)
                           
    m_d_XH_coul =          6.932117128509505e+00; // A^(-1)
    m_d_XO_coul =          6.999995351241084e+00; // A^(-1)
                           
    m_d_XLp_main =         5.017651792439485e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_cl_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_cutoff(double* r)
#else
void mbnrg_2b_h2o_cl_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
