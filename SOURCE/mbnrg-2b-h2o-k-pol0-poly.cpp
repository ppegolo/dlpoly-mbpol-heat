#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
 1.144853645073063e+02, // 0
-2.072076985510455e+02, // 1
 6.406253625171095e+01, // 2
 8.339012587191830e+01, // 3
 5.153889427856749e+01, // 4
 6.571124879075010e+01, // 5
 2.388406456078750e+02, // 6
-1.951417614329877e+02, // 7
-2.669610194748803e+02, // 8
-7.658615300406912e+01, // 9
-2.115174080839712e+02, // 10
 1.712664909940032e+02, // 11
-2.768141434055378e+02, // 12
-1.705952454281095e+01, // 13
-6.217872341314598e+01, // 14
-2.421519371645640e+02, // 15
 6.946845395595233e+02, // 16
 7.881077817056918e+01, // 17
-2.122723015126537e+02, // 18
 2.305659973985999e+02, // 19
 1.986399965162816e+01, // 20
 2.161770869937291e+02, // 21
-1.229456602566830e+02, // 22
-9.437114424108336e+01, // 23
 3.816791533228010e+02, // 24
 6.354433812736799e+01, // 25
-3.382010754778230e+02, // 26
-1.204120086850917e+02, // 27
 2.251500248730911e+02, // 28
 8.744620259811983e+02, // 29
-1.829591028170038e+02, // 30
 2.340069773664014e+00, // 31
-3.078424600624879e+01, // 32
-9.915763732269247e+02, // 33
 2.624629733341629e+02, // 34
 8.642777115075893e+00, // 35
-3.367696265438403e+02, // 36
-7.638649724664594e+01, // 37
 7.705375554331833e+01, // 38
-4.955342546102224e+01, // 39
 7.090989018429545e+01, // 40
 1.945905624025651e+02, // 41
-6.779268832166531e+01, // 42
 7.010980709335448e+02, // 43
-2.903433078063517e+02, // 44
 9.053537351558806e+01, // 45
-7.863490801467918e+01, // 46
 1.259228038750585e+02, // 47
-5.235196222061060e+02, // 48
-1.395693821865034e+02, // 49
-5.544550987068355e+00, // 50
 2.506633287927401e+02, // 51
-5.592961988631553e+01, // 52
-3.451815985352807e+02, // 53
 3.086691456133846e+02, // 54
-6.215428419834114e+02, // 55
 5.487884230198591e+01, // 56
-2.390919441154361e+02, // 57
 2.465890321319937e+02, // 58
 1.655501662995662e+02, // 59
-1.376919438961397e+02, // 60
 3.341039679383766e+02, // 61
 4.478434187217152e+02, // 62
 2.027765555376018e+02, // 63
-2.870403755380740e-01, // 64
-4.764376577850512e+02, // 65
-2.997134424769944e+01, // 66
-1.400534170831888e+02, // 67
-5.133130382012376e+00, // 68
 1.741670650961778e+01, // 69
-1.011193135821342e+02, // 70
-1.419198970061533e+01, // 71
 1.742908483178637e+02, // 72
 1.978181396405363e+02, // 73
 2.433997265585387e+01, // 74
 7.198647724344280e+02, // 75
-3.287465759007969e+01, // 76
 2.550906276533455e+02, // 77
-1.032714365560867e+02, // 78
 1.046991331134901e+03, // 79
 5.209669273090245e+02, // 80
-9.228972483303116e+01, // 81
-4.511763782961023e+01, // 82
-1.501892797964811e+02, // 83
 2.154338893847641e+02, // 84
-1.576506991849344e+02, // 85
 1.082379788519491e+02, // 86
 1.873512277295097e+02, // 87
 6.605416931867136e-02, // 88
 2.324529128765698e+02, // 89
-5.604811957088328e+02, // 90
 1.145296511708234e+02, // 91
-1.874613295156084e+02, // 92
-1.646794203406632e+01, // 93
 1.306788039639723e+02, // 94
-5.227307953609514e+02, // 95
 1.147710338840350e+02, // 96
 2.742764178906655e+01, // 97
-1.463540194440768e+02, // 98
 9.989027215094937e+01, // 99
-2.501366682763513e+02, // 100
-2.170230760302773e+01, // 101
-9.377663480471213e+01, // 102
-2.495015923133873e+01, // 103
-1.220512721657978e+02, // 104
 1.241568123706412e+02, // 105
-3.034760208247702e+02, // 106
 7.365826582276327e+01, // 107
-5.178520813911542e+02, // 108
-1.350419942557265e+01, // 109
-1.306419380007474e+02, // 110
 1.976089679348606e+02, // 111
-1.762718670719767e+02, // 112
 1.701684281671804e+01, // 113
-2.125854366687552e+02, // 114
 2.238180599116128e+01, // 115
-9.598649525485084e+01, // 116
 1.135851871041582e+02, // 117
 2.457768826539458e+02, // 118
-2.414740313222645e+01, // 119
 8.286112965428575e+00, // 120
 3.093308338011778e+02, // 121
-2.686683285955599e+01, // 122
-6.875092158774673e+01, // 123
 9.094698212549112e+00, // 124
-6.606428350043138e+00, // 125
 3.571070882870556e+01, // 126
-6.063356531471752e+01, // 127
 3.571614712740198e+01, // 128
-6.056757285345032e+01, // 129
-1.961066033916862e+01, // 130
 1.434886273383157e+02, // 131
-2.821916633033243e+00, // 132
-4.163914724700154e+02, // 133
-1.553920626093560e+01, // 134
 5.788634142054593e+02, // 135
 1.482435156209582e+02, // 136
-3.033998634851712e+02, // 137
-2.598601945493983e+02, // 138
-5.678860213391063e+02, // 139
 7.766716394960176e+01, // 140
 7.615381203997230e+00, // 141
 1.128312360124567e+02, // 142
 1.127491592476723e+02, // 143
 2.687710074219149e+00, // 144
 2.115091803821306e+01, // 145
-1.138828932665851e+02, // 146
-6.452911444368088e+01, // 147
-7.442664438626848e+01, // 148
 2.579869515145103e+02, // 149
 2.685813487847844e+01, // 150
-4.243106214327997e-01, // 151
 5.048851104183134e+01, // 152
 1.836296383882379e+02, // 153
 1.628649296808293e+01, // 154
 2.840699175984786e+01, // 155
-2.220000845470772e+02, // 156
-2.294960068340092e+02, // 157
-1.116711889940079e+02, // 158
-2.495424288189729e+02, // 159
-1.216270810942878e+01, // 160
 2.320194182729589e+02, // 161
 7.287889339075734e+01, // 162
-1.372251921665647e+02, // 163
 1.851597466434773e+02, // 164
 2.164162512429573e+02, // 165
 6.608336061668066e+01, // 166
 2.545438485025712e+01, // 167
 2.178075812644634e+02, // 168
 8.876390487963395e+02, // 169
-3.346229112801921e+02, // 170
-3.414047239158136e+02, // 171
-4.763780568337299e+02, // 172
-1.169869291336266e+02, // 173
 4.111799101006794e+00, // 174
-2.567762875934939e+02, // 175
-1.301439080582609e+02, // 176
 4.191660155958945e+01, // 177
 2.112788178064474e+02, // 178
 6.388552437891676e+01, // 179
 7.173071424851909e+01, // 180
-3.874719509110282e+02, // 181
-2.329053483616730e-01, // 182
-5.008692194281247e+02, // 183
-1.400840451535431e+01, // 184
-1.818193130377047e+03, // 185
-2.273581303277485e+01, // 186
 1.054754318257490e+02, // 187
 4.799500874978555e+01, // 188
 2.355591454209178e+00, // 189
 1.749638699874591e+02, // 190
-5.583839622374786e+01, // 191
-8.039173189956512e+01, // 192
-4.767385911060142e+00, // 193
-6.299334313524191e+01, // 194
 3.123711317395358e+01, // 195
-1.245686240480722e+00, // 196
 6.560338091444175e+02, // 197
 1.099670321871415e+02, // 198
 4.527651733385397e+01, // 199
 5.723531829628607e+02, // 200
 2.500136615846784e+01, // 201
 6.554407388999179e+01, // 202
-8.595683437820194e-02, // 203
 3.984576319043237e+01, // 204
 3.742208981718856e+00, // 205
-2.325692412030898e+02, // 206
-3.649408701544439e+01, // 207
 7.660021165567453e+00, // 208
-1.550683227001562e+02, // 209
 3.663119601823770e+00, // 210
 9.640626546012431e-01, // 211
 1.270887133843604e+03, // 212
 2.082928367872796e+01, // 213
 3.463898008602332e+01, // 214
-6.046103810121678e-01, // 215
-1.452792893247621e+01, // 216
-1.858121246153324e+02, // 217
 6.590949456034761e+01, // 218
 2.914479169338268e+01, // 219
 1.591722440298021e+02, // 220
-2.715834379425466e+01, // 221
 5.710614882981159e+01, // 222
-2.073379797620185e+01, // 223
-2.939141022246546e+01, // 224
 2.516888541136555e+02, // 225
 4.149634640873135e+01, // 226
 1.476869247360122e+00, // 227
-2.017992934312003e+00, // 228
-9.201908374824592e+01, // 229
 2.579777490220481e+01, // 230
 1.200717625938926e+02, // 231
 7.652693732962973e+01, // 232
-9.239568787849555e+00, // 233
-1.974544856196737e+02, // 234
 2.560434115041219e+01, // 235
-6.945289243012704e+00, // 236
-5.431708785795620e-01, // 237
-9.524290033491514e+00, // 238
 1.267259822047103e+01, // 239
 3.610337795957949e+02, // 240
 4.934342236785001e+01, // 241
-1.921798195854259e+01, // 242
-5.749626110701719e+02, // 243
 1.047397137435389e+02, // 244
 1.636887508449442e+00, // 245
 6.898111890556526e+00, // 246
-5.287395974474966e+01, // 247
-1.064276889158359e+01, // 248
 2.263551509275472e+00, // 249
-2.551730698049583e+01, // 250
-1.202749207363627e+00, // 251
 1.557895877904439e+02, // 252
 1.330002548372079e+02, // 253
 1.973812715231281e+02, // 254
-2.055779127375159e+00, // 255
-2.177735300015670e+01, // 256
 1.583472791178951e+02, // 257
 1.523305231795738e-01, // 258
-1.013967711256100e+02, // 259
-7.930740976003344e+01, // 260
-5.528054629439399e+01, // 261
-6.674085351104456e+00, // 262
-1.035420580715868e+01, // 263
-2.078717819324847e+01, // 264
 1.966393232315251e+02, // 265
-1.190470953701545e+02, // 266
-1.063873562522680e+02, // 267
 8.286837351910373e+00, // 268
-1.447291030632261e-01, // 269
 4.727315391707196e+01, // 270
-8.428542094305989e-01, // 271
-5.739700102780199e+01, // 272
 7.133952828999243e-02, // 273
 4.641934274335769e+00, // 274
-2.348458330850304e+00, // 275
-1.041632523209858e+03, // 276
-5.245812832374808e-02, // 277
 1.492090281384214e+02, // 278
-2.216001118351066e+02, // 279
-4.222302497362138e+02, // 280
 1.161954709897922e+02, // 281
 5.628145119629370e+02, // 282
 1.155237195808693e+01, // 283
 4.242724632680884e+02, // 284
-4.518440845074149e-01, // 285
 5.385425498309845e+00, // 286
-7.420772471794156e+01, // 287
-4.725402702612225e+00, // 288
 1.382153292329881e+02, // 289
 2.654535967516736e+01, // 290
 2.890793081361450e+00, // 291
-1.410231053669496e+00, // 292
 4.884508404943833e-01, // 293
-6.178174974164365e+01, // 294
-1.085268770564748e+03, // 295
-3.931204786325399e+01, // 296
 2.065364481931533e+02, // 297
 2.304659765319695e+01, // 298
 5.094352961881531e+00, // 299
-1.519507196778269e+01, // 300
-1.072969816382855e+02, // 301
 1.428702761555761e+02, // 302
 2.146176965378381e+01, // 303
-2.621173790966379e+01, // 304
 8.340684848758709e+00, // 305
-1.619462468902024e+02, // 306
-7.884784533247368e+00, // 307
 5.532734129753924e+02, // 308
-1.225945636552953e+01, // 309
-1.870008293748994e+01, // 310
-4.006661208281964e-02, // 311
 9.501243410771366e-01, // 312
-1.316760213878526e+02, // 313
 4.720705770928245e-01, // 314
-2.291210301237862e+01, // 315
 7.145820319627870e+00, // 316
-4.024265071846155e+00, // 317
 1.539521075114725e+02, // 318
-4.339233753883575e+02, // 319
 2.888603194010455e+01, // 320
 2.314207523567095e+00, // 321
-5.860266468960747e+01, // 322
 7.451166102747058e-01, // 323
 2.098435669767728e+02, // 324
 7.775171175459560e-01, // 325
-3.002553416116555e+01, // 326
 2.627021275298433e+01, // 327
-2.551546343099239e+02, // 328
 6.094612403041183e+00, // 329
 2.531921303297352e-01, // 330
-5.720616841853845e+01, // 331
-2.503231794314115e+01, // 332
 3.145299949370525e-01, // 333
 1.295211533458487e+02, // 334
-3.004210535477775e+01, // 335
-1.518881454602383e+01, // 336
-1.410200285834118e+00, // 337
-2.403652730282964e+01, // 338
-1.701183186590044e+00, // 339
-2.563742642596286e+00, // 340
 4.472094981223150e+01, // 341
 1.429241892669447e+01, // 342
 1.293741428256602e+00, // 343
-3.701487170793909e+01, // 344
 5.574557147333935e+00, // 345
-1.235483255994418e+01, // 346
-9.179681627494908e+01, // 347
 1.196773012068698e+02, // 348
-8.577963973516724e+00, // 349
-7.865182921833006e+00, // 350
 1.811178601997145e+01, // 351
 9.558379815444647e+01, // 352
-7.559833665277750e+00, // 353
-7.351205250183133e+01, // 354
-6.078326447309907e+01, // 355
-8.458965809814704e+01, // 356
 3.913071353042448e+01, // 357
 9.736715057226861e+01, // 358
-6.981866765185841e-01, // 359
-1.006045783526261e+01, // 360
-5.034427281843803e+00, // 361
 1.864992335667220e+01, // 362
 9.733054504788605e+00, // 363
-4.002079382267370e+01, // 364
 5.957171925731013e+00, // 365
 9.414107777688489e+00, // 366
-1.608513193479651e+02, // 367
-4.132306787776773e+02, // 368
 2.312881869462577e+02, // 369
-1.549366855297550e+01, // 370
 1.367043151042364e+02, // 371
 5.127797237183606e+01, // 372
-3.074745983609798e+01, // 373
-7.297376712455558e+01, // 374
-4.426945261721985e+02, // 375
-1.176578292320751e+02, // 376
-2.761918201689355e+01, // 377
-1.190541576116668e+01, // 378
-2.853732456885407e+01, // 379
-3.744635606445519e+02, // 380
-2.559275464734878e+02, // 381
 8.707551182536834e+01, // 382
 2.168669638518838e+02, // 383
 4.813217416950984e+01, // 384
-7.800519361330767e+01, // 385
-5.334646266902226e+00, // 386
 9.216981690821201e+01, // 387
-4.868655795699621e+01, // 388
 3.687046520984754e+01, // 389
 5.479633194884656e+01, // 390
-1.699736303503041e+02, // 391
-8.567749511513489e+01, // 392
-1.652352916278092e+00, // 393
-4.491289881935738e+02, // 394
 1.045409434120683e+01, // 395
-1.313944106079359e+01, // 396
-6.265542140566908e+01, // 397
 2.561493380667266e+01, // 398
 6.807617435267046e+01, // 399
 7.334057907600999e+01, // 400
 1.770434336722003e+01, // 401
 4.110950361469285e+00, // 402
 6.954263769162779e+00, // 403
-1.203853853421167e-01, // 404
 1.245513337843500e+00, // 405
-1.573521523419457e+01, // 406
 6.465899120073094e+02, // 407
 4.559524496448911e+00, // 408
-2.363009701154881e+00, // 409
-3.243544096768657e+00, // 410
 1.556721241546853e+01, // 411
 1.480184976747628e-01, // 412
-2.587427381870068e+01, // 413
-4.890041332247296e+01, // 414
-5.614354376249663e+01, // 415
 7.588913276751786e+01, // 416
 5.422941302269974e+02, // 417
 4.215972721914644e+02, // 418
 2.055693422576361e+02, // 419
-2.988583371781666e+02, // 420
-6.799859141645066e-01, // 421
-1.219185481805986e-01, // 422
-8.841170804336866e+01, // 423
-2.351112371466598e+00, // 424
 2.730327099404715e-02, // 425
 2.350709582925190e-01, // 426
 4.066979337433337e+02, // 427
 1.766845797223434e+02 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.025035915137654e-01; // A^(-1)
    m_k_OH_intra =         1.998354429347322e+00; // A^(-1)
                           
    m_k_XH_coul =          1.447148012162932e-01; // A^(-1)
    m_k_XO_coul =          6.116408036508041e-01; // A^(-1)
                           
    m_k_XLp_main =         9.216419402764289e-01; // A^(-1)
                           
    m_d_HH_intra =         4.611127115002284e-01; // A^(-1)
    m_d_OH_intra =         7.147480266561187e-01; // A^(-1)
                           
    m_d_XH_coul =          6.999999120762356e+00; // A^(-1)
    m_d_XO_coul =          6.999998266360070e+00; // A^(-1)
                           
    m_d_XLp_main =         4.509204559215887e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_k_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_k_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_k_cutoff(double* r)
#else
void mbnrg_2b_h2o_k_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
