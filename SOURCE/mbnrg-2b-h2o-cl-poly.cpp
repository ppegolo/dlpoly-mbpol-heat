#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
-1.213275189452985e+02, // 0
-1.118160284048774e+03, // 1
 3.525922579836974e+02, // 2
 2.828936362230684e+02, // 3
 2.971486123778448e+01, // 4
 2.970027891511959e+02, // 5
 1.526386240434028e+03, // 6
-1.295378149180578e+02, // 7
 2.923847641507137e+02, // 8
-4.415633534906413e+02, // 9
 5.184867912535749e+01, // 10
 5.232066871548006e+00, // 11
-8.225062075842750e+01, // 12
-9.873080301316065e+01, // 13
 6.241440270776572e+01, // 14
 1.059997470595643e+02, // 15
-4.091806615531528e+02, // 16
 3.607252646159001e+02, // 17
 1.030022629882767e+02, // 18
 3.922318835712296e+02, // 19
 2.028440815093618e+02, // 20
 1.145378038858878e+02, // 21
 8.244263109041363e+01, // 22
 1.054560837597715e-01, // 23
-3.018019939349653e+00, // 24
 1.186690349654260e+02, // 25
-9.091735555563612e+01, // 26
 4.524415339873223e+01, // 27
-4.452310644686154e+02, // 28
 1.209876019412710e+01, // 29
 7.949013636374661e+01, // 30
-1.449179721152537e+02, // 31
 6.981642386765184e+00, // 32
 6.059843776147082e+00, // 33
-1.131730612689716e+03, // 34
 2.433994087946003e+02, // 35
-1.113791665169927e+00, // 36
-4.860707814296529e+02, // 37
 1.247456977045996e+02, // 38
-4.094422500216838e+02, // 39
-6.214453499030519e+02, // 40
 1.207317656249204e+01, // 41
 7.665011536725046e-02, // 42
-2.767680847279668e+00, // 43
-4.284321061247302e+01, // 44
-2.853639967792526e+02, // 45
-8.985283847606460e+01, // 46
 2.396805586904315e+02, // 47
-3.388816134443234e+01, // 48
 3.844254389480677e+01, // 49
-2.677897301762795e+01, // 50
 6.326763515312860e-01, // 51
-1.025536243001052e+02, // 52
-3.623925289718248e+02, // 53
-3.749352060788798e+02, // 54
 7.032350121252028e+02, // 55
-1.445273779617198e+00, // 56
 3.590862336206660e+02, // 57
-3.138806343334522e+02, // 58
-1.530569545628964e+02, // 59
-4.387789317099860e+00, // 60
 1.140475741265978e+02, // 61
 1.057293082853182e+00, // 62
-2.837420984550502e+01, // 63
 1.092371494085200e+02, // 64
-1.734261042492798e+02, // 65
 6.894169716902550e+01, // 66
 3.888543788562547e+01, // 67
 3.504336050076495e+02, // 68
 1.944619144643531e-01, // 69
 1.094708489260700e+00, // 70
 1.296149299900696e+00, // 71
-2.526247616593042e+00, // 72
-8.660177387038334e+01, // 73
 8.218482898756237e+00, // 74
-1.969454639600899e+00, // 75
-6.279790099811805e+01, // 76
 2.535931538365727e+01, // 77
-6.067201857535711e+01, // 78
 2.985298074661809e+01, // 79
-6.296370259035580e-02, // 80
-3.277679031389237e+00, // 81
 1.334565118256465e+00, // 82
-6.600468621416142e-03, // 83
-3.337660139933697e-01, // 84
-5.793603010579017e-02, // 85
 3.850396772924217e+02, // 86
 2.672125494001944e+01, // 87
 1.999793739782799e+01, // 88
 1.226548905079422e+01, // 89
 2.140054601915416e+00, // 90
-5.125235529156496e+01, // 91
 2.877313974997489e-02, // 92
-5.600634257487403e+02, // 93
 1.731229853479624e+02, // 94
 4.346550867894946e+02, // 95
-4.528605943578842e+01, // 96
 2.521009151637412e+01, // 97
-3.659948863064541e+02, // 98
-5.655616109756402e+01, // 99
-1.385132731144267e+00, // 100
 9.171134488727287e-02, // 101
-1.056308693526266e+01, // 102
 1.363487877570211e+02, // 103
-6.495363597803494e+01, // 104
-4.739760510263577e+01, // 105
 2.234993605096952e-01, // 106
-3.774214986854198e+02, // 107
-2.250282536408986e+02, // 108
-2.999782747249010e+01, // 109
 1.209952910211283e+00, // 110
 1.612813979174300e+01, // 111
 1.623799033581630e-01, // 112
 6.886950233521683e-04, // 113
-2.400290306965800e+00, // 114
 3.635804759139733e+01, // 115
-9.976398639749071e+00, // 116
 2.226641802717748e+02, // 117
-3.370247291628494e+01, // 118
-1.023977735303166e-02, // 119
-7.398831194955463e+01, // 120
 4.992364228932719e+01, // 121
 1.777972609702335e-03, // 122
 3.164035677116179e+02, // 123
 3.071310633307010e+02, // 124
 3.005216316260334e+00, // 125
-1.015611780208508e+01, // 126
-5.831073226832852e+02, // 127
 2.126657540095672e+01, // 128
-4.812277069763678e+00, // 129
 1.918546685461926e+00, // 130
-1.877120616388295e+02, // 131
-5.126194923006104e+01, // 132
-1.157922238279683e+02, // 133
-1.916697572094463e+00, // 134
-1.158096984511842e-01, // 135
 1.537744650690582e+00, // 136
 6.018307556286495e+00, // 137
-3.074411352892115e+01, // 138
 1.201693318194481e+01, // 139
 4.403015480318916e-02, // 140
-4.630900842804854e+01, // 141
-9.189108387028464e-01, // 142
-4.401091243819532e+02, // 143
 2.030900901921112e+02, // 144
-2.575379834084981e-01, // 145
 6.015475633626155e+01, // 146
-1.535170905374004e+01, // 147
 1.749920036551190e+02, // 148
-5.927294800314360e-01, // 149
 6.596141753728782e+01, // 150
 1.049101628966031e+01, // 151
 6.744246249978580e+00, // 152
-3.745565654949048e-02, // 153
-1.399521359106580e-04, // 154
 6.324867798394135e+00, // 155
 9.002809781580239e+02, // 156
 5.005620871955954e+01, // 157
 1.759748208615365e-03, // 158
 5.657917193104231e+00, // 159
-1.895223347348559e+00, // 160
-3.184906752682908e-02, // 161
-2.136181470687512e+01, // 162
 1.022002214276303e+02, // 163
 8.648018160858416e+01, // 164
 1.162845707246627e+00, // 165
 4.386764319727787e+02, // 166
 4.413955846274640e-01, // 167
-1.893425101611189e-01, // 168
-6.646787368224456e+01, // 169
-2.484316491122076e+00, // 170
-3.807747420440510e-01, // 171
 2.073722444512775e+01, // 172
 1.457421309198965e+00, // 173
-5.893877130851261e+01, // 174
 2.427513703908760e+01, // 175
-1.416298676351672e+00, // 176
-1.138122070913233e+00, // 177
-4.797069212106321e+00, // 178
 8.583991716447494e-01, // 179
-6.182108982265773e-02, // 180
 1.348355685956670e+02, // 181
 7.348225729557323e+01, // 182
 7.743630367806057e-01, // 183
 6.409065897140002e+02, // 184
-3.582626638692880e-02, // 185
 3.608494874660716e-03, // 186
 2.278274212336357e+01, // 187
-1.648908668379817e-02, // 188
-9.572355693112697e-02, // 189
-3.869590030952720e+00, // 190
-5.152372254025267e+02, // 191
 1.105242505026893e-02, // 192
-6.010738051652852e-01, // 193
-3.785941890991218e+01, // 194
-7.147487195203700e-01, // 195
 4.304315858251177e-02, // 196
 6.915501972103680e-01, // 197
-3.128418886338600e+02, // 198
-3.196538562734165e-01, // 199
-1.778677215526478e+01, // 200
 1.197172190022849e-03, // 201
 6.053878291671209e-02, // 202
 3.608383674451029e+01, // 203
 5.634728784896226e+00, // 204
 1.025760880962874e+02, // 205
-2.306323660542649e+01, // 206
 1.169760205857184e-01, // 207
-3.942929252611729e+01, // 208
-9.828444873884132e+01, // 209
 7.168204717949461e-05, // 210
-2.181319077666324e-03, // 211
 4.981323528835593e-02, // 212
-1.384828993311581e-03, // 213
 2.121386719858711e+00, // 214
 7.146945040323169e-01, // 215
 3.111595068828131e+01, // 216
-1.846889941414654e+00, // 217
-1.793147214572176e+01, // 218
-2.941135226821349e-02, // 219
 1.634881602444158e-02, // 220
 2.151253994076952e-02, // 221
 3.121915174522653e-01, // 222
-6.330796821582473e-02, // 223
-8.844246802372023e-03, // 224
-1.048613504259186e+02, // 225
 4.700700019693128e-03, // 226
 1.816729423852155e-04, // 227
 2.992852015977879e-01, // 228
-7.943393074589502e-01, // 229
 1.282176454715909e+00, // 230
 1.411669033714360e+00, // 231
 1.051232593365718e+01, // 232
-2.871076970197931e-02, // 233
-2.634330626633472e-01, // 234
-1.665551678206570e+00, // 235
-3.174153616614304e-01, // 236
-3.088162810211810e+01, // 237
 2.247947133351911e+00, // 238
-2.363632882773803e+02, // 239
-7.089376264276747e+01, // 240
-4.909412344656328e-01, // 241
 2.081914277182148e-02, // 242
 1.403379414224928e+00, // 243
-4.536313035093251e-04, // 244
-1.440412969528986e-03, // 245
 6.367163392404995e-01, // 246
 6.346451268967566e-03, // 247
-1.045334757417313e+00, // 248
 1.368353245421169e-02, // 249
-2.565006852222799e-01, // 250
-6.659791196700175e+00, // 251
 3.523296223293534e+00, // 252
 1.630770978109795e-01, // 253
 1.773876322428569e+02, // 254
 4.331568043869294e+00, // 255
 5.376308351728843e-01, // 256
 1.170066576246622e+02, // 257
-1.499116821905839e-03, // 258
 1.249686695343752e+01, // 259
 1.793434502431058e+02, // 260
 4.558721930833615e-02, // 261
-6.116446804658551e-02, // 262
 4.130590587950280e+00, // 263
-4.270274305996783e+00, // 264
-1.873435386815300e-01, // 265
 1.404913030493632e-02, // 266
-8.940057362089345e+00, // 267
-4.092544798267562e-03, // 268
 2.694068099293102e-05, // 269
 5.223427707370274e-01, // 270
 2.315490219694641e-02, // 271
 1.409893951564290e+02, // 272
 4.084724008653497e+01, // 273
-1.276167018346733e+00, // 274
 8.494154334539874e-03, // 275
-3.043516519891354e+01, // 276
-2.868906161191874e-06, // 277
-1.410539197052878e+00, // 278
 2.523022799395005e+00, // 279
 1.211247501082427e-02, // 280
 2.003151595928466e-01, // 281
-6.963054775000452e+00, // 282
-4.248773315694292e+01, // 283
-5.051311949779039e-03, // 284
 1.404265791787911e-01, // 285
 1.007749253619637e+01, // 286
-1.853878286951150e-04, // 287
-6.243915225652871e-02, // 288
-1.557065928529261e-02, // 289
 1.704210522405285e-03, // 290
 2.356177670799940e-01, // 291
-1.773994246945589e+00, // 292
-2.502102502331351e-01, // 293
-2.441165326338851e+02, // 294
-1.827361777448770e-01, // 295
 1.970516331824617e-01, // 296
 1.192514659416770e+01, // 297
 8.467155943780437e-04, // 298
 3.152448205447040e-03, // 299
 7.035447863221004e+00, // 300
-1.100210472119195e+01, // 301
 1.343176675052389e-03, // 302
-1.349794473873408e-01, // 303
 1.423083138092808e-03, // 304
 3.883504028363033e+01, // 305
 4.709140045055655e+01, // 306
-5.699895541389895e-04, // 307
 4.975852115906778e+01, // 308
 1.109430243421813e-03, // 309
 1.476314870869098e+01, // 310
 1.173419044215034e+00, // 311
 2.656427413709496e-01, // 312
-1.321371474094565e+01, // 313
-9.245370532413507e-03, // 314
 3.957902301499796e+00, // 315
-5.529362512404325e-03, // 316
-1.520995832552805e+01, // 317
 1.359231282407124e-02, // 318
 1.896399660745249e-01, // 319
-3.103114589474805e-01, // 320
-2.318225660597006e+01, // 321
 3.322195088369405e-01, // 322
-2.692687138236592e-01, // 323
 1.061496134904995e+01, // 324
 1.195980148683762e+01, // 325
-2.597452682015030e+00, // 326
 7.463273445461040e+00, // 327
-4.251845465932599e-01, // 328
-1.124675666090290e-01, // 329
-2.346386808174865e-05, // 330
-2.729150760291820e+01, // 331
-5.585897712983535e+00, // 332
-5.324567175661058e+01, // 333
 4.579043196680578e-01, // 334
-1.331969912565817e-04, // 335
 8.470360782589117e-01, // 336
-8.662508648684876e-03, // 337
-3.841720839187799e+00, // 338
-5.629856853399959e+01, // 339
-2.844083035375519e-02, // 340
-2.179954649386331e-01, // 341
-5.385161313065324e-01, // 342
-2.267104675533989e+00, // 343
 7.145103970485412e-03, // 344
-5.464829753907896e+01, // 345
-1.031130231888904e-01, // 346
-2.340222776957553e-02, // 347
 5.526738649402217e+02, // 348
 1.017179372721684e-02, // 349
 1.113909801157525e-01, // 350
 2.784470861508842e-01, // 351
 1.802923175800649e+01, // 352
 8.759075152766206e-03, // 353
 4.873291508502101e-04, // 354
-2.803824067805570e+01, // 355
 1.504548631176512e+01, // 356
 4.020372886801473e-03, // 357
 1.344810141766713e+01, // 358
 3.381998679739401e-01, // 359
 1.119057625968090e-02, // 360
 2.028191290391623e-04, // 361
-3.960519484946738e-01, // 362
 1.572612609188630e+01, // 363
-1.780174164565061e-02, // 364
 4.917324591577632e+01, // 365
-6.849115315852706e-04, // 366
-2.446170930525860e+00, // 367
 3.220821594150034e-01, // 368
-5.180440657451790e-02, // 369
-2.102776935170500e-04, // 370
 1.851842762362000e+02, // 371
-6.579004688943011e-04, // 372
-6.162571904289732e-02, // 373
-4.412030602295421e-01, // 374
 1.472408915724894e+01, // 375
-8.292520466365229e-01, // 376
 1.371231383528444e+00, // 377
-2.809764024889943e+01, // 378
-7.109290034351650e-01, // 379
-1.405825683329436e-03, // 380
 2.855529416251836e-01, // 381
 1.860920123002451e-02, // 382
 6.034437087324264e-03, // 383
-1.051064504497787e+03, // 384
 9.148933197847912e-01, // 385
 9.537639886295593e-05, // 386
-5.687803977301503e+01, // 387
-3.443672061470469e+01, // 388
 1.107264509766954e+00, // 389
 7.404917505068681e-02, // 390
-2.294600725005332e+00, // 391
-5.969512448903133e-01, // 392
 4.219909749847776e-01, // 393
-9.915396721025141e-04, // 394
-4.205244169856188e-03, // 395
 8.333135922471348e-02, // 396
 1.012165406012121e-01, // 397
-6.559175060604063e+00, // 398
 2.144784449602638e-01, // 399
 8.073055257546302e-01, // 400
-1.988256924982718e+00, // 401
 5.449625903978485e-03, // 402
-7.843821543130435e-01, // 403
 7.956701664593836e-01, // 404
 1.011245103813191e+01, // 405
 1.848217384909883e-02, // 406
-2.770401372653029e-02, // 407
 1.496271251831527e-02, // 408
-7.150672649731686e-02, // 409
-1.201515910447429e+01, // 410
 9.170059600103553e+00, // 411
-8.850598463586981e-01, // 412
 4.863669935030433e+02, // 413
-6.966269615004228e+00, // 414
 9.518772642648323e-01, // 415
-1.239910131535204e-02, // 416
-6.849410475780478e-02, // 417
 2.639156502246352e+01, // 418
-1.415118740799886e-02, // 419
 7.067451704785904e-01, // 420
-8.528181234727158e-01, // 421
 3.187296211662763e-04, // 422
-3.838646876426303e-02, // 423
-1.511070646940219e-04, // 424
-8.678523398090745e-07, // 425
-1.120687925445938e-01, // 426
-1.278639633544975e+01, // 427
-1.597991258335122e+00  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.272729106453040e-01; // A^(-1)
    m_k_OH_intra =         3.089886945438406e-01; // A^(-1)
                           
    m_k_XH_coul =          5.016140397135324e-01; // A^(-1)
    m_k_XO_coul =          1.042688904082820e+00; // A^(-1)
                           
    m_k_XLp_main =         6.958952528591540e-01; // A^(-1)
                           
    m_d_HH_intra =         8.216014654693620e-01; // A^(-1)
    m_d_OH_intra =         1.403417369799049e+00; // A^(-1)
                           
    m_d_XH_coul =          6.997580629221812e+00; // A^(-1)
    m_d_XO_coul =          6.999182701439585e+00; // A^(-1)
                           
    m_d_XLp_main =         4.838598747625415e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_cl_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cl_cutoff(double* r)
#else
void mbnrg_2b_h2o_cl_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
