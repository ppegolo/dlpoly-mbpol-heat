#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
-2.490870459345890e+02, // 0
-2.104629940208503e+03, // 1
-1.136429159861982e+02, // 2
 5.770815973927216e+01, // 3
-3.359599102444788e+01, // 4
-2.353428608251856e+02, // 5
 2.375724656059722e+03, // 6
-9.440847109383756e+01, // 7
 8.122741487432709e+02, // 8
 1.170975709664686e+02, // 9
 3.715999757672589e+01, // 10
 2.491594169975062e+01, // 11
-3.813926554169573e+02, // 12
-4.844749450839009e+00, // 13
-1.389783204430268e+02, // 14
 3.949978296533256e+01, // 15
-7.333310810854032e+02, // 16
 6.691647220627174e+02, // 17
 2.775784663644038e+01, // 18
 1.597657054971291e+03, // 19
 1.226783315781172e+01, // 20
 9.437544966577256e+00, // 21
-3.464444811598084e+00, // 22
 1.573433360437856e+00, // 23
-1.546813082568811e+01, // 24
 4.458830782951696e+01, // 25
-7.274275533955564e+01, // 26
-1.186184222756133e+02, // 27
 6.413966861093158e+01, // 28
-3.194241682061838e+01, // 29
 5.262276508572639e+01, // 30
-4.029395346990124e+01, // 31
 3.406263889852405e+00, // 32
 2.969894593698146e+01, // 33
-1.466442015666204e+03, // 34
 1.694548583057655e+00, // 35
-8.095741006690942e-01, // 36
-8.489453636863885e+01, // 37
-9.822809540089429e+01, // 38
-5.536673506721598e+02, // 39
 1.032859617470469e+02, // 40
 4.078779834610255e+01, // 41
 1.359048664317803e-02, // 42
 8.720015229857238e-01, // 43
-2.472281549604270e+02, // 44
-4.891188971458271e+01, // 45
 1.024121541596299e+01, // 46
 1.218139893669101e+02, // 47
-2.292410912103874e+01, // 48
 7.205347028446019e+00, // 49
-3.208629312213902e+01, // 50
-6.723589153963332e+00, // 51
-1.249903254132307e+01, // 52
-7.033889127049670e+02, // 53
 6.680994840163520e+02, // 54
 2.527674637447890e+03, // 55
-1.870587475379239e+00, // 56
 1.533691224068276e+02, // 57
-3.568005650981331e+02, // 58
-4.277597132162157e+02, // 59
-1.262710473768809e+01, // 60
-1.134897456662010e+03, // 61
 6.756662602930071e-01, // 62
-3.194977075446003e+01, // 63
 4.074707760516029e+01, // 64
-1.313524619725116e+02, // 65
 7.607906199739959e+01, // 66
 1.166704450886882e+01, // 67
 1.285281943418102e+01, // 68
-4.924890418245743e-02, // 69
 1.087202179155459e+00, // 70
-1.029879432311833e-01, // 71
 9.628437460926711e-01, // 72
-8.865832638704493e+00, // 73
-1.407324880785934e+01, // 74
 9.211925841600609e+00, // 75
-4.557173227972161e+00, // 76
 6.450567549145835e+01, // 77
-1.878773967434089e+01, // 78
 9.354141692412762e+00, // 79
-1.047808931652345e-01, // 80
 1.164698791920281e+01, // 81
-3.627302530693170e-02, // 82
-7.169490937050690e-03, // 83
-1.154288266136383e-01, // 84
-1.802551600186172e-03, // 85
 1.651624457061527e+02, // 86
-7.787101352844902e-01, // 87
 2.427066063411325e+02, // 88
 1.509274946642889e+00, // 89
 1.971803621212994e+00, // 90
-3.155743889068228e+01, // 91
 7.097166527849785e-02, // 92
-4.961890279408893e+02, // 93
 4.532531043057435e+01, // 94
 7.435078519438100e+02, // 95
-2.137150454631212e+01, // 96
-8.296460795268965e+01, // 97
 6.593162539350595e+01, // 98
-1.555597234270567e+01, // 99
 3.178762861508593e+00, // 100
 5.589984173395533e-02, // 101
-2.522530017562900e+00, // 102
 2.351992997152832e+01, // 103
-4.957581508780122e+01, // 104
-7.430550043766546e+00, // 105
-2.226720701178222e-01, // 106
-1.410527628957597e+01, // 107
-1.361287023544752e+02, // 108
-1.654080373983864e+01, // 109
 1.425742665053016e-01, // 110
 1.279158822735991e+01, // 111
-2.881783932131149e-01, // 112
 1.434010311335445e-02, // 113
-4.531165665844290e-01, // 114
 2.741344549548164e+01, // 115
-4.604681350039901e+00, // 116
 3.915831481744099e+01, // 117
-1.305675485985549e+01, // 118
-3.652790920373019e-01, // 119
 6.761648719861956e+00, // 120
 3.527377904967884e+01, // 121
 1.404861432875944e-03, // 122
-1.418887549123226e+01, // 123
 1.477708591173405e+00, // 124
 1.107844023186400e+00, // 125
 1.187101394786427e+00, // 126
-2.365346843627663e+02, // 127
 1.617672627729172e+01, // 128
-3.623941945291890e-01, // 129
 5.413448704849555e+00, // 130
-1.286464264341039e+02, // 131
-2.194866489775843e+01, // 132
-4.838679264686601e+01, // 133
 3.520759526165116e-01, // 134
-2.151300019205936e-02, // 135
 6.986738472101166e-01, // 136
 1.447085641587582e-02, // 137
-1.151510292610184e+01, // 138
-3.011175550965491e+01, // 139
 4.419263436888667e-03, // 140
-6.798798217830599e+00, // 141
-8.611084604739942e+00, // 142
-1.174688404468469e+03, // 143
 2.076080364384498e+01, // 144
-5.476581524777931e-02, // 145
 2.976076615846024e+00, // 146
-4.541320598578960e+00, // 147
 8.634166160630960e+01, // 148
-1.349008148992990e+00, // 149
 7.942838481210120e+00, // 150
 3.222549157056744e+00, // 151
-1.209547578742910e+00, // 152
-1.056910902395926e-01, // 153
-8.601633622282364e-04, // 154
-7.091499628831928e-01, // 155
 1.875365257863875e+03, // 156
 3.522083814449466e+01, // 157
 1.155726044665021e-02, // 158
 4.088352514053170e-01, // 159
-1.579274817422564e+00, // 160
-9.353683266033728e-03, // 161
-1.010094639453393e+01, // 162
 6.856259385290576e+01, // 163
 8.023387252048552e+01, // 164
 9.874373198418783e-01, // 165
 2.942330914949878e+01, // 166
 3.047211307964177e-01, // 167
 2.392714951171889e-01, // 168
-1.535370196454801e+00, // 169
-3.068823436841611e+00, // 170
 1.907519636012988e-01, // 171
 1.595156676930875e+01, // 172
-7.502269334841950e-01, // 173
-1.549286179665798e+01, // 174
 1.232814932468406e+01, // 175
 6.668904735663306e-01, // 176
 4.753680622378527e-01, // 177
 3.684069288478332e+00, // 178
 1.160609402592328e+00, // 179
-6.239352265367536e-02, // 180
-1.088773829879955e+03, // 181
 2.360543545388889e+01, // 182
 9.068579690140214e-01, // 183
 1.325257955534851e+02, // 184
-8.070950759837719e-04, // 185
 8.505696839438128e-03, // 186
 1.398457141836517e+01, // 187
-1.889873541360809e-03, // 188
-2.337905210402935e-02, // 189
-1.449373155472942e+01, // 190
-1.294705657066827e+00, // 191
-1.843461089675083e-03, // 192
 1.304559485504807e-01, // 193
-1.094385711377574e+01, // 194
-7.294511255096252e-02, // 195
 1.475920857522275e-02, // 196
 2.080474792885222e-01, // 197
 9.570839352144115e+01, // 198
-7.837337426653376e-02, // 199
-1.119396183046995e+01, // 200
 6.355264645131701e-04, // 201
 8.058084878919256e-02, // 202
 8.965745083347551e+00, // 203
 6.594666943845405e-01, // 204
 8.055319619241976e+00, // 205
-1.582197590108923e+01, // 206
 6.885394904380439e-03, // 207
 3.242625955957417e+01, // 208
-3.056640310550604e+01, // 209
-6.397572134193036e-05, // 210
-1.104564487826287e-03, // 211
-1.433053108244968e-03, // 212
-7.845889816976620e-04, // 213
-2.281196311717399e-01, // 214
 1.219579430850877e-01, // 215
 3.533096545196833e+00, // 216
-5.906778698138079e-01, // 217
-1.570057230398358e+00, // 218
 2.059190781604095e-03, // 219
-8.144399550018706e-04, // 220
 5.754866334794156e-03, // 221
 1.958645449148729e-01, // 222
 1.129687317284085e-01, // 223
 3.258832717255096e-03, // 224
-2.104567368932958e+02, // 225
-2.263570361343308e-03, // 226
-1.106811024092824e-05, // 227
-1.755974734044858e-02, // 228
 1.482094170042639e-01, // 229
 3.973698754132869e-01, // 230
 1.333173912072873e-01, // 231
 1.997752348520458e+00, // 232
 1.238768813870785e-03, // 233
-1.254030774353673e+00, // 234
-9.738673142670597e-02, // 235
-1.506364242095851e-01, // 236
-6.582147279269454e+00, // 237
 6.850323379589068e-01, // 238
 4.078190659073281e+00, // 239
-4.010259373793737e+00, // 240
-4.380504855952373e-02, // 241
 1.185828070347466e-03, // 242
-7.011451056454882e-03, // 243
-1.399961268865619e-04, // 244
 3.973378861619186e-04, // 245
 3.792422015795060e+00, // 246
-5.269234742936783e-04, // 247
-1.342907175988548e-02, // 248
-1.025863903084663e-03, // 249
-1.404831782896792e-02, // 250
-1.912428411602805e+00, // 251
 6.772128440325186e-01, // 252
 6.529161176363675e-02, // 253
 7.055604279505278e+01, // 254
-1.091017206606437e-01, // 255
 8.332685495811484e-02, // 256
 1.011424213246221e+01, // 257
-4.029992356417730e-04, // 258
 3.366620636550432e+01, // 259
-2.251151209875787e+01, // 260
 6.561235089050046e-02, // 261
 3.532139367894605e-02, // 262
 2.839730217100153e-01, // 263
-3.231556281356884e-01, // 264
 1.593398273168541e-02, // 265
 2.506720111941885e-03, // 266
-1.157466562723389e+00, // 267
 5.027782672706976e-03, // 268
 3.729449915918665e-05, // 269
-5.184108503469893e-02, // 270
 1.199835773345967e-03, // 271
 4.298502019548111e+01, // 272
 1.013074951372802e+01, // 273
-3.468511618606578e-01, // 274
 8.703518246899161e-03, // 275
-2.435177089943216e+01, // 276
 3.908586106023027e-05, // 277
-6.134309943871420e-01, // 278
 3.053662868652677e-01, // 279
-4.691902247444389e-04, // 280
-3.435771683846205e+00, // 281
 2.639126777342083e-01, // 282
-7.851401021999236e+00, // 283
 1.885472999112009e-02, // 284
-1.583048755368224e-02, // 285
 9.997255144176063e-01, // 286
-3.366208713094811e-03, // 287
-1.271981936100622e-01, // 288
-1.356852005795719e-03, // 289
 4.056366462139136e-03, // 290
-3.793611498463029e-02, // 291
-2.951203952248755e+00, // 292
 7.433985735887232e-02, // 293
-5.991783578273625e+01, // 294
-3.460006590861287e-02, // 295
-4.783778372383689e-02, // 296
 5.003709000566688e+00, // 297
 8.873414433867040e-05, // 298
-2.369424976859169e-03, // 299
 6.652447768587447e-01, // 300
-2.846188532981455e+01, // 301
 4.301315528415455e-05, // 302
-1.739165553966441e-01, // 303
 6.374941682832132e-04, // 304
 1.304768667231415e+01, // 305
 3.573304163942171e+01, // 306
-2.379498701581664e-05, // 307
 1.458061111214281e+01, // 308
 1.846039193711144e-05, // 309
 3.957569062357308e+00, // 310
 1.337683631114865e-01, // 311
 3.977653755146142e-01, // 312
-9.247967427720345e-01, // 313
-2.389371919144506e-03, // 314
-3.039115305729683e-01, // 315
 1.022739214038781e-04, // 316
-2.378987608789519e+00, // 317
-3.321642845699259e-04, // 318
-1.279117148306475e-02, // 319
 1.619261817074836e-01, // 320
 2.973843682263857e+00, // 321
 2.366805212895254e-02, // 322
-4.040348162023222e-02, // 323
 2.845037905427625e+01, // 324
 1.081599975032378e+00, // 325
-3.347570462569896e-01, // 326
 9.109240075221985e+00, // 327
 2.431474200752068e+00, // 328
-1.024040024786786e-02, // 329
-4.752577890184633e-04, // 330
 9.007490488054420e-01, // 331
-3.917947699652299e-03, // 332
-1.394287222813507e+01, // 333
 1.594363522102406e-02, // 334
 9.269065724871970e-05, // 335
 4.069752236317174e-02, // 336
 9.029570816162895e-05, // 337
-3.197753357749996e+00, // 338
-5.945083955543753e+00, // 339
 1.307350395917604e-02, // 340
-1.281266070655310e-02, // 341
 2.748659904371385e-02, // 342
 2.922289842856851e-02, // 343
 1.026289654079698e-03, // 344
-5.345429907283056e+00, // 345
 2.898651783353756e-04, // 346
 2.168786917006854e-02, // 347
 2.204389803655133e+00, // 348
-2.390255833151138e-02, // 349
 1.065414144254324e-02, // 350
-1.145437328915681e-01, // 351
 2.975482485693656e+00, // 352
-1.187812287449596e-02, // 353
 6.084643244476969e-04, // 354
-4.018115070728238e+01, // 355
 2.078655979184100e+00, // 356
-7.083332464517638e-04, // 357
 1.325777297007325e+00, // 358
-4.417956497957998e-02, // 359
 3.816144067533784e-02, // 360
-3.239976879864036e-04, // 361
-1.512287664839120e-02, // 362
 4.954426268476100e+00, // 363
-8.286195142986973e-03, // 364
-6.122377157892890e+00, // 365
 3.536627157525993e-03, // 366
-2.162680664731295e-01, // 367
-7.684209835752311e-02, // 368
-5.979677112171979e-03, // 369
 2.774507777820538e-04, // 370
 2.025924939551671e+01, // 371
 2.250439305881533e-04, // 372
 2.408542672014845e-03, // 373
-1.066240603404546e-01, // 374
 3.817711867128320e+00, // 375
-3.603434163888166e-01, // 376
 8.290410784665214e-02, // 377
-1.039360283010984e+01, // 378
 5.209091359104257e+00, // 379
-3.198332944292547e-03, // 380
 5.881802238061302e-01, // 381
 1.326108394153199e-03, // 382
 5.773512519434262e-04, // 383
-2.778853979095320e+02, // 384
 2.919426462253468e-02, // 385
-2.396773910902625e-04, // 386
-3.538379674376201e+01, // 387
-2.053686922127345e+00, // 388
 9.719288858942285e-02, // 389
 5.624406124441554e-01, // 390
-1.340173693082517e-01, // 391
-1.524100593368778e-01, // 392
 3.557854296227154e-02, // 393
-1.428683420943137e-04, // 394
-1.249348948008428e-02, // 395
-4.958929367957091e-02, // 396
-2.893038105647424e-02, // 397
 1.856006261573638e-01, // 398
-3.083479274944469e-01, // 399
 1.511660694416929e-01, // 400
-6.759665607494405e+00, // 401
 9.421682428853624e-05, // 402
-7.727924365738624e-02, // 403
-1.657955357270178e-01, // 404
 1.575192654332215e+00, // 405
-2.080450506530382e-02, // 406
 3.661750128246723e-03, // 407
 6.480848911877775e-03, // 408
 3.981435873707804e-03, // 409
 8.899119061327820e+00, // 410
 5.765285190991479e+00, // 411
 4.298089770635950e-02, // 412
 4.229413166113792e+02, // 413
-9.350282482361337e+00, // 414
-4.042960344424308e-02, // 415
-2.397744541547076e-04, // 416
 5.676230663278382e-02, // 417
 8.447300318949734e+00, // 418
 1.509557391158691e-03, // 419
-4.090543304797777e-01, // 420
-9.090192080854882e-02, // 421
 3.062019604668823e-04, // 422
-3.744438139259110e-03, // 423
 1.786086055269915e-04, // 424
-1.935341255239378e-06, // 425
-9.671710662569402e-02, // 426
-1.681928799258067e+00, // 427
-1.484355430498533e-01  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.549193000769483e-01; // A^(-1)
    m_k_OH_intra =         3.211742382689562e-01; // A^(-1)
                           
    m_k_XH_coul =          7.767516022416914e-01; // A^(-1)
    m_k_XO_coul =          1.115951314964015e+00; // A^(-1)
                           
    m_k_XLp_main =         5.178772174492621e-01; // A^(-1)
                           
    m_d_HH_intra =         7.239705625902097e-05; // A^(-1)
    m_d_OH_intra =         1.999975743219470e+00; // A^(-1)
                           
    m_d_XH_coul =          5.265038380833610e+00; // A^(-1)
    m_d_XO_coul =          5.982569910774844e+00; // A^(-1)
                           
    m_d_XLp_main =         6.966452100180875e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
     m_out_of_plane_gamma= 9.859272078406150e-02;

    m_r2i =  5.000000000000000e+00; // A
    m_r2f =  6.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_f_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_f_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_f_cutoff(double* r)
#else
void mbnrg_2b_h2o_f_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
