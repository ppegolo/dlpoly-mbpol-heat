#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-3.718466373375164e+01, // 0
-2.229607563536862e+02, // 1
 9.502899718903362e+01, // 2
 1.983501462139746e+02, // 3
-7.798082644089662e+01, // 4
-9.623859391301298e+01, // 5
-5.870284323399599e+01, // 6
-4.542118561746364e+01, // 7
-4.267357637403149e+00, // 8
-7.878605492861290e+01, // 9
 1.025633786768584e+02, // 10
 3.466941509466912e+00, // 11
-7.411619051483450e+01, // 12
-1.655348237692693e+02, // 13
 9.425001815609295e+01, // 14
-1.112386151731577e+02, // 15
 3.811427201248218e+02, // 16
 3.447535294892589e+02, // 17
 5.735593343065709e+01, // 18
 7.211659402378100e+01, // 19
 2.068324814751501e+01, // 20
-7.695022419619818e+01, // 21
 1.412076021681947e+02, // 22
-5.033114776122741e+00, // 23
 1.543603870337074e+01, // 24
 5.555528232842400e+01, // 25
-1.162607368965832e+02, // 26
 6.261179796652787e+01, // 27
 7.483991444365140e+01, // 28
 9.834757344174393e+01, // 29
-1.326268691380371e+02, // 30
-1.737527471018609e+02, // 31
-1.905643162644135e+01, // 32
-1.426706602479682e+01, // 33
 1.184665201452434e+02, // 34
-9.806287644978278e+00, // 35
-2.949495827272802e+00, // 36
-3.479852204328695e+02, // 37
 1.063438650846004e+02, // 38
 1.038646810471710e+02, // 39
 9.955648993278993e+01, // 40
 1.621978520637210e+02, // 41
 2.710419930470017e-01, // 42
-7.171434118937948e+01, // 43
-2.645242285832248e+02, // 44
 4.394805135135725e+01, // 45
-1.414847381030777e+02, // 46
 2.875155574087382e+02, // 47
 1.712395695688036e+02, // 48
 1.714402648776041e+02, // 49
-7.035868562332833e+01, // 50
 4.867558934601693e+01, // 51
-4.820354025172404e+01, // 52
 1.495218481446012e+01, // 53
-2.295927297760478e+02, // 54
-4.983373590595499e+02, // 55
-4.542898505957528e+00, // 56
-2.692665001090892e+02, // 57
-1.457567217993408e+00, // 58
 2.548830941265371e+02, // 59
-6.192768482348115e-01, // 60
 2.831141181293177e+02, // 61
 4.329424766686151e+00, // 62
-2.638766302222484e+01, // 63
 1.740281505378854e+01, // 64
-8.951114989253134e+01, // 65
 9.600483834121304e+01, // 66
-8.011326529641728e+01, // 67
-3.107920622887819e+02, // 68
 1.376745383440887e+01, // 69
-5.752705972061765e-02, // 70
 5.486507704190743e+00, // 71
-6.465399817406722e+00, // 72
 2.748152178734321e+02, // 73
 4.066832924607612e+01, // 74
 1.164735259862054e+01, // 75
 3.575597333759566e+01, // 76
 2.352111095699913e+02, // 77
-1.951889131157348e+02, // 78
 6.541232888539682e+01, // 79
 1.330740891054496e+00, // 80
-2.671026451011914e+00, // 81
 1.865938532637347e+01, // 82
 3.306044972917492e-01, // 83
 3.358817613211475e+01, // 84
-7.395092636517027e+00, // 85
-9.290850272483637e+01, // 86
-1.708020261863802e+02, // 87
-4.565795431223674e+02, // 88
 5.334169839010828e+01, // 89
-6.069973878197559e+01, // 90
-8.516719397849831e+00, // 91
 8.992221981322912e-02, // 92
-1.919644943446098e+02, // 93
-3.789472846214581e+01, // 94
-1.022659229636850e+02, // 95
-5.115891795735835e+02, // 96
 1.429274730332838e+02, // 97
-4.858890359545585e+02, // 98
-7.874082639165978e+01, // 99
-5.251929482605494e+00, // 100
 2.178405901513190e+00, // 101
-2.435675773507455e+01, // 102
 8.673338021408517e+01, // 103
-1.276580978958879e+02, // 104
-5.408978986345451e+01, // 105
-2.158537489676819e+00, // 106
 2.103550977341501e+01, // 107
 8.195086775500168e+01, // 108
-1.603225600241603e+00, // 109
 1.815294415910001e+01, // 110
-1.443362121114627e+01, // 111
-1.194380917616626e-01, // 112
-1.668282926401337e+00, // 113
 5.215038237739599e+00, // 114
 4.212438838332552e+00, // 115
 7.889382919720889e+01, // 116
 2.247245617698772e+01, // 117
 3.702833889712960e+01, // 118
-2.879731766739231e-01, // 119
-1.980976935904345e+02, // 120
 5.575356159690566e+01, // 121
-3.105544339519050e-02, // 122
 1.073713131006672e+02, // 123
-7.521152686608517e+01, // 124
-7.812748198732030e-01, // 125
-4.676331786481481e+01, // 126
-9.372571475938179e+01, // 127
-9.065416885084911e+00, // 128
 4.929309694270378e+01, // 129
-4.982421850152799e-01, // 130
 3.524096548743751e+02, // 131
 4.675916522363030e+01, // 132
-1.807488979201385e+02, // 133
-9.552450168706837e+00, // 134
 6.348715648970602e+00, // 135
 1.477881573126775e+02, // 136
 3.873104594857435e+01, // 137
 4.722940923500370e+01, // 138
-7.704509906503270e+01, // 139
-5.214842839192769e+00, // 140
-2.391595220284426e+02, // 141
 7.610115356438668e-01, // 142
 2.972898139823812e+02, // 143
 1.440384968943527e+02, // 144
 7.516788029729662e-01, // 145
-4.150323690123898e+00, // 146
-2.473975675625198e+01, // 147
-2.096117336618767e+02, // 148
-2.319554047800178e+00, // 149
 6.619317068083398e+02, // 150
 5.771520986179775e+01, // 151
 1.264936907969688e+02, // 152
 1.939235847624475e-02, // 153
 8.480345273756787e-04, // 154
-1.507277348176344e+01, // 155
-9.828855832980703e+01, // 156
-9.850396378533122e+01, // 157
-5.145241013026367e-03, // 158
-4.727113828222344e+00, // 159
 1.199874046227093e+01, // 160
 1.598373906816531e-01, // 161
 1.907131726185000e+02, // 162
-1.619280617575784e+02, // 163
 1.511975181147181e+02, // 164
 1.748726775885625e+01, // 165
 1.584225737357803e+02, // 166
-3.814245422853064e-01, // 167
 2.025510827494323e+01, // 168
-9.099498470286724e+01, // 169
-3.738306193280248e+00, // 170
-1.659707449174958e+01, // 171
-8.012853030541305e-01, // 172
 3.512053310494384e+01, // 173
-4.140016290414945e+01, // 174
-1.003271124873368e+02, // 175
-1.947114154685270e+01, // 176
-1.027196967145709e+01, // 177
-2.000514406809588e+01, // 178
-5.489830316526446e+02, // 179
-6.899716699313151e-02, // 180
 1.148316122096498e+02, // 181
 2.355777606254100e+01, // 182
-7.043112939309709e+00, // 183
 2.431719687787938e+02, // 184
-1.031570370409145e+01, // 185
 1.726185586369710e+00, // 186
 1.608602460107415e+00, // 187
-2.573889413625122e-01, // 188
 4.877879659348601e-01, // 189
 1.439945283597323e+02, // 190
 3.326484023080516e+01, // 191
 1.415204979606708e-01, // 192
-1.375399662306400e+01, // 193
-3.694710209720088e+01, // 194
 5.842669057821968e+00, // 195
-7.269428564128605e-01, // 196
-1.951734578296785e+01, // 197
-9.432447055953790e+01, // 198
-2.384681485504850e+00, // 199
 1.155351433159825e+02, // 200
-1.779506706145296e-01, // 201
-2.936197881709613e+00, // 202
 1.226062685576803e+02, // 203
 2.207239332965576e+01, // 204
-1.498277640654952e+01, // 205
 3.701997496264249e+00, // 206
-4.664919275850724e+00, // 207
 3.395731316402280e+02, // 208
-3.187658481442024e+01, // 209
-1.217962192731717e-05, // 210
 6.098977028205390e-04, // 211
-1.266386588500469e+01, // 212
 4.476504544310077e-03, // 213
 9.610566311510835e+00, // 214
-3.328366708389957e+00, // 215
-4.858881925490357e+01, // 216
 3.707359537905274e+00, // 217
 6.384528927654320e+01, // 218
 1.420584606244984e-01, // 219
 1.367398574531376e+00, // 220
 1.189357658059941e-02, // 221
 3.699051594678790e-02, // 222
-5.162150897262379e-01, // 223
-2.891328882303045e-01, // 224
 6.872091661105397e+01, // 225
-2.337653117378631e-01, // 226
 3.304333728765873e-02, // 227
-8.873556667823030e+00, // 228
 3.686005196874254e+01, // 229
-3.791402730793378e+00, // 230
-7.705725465807098e-02, // 231
 4.970479153353964e+01, // 232
 4.144094801217027e+00, // 233
-3.587855464896773e-01, // 234
 6.859071621648678e+01, // 235
 7.921289463165930e-02, // 236
-1.011967679044053e+02, // 237
-2.375894430143462e+01, // 238
-2.207918544167531e+02, // 239
 2.226944612160469e+02, // 240
-2.959904332333544e+00, // 241
-6.222092246787315e-01, // 242
-7.471348103948170e+00, // 243
-2.436632005564529e-02, // 244
-3.518531427103959e-03, // 245
-2.915205461767015e+01, // 246
 8.011382098789124e-01, // 247
 5.459962324028489e+00, // 248
 5.820885695377829e-01, // 249
-1.708531600683638e+01, // 250
-3.514576995039591e+01, // 251
 2.492030872368545e+01, // 252
-1.541125882330903e-01, // 253
-4.479427194363472e+01, // 254
 1.128955209505635e+01, // 255
-1.940221426226907e+01, // 256
 9.352310198026782e+01, // 257
 1.225055816623446e-02, // 258
-1.883775416202215e+02, // 259
 7.871814724171822e+00, // 260
-2.431972180217065e-02, // 261
 1.202579908793965e-01, // 262
 3.882025315911703e+01, // 263
-2.786457839195075e+01, // 264
 3.168883345246685e+00, // 265
 4.368895887971182e-01, // 266
-5.052933602284201e+01, // 267
 9.839026522473364e-03, // 268
-1.944163015649230e-06, // 269
-4.757803416048833e-01, // 270
-5.455477672447137e-03, // 271
-1.403253767400975e+02, // 272
 1.296182633949946e+02, // 273
 1.838940554180551e+00, // 274
-1.568606698854716e-02, // 275
-3.310122587708999e+01, // 276
-3.867569467188244e-07, // 277
-1.616480471108361e+00, // 278
 2.025237704336853e+01, // 279
-5.483547498510456e+00, // 280
 9.581650124479694e+00, // 281
-3.486267745367863e+01, // 282
 5.430173866551674e+01, // 283
-3.337349735529462e+00, // 284
-3.300142515733491e-01, // 285
 4.571485452676414e+01, // 286
 1.387498730094643e-01, // 287
 1.107662984655386e-01, // 288
-7.531709156791548e-01, // 289
-1.081028155188518e+01, // 290
 3.071697896825027e+00, // 291
 1.940487445029303e+00, // 292
-1.135007710237176e-02, // 293
-2.134466262267102e+01, // 294
-1.463580885864929e+01, // 295
 1.395661707725754e+00, // 296
 2.385282433507522e+00, // 297
-1.580622107245461e-03, // 298
-1.733554330052456e-03, // 299
-2.301365262090867e+01, // 300
-6.998072055737453e+01, // 301
-4.800934476383591e-01, // 302
-1.253413869683053e+00, // 303
-1.037909034505168e-01, // 304
-3.196377289527149e+01, // 305
-1.249180648950004e+02, // 306
 1.456424565040172e-02, // 307
 1.197680632672803e+02, // 308
-1.046303742800732e-01, // 309
-4.023424201966695e+00, // 310
 7.190316958968417e-01, // 311
-1.704330316542612e+00, // 312
 8.237461802688181e+00, // 313
-1.996640222414415e-03, // 314
 1.232880617998446e+01, // 315
 4.045132658316986e+00, // 316
 1.050024367757682e+01, // 317
 3.094202373855161e+00, // 318
-8.614866609627844e+00, // 319
 4.440292317538934e-01, // 320
 9.149181341312801e-02, // 321
-1.343307151575896e+01, // 322
-3.165117222757222e+00, // 323
-3.710373187976655e+00, // 324
 9.190473722136888e+01, // 325
-3.735944868661092e+01, // 326
-5.317660242888349e+00, // 327
-8.262289237618615e+00, // 328
 7.083844847337410e+00, // 329
 8.046172421951165e-05, // 330
-2.428770116449208e+02, // 331
-4.852660168107703e+00, // 332
-1.294383057553091e+02, // 333
 3.852078463787250e+00, // 334
 4.638538738886463e-04, // 335
-9.954012140721764e+00, // 336
 2.198759590927702e+00, // 337
-2.339755480414012e+00, // 338
 1.437391762917420e+01, // 339
 3.813600294544428e-02, // 340
-6.431952988007171e+00, // 341
 2.858373631353134e-01, // 342
-7.369042887647951e+00, // 343
 1.872616058431927e+00, // 344
-4.018905420616479e+01, // 345
-6.230120202709585e-01, // 346
-2.541657291358768e+01, // 347
 7.946929519561875e+02, // 348
-3.374053084331976e+01, // 349
-1.430329044603880e-01, // 350
-5.969453953235648e-01, // 351
-1.046138934937901e+02, // 352
 1.373499482792495e-02, // 353
 1.079059739704509e+00, // 354
-7.064738449428074e+00, // 355
 4.326416967479268e+01, // 356
-3.582360473311899e-02, // 357
-7.390295807913671e+01, // 358
-5.797110527326645e+00, // 359
-5.895595225361053e-02, // 360
-3.215764942926007e-04, // 361
 1.219731658658200e+00, // 362
-6.970567710372492e+01, // 363
-3.177903767131583e-03, // 364
 6.154802885999852e+01, // 365
-5.558893505735968e-02, // 366
 7.438977495843826e-01, // 367
-5.422652793816973e+00, // 368
-1.602778024082231e-01, // 369
-5.773929563598095e-04, // 370
-1.154924680825913e+01, // 371
 1.500559889720993e-04, // 372
-1.036970118407341e+00, // 373
 5.412649221260268e+01, // 374
-1.164398907430935e+02, // 375
-2.926148100860045e+00, // 376
 1.811950809484220e+01, // 377
 5.060602109167372e+01, // 378
-3.423787444259440e+00, // 379
 1.242046954917359e-01, // 380
 5.308127477575520e+00, // 381
 4.056942424102393e+00, // 382
-2.209188972485076e+00, // 383
-3.376441716736948e+02, // 384
-1.036546412192775e+01, // 385
-9.143638174303155e-05, // 386
-7.484337993953198e+00, // 387
-2.466999154401920e-01, // 388
 2.137265132673176e+01, // 389
 6.946842216619747e-01, // 390
-2.143430833897462e+01, // 391
-1.038988833293633e+00, // 392
-5.930354481388200e-02, // 393
 6.268329929942372e-02, // 394
 2.488569604938869e+00, // 395
 5.286580167084565e-01, // 396
-6.846572338658218e+00, // 397
 7.719789571912698e+01, // 398
 2.453419563140826e+00, // 399
 2.620707865310079e+00, // 400
 3.565549326589853e+00, // 401
-5.520630711581297e-01, // 402
-3.567080720596467e+01, // 403
-1.449872019294934e+01, // 404
-1.501197510881754e+01, // 405
-2.155561828729102e-02, // 406
 3.196990098587622e+00, // 407
-7.353559657971263e-03, // 408
-3.349778464653169e+00, // 409
 4.131483266238372e+01, // 410
-4.938311287758598e+00, // 411
 5.067404153167022e+00, // 412
 6.245230667494433e+01, // 413
 4.871327182700697e+00, // 414
 7.207100552217444e+00, // 415
 5.688813083582858e-01, // 416
 2.277674014320207e-01, // 417
 2.715873781917849e+02, // 418
 6.683565585494602e-02, // 419
-1.510218018611784e+01, // 420
 1.695216089528696e+01, // 421
 6.698248352788191e-05, // 422
 2.063693188410418e+01, // 423
-5.476145737855953e-05, // 424
 1.768679724137689e-08, // 425
-6.003159801909794e-01, // 426
 2.054202496986379e+02, // 427
-1.471672758570844e+01 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.208778728405200e-01; // A^(-1)    
    m_k_OH_intra =         6.894294390445157e-01; // A^(-1)
                           
    m_k_XH_coul =          3.469977644407921e-01; // A^(-1)
    m_k_XO_coul =          1.097486375947820e+00; // A^(-1)
                           
    m_k_XLp_main =         7.018511926701808e-01; // A^(-1)
                           
    m_d_HH_intra =         1.613383572249736e+00; // A^(-1)
    m_d_OH_intra =         1.235624979988633e+00; // A^(-1)
                           
    m_d_XH_coul =          6.269132929855695e+00; // A^(-1)
    m_d_XO_coul =          6.110857426501780e+00; // A^(-1)
                           
    m_d_XLp_main =         3.995513829824842e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_rb_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_rb_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_rb_cutoff(double* r)
#else
void mbnrg_2b_h2o_rb_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
