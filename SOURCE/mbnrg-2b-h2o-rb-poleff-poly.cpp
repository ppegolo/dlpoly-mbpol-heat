#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-2.863725034646694e+02, // 0
-6.677315583512410e+01, // 1
 1.452323397279717e+02, // 2
 1.569016711915082e+02, // 3
-1.354319540700806e+02, // 4
-1.240290389266709e+02, // 5
-4.173358735649990e+02, // 6
-1.071952202654215e+02, // 7
 3.776605674919464e+02, // 8
-1.205913117117748e+02, // 9
 1.288705788986192e+02, // 10
-6.427566280510528e+01, // 11
 3.163552319250332e+01, // 12
-2.544454732244467e+02, // 13
 2.032096527515936e+02, // 14
-8.014516368276252e+01, // 15
 4.334244675121899e+02, // 16
 4.905336811938840e+01, // 17
 1.507476958610883e+02, // 18
 1.224873854360479e+02, // 19
-5.833115878450019e+01, // 20
-3.580933458907305e+01, // 21
 1.379577494314936e+01, // 22
-7.640564250829308e+00, // 23
 7.711015814658771e+01, // 24
 3.054820144627843e+02, // 25
-1.648252192754327e+02, // 26
 6.077759962703264e+01, // 27
 2.347419661784997e+01, // 28
 8.696777908409193e+01, // 29
-4.057585738253020e+01, // 30
-2.107190037516889e+01, // 31
 3.659839842334213e+00, // 32
-5.617488178549137e+01, // 33
 1.829442393459362e+02, // 34
 1.359178734424594e+01, // 35
-2.033553225014474e+01, // 36
-2.260547477603587e+02, // 37
 8.655883058164024e+01, // 38
 2.794173172231685e+02, // 39
 8.885174058307274e+01, // 40
 1.052909167896579e+02, // 41
 4.506996144214062e+00, // 42
-9.057383222109719e+00, // 43
 6.720425804945124e+01, // 44
-2.362259849507632e+01, // 45
-4.923701777613152e+01, // 46
 2.166456792525197e+02, // 47
 5.614863879907318e+01, // 48
 3.197896399222596e+01, // 49
-1.896852388312126e+01, // 50
 1.945604427797620e+01, // 51
-6.445282266700157e+01, // 52
 2.844534104177656e+02, // 53
-2.256364999202120e+02, // 54
-8.643475103351032e+02, // 55
-8.473304204912864e+00, // 56
-6.053509333532129e+01, // 57
-1.360149748366764e+02, // 58
 9.425212103936769e+01, // 59
-3.236979482940200e+01, // 60
-6.946984194288945e+01, // 61
 2.864308400774611e+00, // 62
 2.621408589510321e+01, // 63
 1.658891478739302e+01, // 64
 2.941355148646899e+01, // 65
 5.628328951537527e+01, // 66
-1.218677496546689e+01, // 67
-7.337515990219987e+01, // 68
 1.162832429906391e+00, // 69
 5.318000481103404e-01, // 70
 1.058753102090920e+00, // 71
-8.042583271150272e+00, // 72
 1.451334377062024e+02, // 73
 3.228866838526273e+00, // 74
 4.588668417078444e+01, // 75
-3.529851926832395e-01, // 76
 7.457846512898503e+01, // 77
-7.954664351409598e+01, // 78
 4.503683211615230e+01, // 79
 6.654057269748247e-01, // 80
 2.272535375828393e+01, // 81
 2.381112715392335e+00, // 82
 5.765147249842747e-01, // 83
 1.095617316719835e+00, // 84
-8.556550061569576e-01, // 85
-8.171953053110452e+01, // 86
-1.408302464796446e+01, // 87
-2.199220818382726e+02, // 88
 7.926165785904509e+00, // 89
 9.773762273964985e-01, // 90
-1.739467971658997e+01, // 91
 6.119280671158187e-01, // 92
-1.343143352505607e+02, // 93
-4.412689076392326e+00, // 94
 3.199043400710504e+01, // 95
-5.640823716729401e+00, // 96
 4.485085403095993e+01, // 97
-9.892898839775680e+01, // 98
-1.450524651718544e+02, // 99
 4.627293863789798e+00, // 100
 1.026841093001231e+00, // 101
-6.648371142476224e+00, // 102
 1.029660563925365e+01, // 103
-8.061605064497327e+01, // 104
-1.956311562598200e+01, // 105
-1.242604678235059e+00, // 106
 9.075112177860280e+00, // 107
-1.403431279170395e+01, // 108
-1.473048421213923e+01, // 109
 7.217635965442420e-01, // 110
-7.582357555704434e+00, // 111
 3.476834173545557e+00, // 112
-3.507721948947399e-01, // 113
-1.743130852420858e+00, // 114
 4.024411973418195e+01, // 115
 4.838712212250426e+00, // 116
 2.271375425623861e+01, // 117
 2.835690027674206e+01, // 118
 7.326633599185226e+00, // 119
-6.270817884146346e+00, // 120
 5.904499583632290e+01, // 121
-2.269571957064988e-01, // 122
 5.244231298925454e-01, // 123
-3.053567994863720e+01, // 124
 1.656721640560922e+00, // 125
-5.295578283809608e-01, // 126
 5.156356640005418e+01, // 127
 6.885084771129707e+00, // 128
 2.208678123481603e+00, // 129
-1.876715993845089e+01, // 130
 1.742406202858144e+01, // 131
-5.401828444741438e+00, // 132
-8.349821160323751e+01, // 133
-1.818436727429772e+01, // 134
-7.380782181112943e-01, // 135
 2.593185465695802e+00, // 136
 1.392213710078423e+01, // 137
 6.864614697717507e-01, // 138
-6.790603987800415e+01, // 139
-9.868759512002624e-01, // 140
-1.931806512793421e+01, // 141
-7.800868332540738e+00, // 142
 4.145367553373354e+02, // 143
 7.815228897647950e+01, // 144
-4.215968989978596e-01, // 145
 1.312438286934618e+01, // 146
-7.319974393909758e+00, // 147
-3.696965143641490e+02, // 148
-1.457542985246885e+00, // 149
 6.256027484544241e+01, // 150
-1.834749942193659e-01, // 151
 1.415055050627720e-01, // 152
 4.722181835206369e-02, // 153
 5.898577053025024e-02, // 154
 1.473266837976892e-01, // 155
-1.044388044095030e+02, // 156
-7.046418051172200e+00, // 157
-9.252660078903434e-02, // 158
 3.928680699710861e+00, // 159
-1.241031372235205e+00, // 160
 5.358626912629288e-02, // 161
 5.730742530908132e+01, // 162
-6.964098822989332e+01, // 163
 9.745383779835240e+01, // 164
 1.252735970466931e+01, // 165
 9.030899097016389e+01, // 166
 1.608869460611477e+00, // 167
 1.119531763980695e+01, // 168
-1.128475226082627e+02, // 169
-1.563922629959715e+01, // 170
-3.878013125256865e+00, // 171
-4.317602139270015e+01, // 172
 1.752416313895731e+01, // 173
-2.175989058753222e+00, // 174
-3.716332483028575e+00, // 175
-7.916630670798380e-01, // 176
-1.209572567994914e-01, // 177
-5.392274050854496e+01, // 178
-6.744823376484829e+00, // 179
-8.643651597959850e-01, // 180
 5.967001943667497e+01, // 181
 3.416313421213656e+00, // 182
-7.598970572126414e-02, // 183
 5.310260168727487e+01, // 184
-2.815971062993612e+00, // 185
 2.242848263986004e-02, // 186
 8.874476906295534e+00, // 187
-5.177107318322358e-02, // 188
 3.997414054316928e-03, // 189
 2.647939219753957e+01, // 190
 2.804208554695792e+01, // 191
 7.085661000155447e-02, // 192
-4.068171510382295e-01, // 193
-1.130232804759781e+01, // 194
-3.721364177778318e-01, // 195
-1.290926278597873e-03, // 196
-2.984187912394647e-01, // 197
-3.045385358147671e+01, // 198
 7.588137463032260e-02, // 199
 2.829033432187764e+01, // 200
-2.125830998925128e-01, // 201
-7.240827402919230e-01, // 202
 1.302035680607203e+00, // 203
 2.153521291655275e+00, // 204
-1.648135623427302e+00, // 205
-5.514323269449381e+00, // 206
-2.829174963538172e-01, // 207
 4.380463242830436e+01, // 208
-3.602803485482086e+01, // 209
-1.250114914091359e-04, // 210
-7.587028313928039e-06, // 211
-4.196244638596334e-01, // 212
 6.739313479788873e-02, // 213
 5.291067831876429e+00, // 214
 4.956432706952740e-02, // 215
-2.208027656985166e+00, // 216
 2.615332196584895e+00, // 217
 3.714222184248417e+00, // 218
 8.752947932705038e-02, // 219
 5.647192236177668e-01, // 220
-1.518189866649666e-01, // 221
 8.310466804396480e-01, // 222
-2.351320355240884e+00, // 223
-5.831778655305011e-03, // 224
 4.593111978131402e+01, // 225
-1.496013826832338e-02, // 226
 3.918778113264127e-04, // 227
-2.015087069479197e-01, // 228
-1.296794148548513e-01, // 229
 4.770291642886073e-01, // 230
 9.951552289342960e+00, // 231
 4.372977218483857e+00, // 232
 1.122610688708650e-02, // 233
-9.383821364652478e+00, // 234
 3.402040202425345e-01, // 235
-3.486608698753833e-01, // 236
-5.292830194713719e-01, // 237
-1.951517089988000e+00, // 238
-3.190927303688077e+01, // 239
 1.264925695899714e-01, // 240
-3.569233692138160e-01, // 241
 1.149030775571613e-02, // 242
-3.009817256763149e+00, // 243
-4.285557188379066e-03, // 244
-1.325816660113685e-04, // 245
-7.843631499561983e-01, // 246
 3.006780915722579e-01, // 247
 1.531971986210831e+00, // 248
-5.220459076724780e-03, // 249
-2.406566209041801e-01, // 250
-5.098859559848855e-02, // 251
 1.908591267418011e-01, // 252
-4.041913913193970e-01, // 253
 8.445600215574547e+00, // 254
 1.414910644307508e-01, // 255
-2.093037191597403e+00, // 256
-1.174526356554034e+00, // 257
 1.218128454595423e-03, // 258
-4.520473791537605e+01, // 259
-2.310353424495295e+00, // 260
-2.327139136361708e-01, // 261
-7.849534318892876e-02, // 262
 5.667847542753391e-01, // 263
-2.074103148054295e-01, // 264
 2.352462572648438e+00, // 265
 3.351918330737816e-02, // 266
-4.159201558265817e+00, // 267
 7.796101723132400e-02, // 268
-6.009278871965085e-06, // 269
-1.597036617708109e+00, // 270
-2.149810739526521e-04, // 271
-9.891032138222089e+00, // 272
 6.036501008457253e-01, // 273
-4.151565821197308e-01, // 274
-1.936182348883718e-03, // 275
-1.587024317113569e+01, // 276
 1.088391660981507e-07, // 277
-4.930011458305223e+00, // 278
 2.218002750796673e-01, // 279
-1.068075741278781e-01, // 280
 7.159314634456538e+00, // 281
 2.652973278536792e+00, // 282
 2.261239685610444e+00, // 283
-1.946584954836340e-01, // 284
 1.264434979685068e-03, // 285
 1.629609350814929e+00, // 286
 3.094784870813313e-01, // 287
-5.004006009985388e-01, // 288
-7.369375724011862e-02, // 289
-5.944051031775115e-01, // 290
 1.733444601444705e-01, // 291
-1.779890145848688e+00, // 292
 1.619071825605903e-03, // 293
-1.621140218224241e+01, // 294
-6.489894564275959e+00, // 295
 5.149885716082878e-01, // 296
 2.245861477698212e+01, // 297
-8.853522676801979e-04, // 298
 7.334383306074851e-03, // 299
 3.376832643923026e-01, // 300
-3.056437187148039e+01, // 301
-3.304360699498154e-03, // 302
 9.016327848934109e-01, // 303
-1.493845875355096e-01, // 304
-2.506058353797568e+00, // 305
-1.289378552884097e+01, // 306
 1.818212695436068e-03, // 307
 6.113740503186939e+01, // 308
-1.931840366108106e-03, // 309
-1.239326524633972e+00, // 310
 6.556536005431711e-03, // 311
 4.421916796700974e-01, // 312
-1.530489536191732e+01, // 313
-3.593538758659930e-04, // 314
-1.667251862370084e-01, // 315
-2.218313441730916e-02, // 316
-3.159002089004513e+00, // 317
 2.050801778836579e-01, // 318
 3.749748980128852e-01, // 319
 8.187505240290722e-01, // 320
 2.319424237495252e+00, // 321
-6.802211246874743e-01, // 322
-6.718130300046722e-03, // 323
 1.571217703048382e+01, // 324
 8.010357234631433e+00, // 325
-1.623920624047367e-01, // 326
 1.948969975999286e+00, // 327
-1.106574096079034e+01, // 328
-1.049932772980245e-02, // 329
 7.586383070114924e-05, // 330
-2.104902173059511e+01, // 331
 2.875479598513525e-01, // 332
-1.895758436578017e+00, // 333
 1.873996889329662e+00, // 334
 1.246099044326521e-04, // 335
-2.874170796067794e-01, // 336
 1.860799382651539e-01, // 337
-9.830972260048124e-01, // 338
 5.039790572079655e-02, // 339
 2.243919856102279e-02, // 340
-2.117467770878476e-01, // 341
 5.549509136579898e-02, // 342
-1.022007413462778e+00, // 343
 3.370535174190554e-01, // 344
-1.308766127408001e+00, // 345
-6.191218430899701e-01, // 346
-1.036427431678302e+00, // 347
 1.380865829586269e+02, // 348
-2.338979012611329e-01, // 349
 1.142113965545099e-01, // 350
 5.172214847186168e-01, // 351
 1.508440061702315e+00, // 352
 1.131277209194253e-01, // 353
 1.649419527435023e-02, // 354
-2.605865279325022e+01, // 355
 9.143870084381726e+00, // 356
-3.759678065886689e-03, // 357
-5.443191057453084e+00, // 358
-5.991444676249495e-02, // 359
-4.348501012577943e-01, // 360
-2.096490048172481e-02, // 361
-7.802424223783149e-01, // 362
 1.351008449203658e+00, // 363
-3.102153911860705e-01, // 364
 7.968015707759946e-01, // 365
-1.219639098101128e-02, // 366
-6.014082308512063e-01, // 367
 2.721319920964632e-01, // 368
-9.119274823285757e-01, // 369
-8.518615508476860e-04, // 370
-3.298803425408181e+01, // 371
-3.934639476742169e-04, // 372
 2.650243869334497e-02, // 373
 3.506862790047636e+00, // 374
-3.991351999876622e+01, // 375
-1.450086650732138e+00, // 376
 2.704813343579474e+00, // 377
-4.796654510839580e-01, // 378
-8.080667944834029e-01, // 379
 5.553646563000478e-02, // 380
 1.853936192161989e+00, // 381
 3.687601284815182e-01, // 382
-3.274586427694576e-02, // 383
-1.673419354084541e+01, // 384
 1.098127829968480e-01, // 385
-1.439885616946921e-04, // 386
-1.418871141587663e+01, // 387
-1.008901160294442e+00, // 388
 5.619149239965749e-01, // 389
 1.371673735116195e+01, // 390
-5.907326400391447e+00, // 391
 5.228925511714313e-01, // 392
-9.534329044369584e-02, // 393
 1.043053940038916e-02, // 394
 1.474708442194192e-01, // 395
-2.029836505383065e-02, // 396
-3.765850233134395e-01, // 397
 5.894554995286649e-01, // 398
 8.285854393053981e-01, // 399
 3.799770964357061e-01, // 400
-2.422828945584659e-01, // 401
-7.528831120516426e-03, // 402
-9.164854082258697e-01, // 403
-2.791723932502492e-02, // 404
 1.897669456446776e-01, // 405
-3.256643630509013e-01, // 406
-1.063023749463266e-01, // 407
 1.256731851121250e-01, // 408
 3.974121582086648e-02, // 409
 1.112961860392371e+00, // 410
 4.832200197623066e+00, // 411
-2.204463036922446e-03, // 412
-1.505916322574408e+01, // 413
-2.799717334310975e+00, // 414
-1.487940524636930e-01, // 415
 3.049158291754518e-01, // 416
 1.288228870972335e+00, // 417
 1.084971062543130e+02, // 418
-6.076902382440479e-02, // 419
 5.760997845043916e-01, // 420
-6.479401592145568e-01, // 421
 1.671023176550740e-04, // 422
 1.521614607336731e+00, // 423
-2.287747931301888e-03, // 424
 1.364444024708754e-06, // 425
-5.075877687866014e-03, // 426
 1.538513569556465e-01, // 427
-2.478027411961206e+00 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.067519240637039e-01; // A^(-1)    
    m_k_OH_intra =         3.874162263185493e-01; // A^(-1)
                           
    m_k_XH_coul =          4.538089586382054e-01; // A^(-1)
    m_k_XO_coul =          1.045885370883495e+00; // A^(-1)
                           
    m_k_XLp_main =         7.709957049625626e-01; // A^(-1)
                           
    m_d_HH_intra =         1.999394203200413e+00; // A^(-1)
    m_d_OH_intra =         1.803453980355243e+00; // A^(-1)
                           
    m_d_XH_coul =          6.920975955955548e+00; // A^(-1)
    m_d_XO_coul =          5.730619019745628e+00; // A^(-1)
                           
    m_d_XLp_main =         5.345448692361628e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_rb_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_rb_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_rb_cutoff(double* r)
#else
void mbnrg_2b_h2o_rb_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
