#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-1.292432048444890e+02, // 0
 6.609147346235141e+02, // 1
-3.982962335916822e+01, // 2
 1.788026737507638e+02, // 3
 5.606713843368324e+02, // 4
 1.606773763442300e+01, // 5
-2.528050745238992e+01, // 6
 6.084848112923582e+02, // 7
-4.845547480543731e+02, // 8
 1.433842778991913e+01, // 9
-1.932786591055595e+02, // 10
 1.308733775927331e+03, // 11
 1.488602697251263e+02, // 12
-2.812545156380255e+03, // 13
 3.744895124188953e+02, // 14
-7.674851418033454e+01, // 15
 5.505034572587806e+02, // 16
-3.273984016015979e+01, // 17
 3.727386291325234e+02, // 18
 8.633198985576358e+00, // 19
 5.446091742065308e+01, // 20
 3.092331998604421e+02, // 21
-5.997220521719140e+01, // 22
-9.697610366862656e+02, // 23
 3.427282377206329e+03, // 24
 1.439950124627825e+02, // 25
-6.599753281943820e+02, // 26
-2.394902857445659e+01, // 27
 1.204902669226125e+02, // 28
-5.165397622861256e+01, // 29
-4.685295604374303e+02, // 30
-5.163697639273722e+00, // 31
 2.159765771907456e+01, // 32
 2.557724584841735e+02, // 33
 2.064903337246466e+02, // 34
-4.495084768665445e+01, // 35
-9.071516925867680e+02, // 36
-4.491672152850483e+01, // 37
-4.198313370086170e+01, // 38
 4.540385787678923e+02, // 39
 2.123421834150032e+01, // 40
-3.093322561365638e+02, // 41
-1.475749216984066e+03, // 42
 6.352401361729034e+02, // 43
 5.937157385117831e+01, // 44
 7.280036370068497e+00, // 45
-1.826278749043017e+01, // 46
 1.988261165435992e+02, // 47
-1.862993280216482e+03, // 48
-2.724567402433294e+01, // 49
-8.235301467105279e+01, // 50
 6.376019082676798e+02, // 51
-2.074885157299427e+02, // 52
 2.192828000345493e+02, // 53
-3.172406922415973e+02, // 54
-1.351548814959815e+03, // 55
 1.123820942611945e+02, // 56
-1.267296232227173e+01, // 57
 2.812498540769058e+02, // 58
 9.030936395757402e+01, // 59
 5.588241995417484e+01, // 60
 5.629464157204695e+02, // 61
 1.154585920122027e+02, // 62
-1.261414112566605e+03, // 63
 6.371679119411665e+00, // 64
-3.607537910029500e+02, // 65
 1.728317708321173e+02, // 66
-4.723145117709036e+01, // 67
 2.332272943970732e+00, // 68
-7.863575873226078e+01, // 69
 3.511048268139107e+02, // 70
-5.465176047122903e+01, // 71
-2.289874589832559e+02, // 72
-8.857530853732431e+00, // 73
 1.420748801763112e+02, // 74
 9.535658699551745e+02, // 75
 4.171122820867317e+01, // 76
 3.188275593668783e+02, // 77
-7.846335457838747e+01, // 78
 2.487176183527056e+03, // 79
 3.162376923771956e+03, // 80
 7.936017925115488e+01, // 81
 6.504710022536645e+01, // 82
-2.119409207910882e+03, // 83
 9.952983668029229e+01, // 84
-3.171335181488182e+01, // 85
 2.718431170413337e+01, // 86
-7.392176197719879e+00, // 87
-2.936436575470218e+01, // 88
 4.768490861717944e+01, // 89
-2.447229070826751e+02, // 90
-1.135158938211671e+01, // 91
 3.931060187520006e+02, // 92
-7.542191796840999e+01, // 93
 1.630336247162930e+01, // 94
-4.788718905896614e+02, // 95
-6.201826552300221e+01, // 96
-3.498789177772792e+00, // 97
-3.884037085300065e+01, // 98
-4.953759804625862e+02, // 99
 1.166474768566270e+02, // 100
 9.664141906640261e+02, // 101
-8.816914465638165e+00, // 102
 2.413741006905305e+00, // 103
-6.749868693709365e+02, // 104
-1.095071044006598e+02, // 105
-6.588569458732926e+02, // 106
 9.467555445343567e+01, // 107
-2.929644529722235e+02, // 108
-7.648284079345984e+01, // 109
 3.390841606257185e+01, // 110
 4.203710518477914e+01, // 111
 9.212041337766578e+02, // 112
 2.056957654721672e+02, // 113
 9.842030051100555e+01, // 114
-4.546145459860140e-01, // 115
 1.682330088049607e+02, // 116
-1.575052071948118e+01, // 117
 1.117230451869988e+02, // 118
 2.580141804861535e+02, // 119
-1.411801699435109e+01, // 120
 3.144768578593262e+02, // 121
 1.285583485090241e+01, // 122
-1.334331524174776e+01, // 123
-2.691047626808572e+01, // 124
-1.276790995999575e+01, // 125
 4.545879414463656e+00, // 126
-3.902060441561982e+01, // 127
-7.275448601725013e+01, // 128
-9.748855372759334e+01, // 129
-1.886440117629804e+02, // 130
 9.109765978795867e+00, // 131
 3.612236589536924e+00, // 132
-2.074271728645299e+02, // 133
-1.484133916134761e+02, // 134
 9.795203553376025e+02, // 135
 1.712692913873313e+01, // 136
-2.061847971802452e+02, // 137
 2.861234674299256e+02, // 138
-1.138988113281016e+02, // 139
 2.981329494550581e+02, // 140
 2.409020762770841e+01, // 141
-4.159305084031075e+01, // 142
 5.536411815623416e+02, // 143
 6.442750898899673e+01, // 144
 6.562442216231145e+01, // 145
-4.437948916594625e+01, // 146
-1.287975882292943e+02, // 147
-9.286851198728463e+02, // 148
-2.134898253238946e+02, // 149
-2.549189213397383e+00, // 150
 6.940425664938097e-01, // 151
 5.756387933341206e+00, // 152
-3.764100991226267e+02, // 153
-8.654714615462076e+00, // 154
-1.487996302698220e+01, // 155
-3.452056479350666e+02, // 156
 4.646536725112155e+02, // 157
 1.376638044666727e+03, // 158
-2.892195444916341e+02, // 159
 9.977666167681077e+00, // 160
 6.142692605374320e+02, // 161
 5.164638518609522e+02, // 162
 5.743280721840786e+01, // 163
-4.573141453516865e+01, // 164
 1.095481189036165e+03, // 165
 2.947147988892551e+02, // 166
-1.152262736577603e+02, // 167
 4.686521676335143e+02, // 168
 4.160555379208332e+02, // 169
-1.497571552122143e+03, // 170
 1.508574177911751e+01, // 171
 6.579247574359468e+02, // 172
 8.785941352739510e+02, // 173
-7.898428150204749e-02, // 174
-1.911284926207700e+02, // 175
 9.590530927525215e+01, // 176
 1.117090322552655e+02, // 177
 3.324440080657916e+02, // 178
-3.010476898437973e+01, // 179
-1.129410033225133e+03, // 180
-1.493191409644736e+02, // 181
-8.354383761514184e-01, // 182
-7.349620667465284e+02, // 183
 4.998798026944147e+00, // 184
-2.415962432368147e+03, // 185
 1.620557136432299e+01, // 186
 7.311556301585679e+01, // 187
 4.162784191170107e+02, // 188
-3.419256030366256e-01, // 189
 3.013759052121294e+01, // 190
 6.210390816019554e+00, // 191
-1.893938634410835e+02, // 192
-3.357176985951785e-01, // 193
-9.357633867393457e+01, // 194
 9.816675525425660e+01, // 195
-5.844101723688911e-01, // 196
 6.212394644742990e+02, // 197
-4.321470135134457e+01, // 198
-6.582408902336041e+01, // 199
 3.144736441292408e+02, // 200
 1.601135893990063e+03, // 201
-4.466924901771428e+02, // 202
 1.123659580797494e-01, // 203
 2.890674215925303e+01, // 204
 2.290349894386923e+01, // 205
-8.407671286748431e+02, // 206
-4.147140502969982e+01, // 207
-2.307212953434151e+00, // 208
-5.869018642455598e+01, // 209
 6.450105108059550e+01, // 210
 3.491487354743654e+00, // 211
 1.578800394189941e+03, // 212
 3.000425288814529e+01, // 213
 5.259998313455708e+01, // 214
 4.427719707484425e-01, // 215
-9.314549465490977e+00, // 216
-1.216836692041142e+01, // 217
 3.605625246247613e+00, // 218
 3.029436022452728e+01, // 219
-1.818158583089671e+03, // 220
-9.183858092376015e+00, // 221
-3.448198527076715e+01, // 222
-1.792953109954721e+02, // 223
 6.108619450934328e+02, // 224
 1.632408469800340e+02, // 225
 7.164065550140621e+01, // 226
-1.565764264790211e+00, // 227
 2.437342962113765e+01, // 228
-1.336867324837115e+01, // 229
 1.507265924182579e+01, // 230
 1.632483256997647e+02, // 231
 1.432695902574769e+01, // 232
 6.687513522374725e+00, // 233
 2.037112205793750e+02, // 234
 1.825279056109284e+01, // 235
 6.444116683006123e+01, // 236
-1.740831762013828e-01, // 237
-6.185866922072763e+01, // 238
-3.245485537630706e-02, // 239
 1.232860687850910e+02, // 240
 4.232936699327129e+01, // 241
-2.135620825185845e+01, // 242
-5.216219384898241e+02, // 243
 1.966513373358471e+02, // 244
 4.211525677738412e+00, // 245
 6.843146373665122e-01, // 246
 3.946905785429936e+02, // 247
 5.892764849306304e+01, // 248
 6.455109004043690e+00, // 249
-8.384948080563807e+01, // 250
 2.268345839217334e-02, // 251
 4.924047946710208e+01, // 252
-2.429766331904448e+02, // 253
 9.525230879575106e+01, // 254
 7.608354677827429e-01, // 255
-1.032804996539653e+02, // 256
 3.261518519651418e+01, // 257
 4.243662894746529e-01, // 258
 5.526505939594230e+00, // 259
-3.217630422457392e+01, // 260
 2.176361051061787e+01, // 261
 1.286027343427829e+02, // 262
-1.707328476179870e+00, // 263
-4.424601999419578e+00, // 264
 1.003193121487105e+03, // 265
-2.092297072030126e+03, // 266
 1.730555947934711e+01, // 267
 3.059397697480691e+01, // 268
 1.665494597628290e+00, // 269
 5.899647857056835e+02, // 270
-9.504716685665777e-01, // 271
 2.514150311091354e-01, // 272
 1.786928152471025e+00, // 273
-4.517598428418605e-01, // 274
 1.053583125307210e+01, // 275
-6.528228549140003e+02, // 276
 1.415513198967784e+01, // 277
 4.274822166117931e+02, // 278
-6.658799128463889e+02, // 279
-1.169608708259823e+02, // 280
-7.465134222130364e+02, // 281
 7.869252266941673e+01, // 282
 2.671713252667741e+00, // 283
 9.302199140311437e+02, // 284
-2.635441514179502e-01, // 285
 9.144909143996952e+01, // 286
 1.724577640856544e+03, // 287
-2.013111218055427e+01, // 288
-1.207504363056158e+02, // 289
-5.673416384728266e+01, // 290
-1.395814458308497e+01, // 291
-1.056564852741915e+01, // 292
 1.928067048661279e-01, // 293
-2.944448548993621e+00, // 294
 5.562487549898129e+02, // 295
-1.896230424464861e+02, // 296
 4.538828348231791e+02, // 297
-1.395410572021107e+03, // 298
-8.536873270842186e+01, // 299
-1.681899025128198e+00, // 300
 1.516359648443670e+01, // 301
-9.417864986340952e+01, // 302
 7.371151566019212e+01, // 303
-2.742969701823743e+02, // 304
-2.006053807867453e+01, // 305
 4.108637785679881e+01, // 306
-6.027861959816970e+01, // 307
 3.147956045743053e+02, // 308
 4.187805936947725e+01, // 309
-1.799373585315561e+01, // 310
-1.980109777749584e-02, // 311
 1.664968484074233e+00, // 312
-5.454416339287070e+01, // 313
 1.165334060578690e+00, // 314
-1.795910230671968e+00, // 315
-5.243402140161746e+01, // 316
 1.126854895670913e+00, // 317
-5.165996023379282e+01, // 318
-3.261981419968225e+02, // 319
 9.536707171945035e+01, // 320
 5.327490747686455e-01, // 321
-5.386312444720914e+01, // 322
 1.283905994220899e-01, // 323
-3.060854707758240e+01, // 324
 3.495165735560911e-01, // 325
 1.398742144367287e+01, // 326
 1.055571997158174e+02, // 327
-9.984182297630488e+01, // 328
 1.955638724345355e+00, // 329
-1.478438056853096e+01, // 330
-1.791696452531563e+01, // 331
-2.698049135501012e+01, // 332
-2.398268921801408e-01, // 333
-4.769857114686661e+02, // 334
-5.704946300319505e+01, // 335
-1.335633628808029e+01, // 336
 7.376454018364741e+01, // 337
-1.473581894262056e+01, // 338
-3.470573054928852e+00, // 339
-4.396715218465134e+01, // 340
 2.674833659652192e+02, // 341
 2.499931533253737e+00, // 342
-1.202608275989319e+02, // 343
-3.996445858666452e+02, // 344
 1.167238415630750e+00, // 345
-7.461888217190472e+01, // 346
 2.397928583567735e+02, // 347
 1.754374569879566e+01, // 348
-8.948224297946551e+00, // 349
-1.521138078751856e+00, // 350
-4.160186004407209e+00, // 351
 2.656769510473441e+00, // 352
 2.228706039450978e+02, // 353
-2.429011327292060e+01, // 354
 9.400218399942608e+01, // 355
-5.769447495554002e+01, // 356
 3.886029341842161e+01, // 357
-6.163962553024754e+00, // 358
-2.486597140989400e-01, // 359
-2.401550315030439e+02, // 360
-3.261000191242044e+01, // 361
 4.205448943559555e+01, // 362
-1.936723992726880e+00, // 363
-2.650595431326920e+01, // 364
-4.754171244286761e-01, // 365
 1.037330279904923e+01, // 366
 1.079134217015695e+02, // 367
-3.645586539395164e+02, // 368
 4.500696649165287e+02, // 369
 1.122758832796961e+02, // 370
-5.567343764167687e+01, // 371
 3.194376493932613e+02, // 372
-2.602136127892814e+01, // 373
 2.262138135294061e+01, // 374
-2.461172628636666e+02, // 375
 4.887918339251835e+00, // 376
 8.103031543618896e+01, // 377
-7.106619648074880e+00, // 378
 1.087573483422664e+01, // 379
-3.032377772214224e+03, // 380
-1.261016448270481e+02, // 381
-3.920748910340608e+01, // 382
 2.551670529708485e+02, // 383
-1.844482327080176e+01, // 384
-3.752807817441085e+02, // 385
-1.884569329816996e+02, // 386
 2.500919509384558e+02, // 387
-4.215250903309004e+00, // 388
 7.637014884806003e+01, // 389
-3.747495980487104e+02, // 390
-1.986981973483828e+02, // 391
-3.108843144038519e+02, // 392
 1.289525115334962e+01, // 393
-1.566679142821395e+03, // 394
 3.803241008614001e+01, // 395
 6.395982634867122e+02, // 396
-1.192624234728926e+02, // 397
 2.183239300503477e+01, // 398
 1.588220101119336e+01, // 399
 4.076763989193314e+01, // 400
-3.604100684066770e+01, // 401
 9.955736439393567e+00, // 402
 1.060565257838829e+01, // 403
 3.098823213107919e-03, // 404
-8.420188879120983e-01, // 405
-2.322087036443021e+02, // 406
 1.119009826537635e+03, // 407
-1.361453434839489e+02, // 408
-2.089810406746050e+00, // 409
 6.058995664634367e+00, // 410
-1.561466020801798e+01, // 411
 1.610198129930868e-02, // 412
 2.040310081237364e+01, // 413
 1.406701416667602e+01, // 414
-2.397627956092255e+02, // 415
 3.365720738324196e+02, // 416
 1.638591945604003e+03, // 417
 4.335323883221594e+01, // 418
 2.520824701354406e+02, // 419
-2.425699410906292e+02, // 420
-2.187531345348139e+01, // 421
-2.809410632073834e+00, // 422
-6.866237647617349e+01, // 423
 2.246449822009693e+02, // 424
-3.904526085703819e+00, // 425
 1.083987992434679e-01, // 426
 1.321240098296879e+02, // 427
 2.275287367597572e+02 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.841179733353343e-01; // A^(-1)
    m_k_OH_intra =         1.999999982813816e+00; // A^(-1)
                           
    m_k_XH_coul =          1.221694270779757e-01; // A^(-1)
    m_k_XO_coul =          8.277382286185307e-01; // A^(-1)
                           
    m_k_XLp_main =         1.168420032277624e+00; // A^(-1)
                           
    m_d_HH_intra =         1.999965084185145e+00; // A^(-1)
    m_d_OH_intra =         1.138547391709435e+00; // A^(-1)
                           
    m_d_XH_coul =          4.576629521685452e+00; // A^(-1)
    m_d_XO_coul =          3.210235763647789e+00; // A^(-1)
                           
    m_d_XLp_main =         3.611985038328086e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.000000000000000e+00; // A
    m_r2f =  6.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_li_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_li_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_li_cutoff(double* r)
#else
void mbnrg_2b_h2o_li_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
