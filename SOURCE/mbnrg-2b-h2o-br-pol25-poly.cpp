#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
 1.289184942259462e+02, // 0
-4.653303549954994e+02, // 1
 2.119688739948907e+02, // 2
 3.264530072970307e+02, // 3
 2.314724580069056e+02, // 4
-3.106976210148835e+01, // 5
 7.520539373050410e+02, // 6
-1.427902681944735e+02, // 7
-1.148932766014240e+02, // 8
-3.271753021614019e+02, // 9
-1.592120326074693e+02, // 10
 1.703279847486954e+02, // 11
 1.571456157246240e+02, // 12
-4.930436453563487e+02, // 13
-2.417077111903616e+02, // 14
 1.517235882413038e+02, // 15
-5.877070965959649e+02, // 16
 2.430577893919101e+02, // 17
 2.655562716798819e+02, // 18
 1.324482331157214e+01, // 19
 2.257536977550153e+02, // 20
 4.020815738097120e+02, // 21
 1.578160554614995e+01, // 22
 3.211423625807662e+01, // 23
-1.419581055896388e+02, // 24
 8.290056011316774e+02, // 25
 1.376700328630926e+02, // 26
 4.400935044570879e+02, // 27
 1.873267447324109e+02, // 28
-3.708080943022801e+02, // 29
 2.728618588384090e+01, // 30
 4.635849582337429e+01, // 31
 2.123754743797433e+01, // 32
 3.038695124236339e+02, // 33
-9.178821064484302e+02, // 34
 2.312102454823928e+01, // 35
-1.618372326890143e+01, // 36
-6.399121399807751e+02, // 37
-9.234423005844859e+01, // 38
-8.037673314089454e+01, // 39
 1.739059836739352e+01, // 40
-2.032015108472993e+02, // 41
-1.920654082573444e+01, // 42
-5.293856179217276e+00, // 43
-1.286958471214249e+02, // 44
-1.405017824074103e+02, // 45
 4.841571996421672e+01, // 46
 2.509920948875793e+02, // 47
-5.198728702273419e+02, // 48
 1.277253884459413e+02, // 49
-2.831773912029871e+01, // 50
-5.079467921061450e+01, // 51
 4.569632644386537e+01, // 52
 2.574935621543220e+02, // 53
-2.720983197197793e+02, // 54
-1.147223522135045e+02, // 55
 4.273137149699254e+01, // 56
 3.108667836050311e+02, // 57
-4.863013475802418e+01, // 58
-2.316000717449485e+02, // 59
-1.245149370207207e+02, // 60
 1.418504351375445e+02, // 61
 1.348521895020026e-01, // 62
-1.013313921184643e+01, // 63
-5.247178418177548e+00, // 64
-5.242847953174297e+01, // 65
-8.637272842573611e+01, // 66
-1.196555499874708e+02, // 67
-7.139816241318259e+01, // 68
 7.737657452591603e-01, // 69
-3.545444045352323e+01, // 70
 1.533660920052619e+00, // 71
 5.037216260869904e+01, // 72
-2.583044253170718e+02, // 73
 7.910386344096200e+01, // 74
-1.329881488957047e+02, // 75
-1.436631713231666e+01, // 76
-3.495910873043488e+01, // 77
-2.129620369165534e+00, // 78
 1.776126098752765e+02, // 79
-2.066960724806309e+00, // 80
 6.814235477700568e-01, // 81
 5.109192876608373e+00, // 82
 1.352839968005954e+00, // 83
-1.610928458390696e+00, // 84
-5.943641120667550e-02, // 85
 2.022640323802827e+02, // 86
 2.318590328144239e+01, // 87
 3.914049980231969e+02, // 88
 1.775289981859660e+01, // 89
 1.030954197579105e+01, // 90
 4.967273023228864e+01, // 91
 7.044804373898577e+00, // 92
-2.447057291686587e+02, // 93
-3.422565951182825e+01, // 94
-2.117426249098492e+01, // 95
-1.892124547125076e+01, // 96
-1.745066811389710e+02, // 97
-1.924676700332051e+02, // 98
-3.278831656852356e+02, // 99
-1.080277261958321e+01, // 100
 1.065781910277380e+00, // 101
-3.003433331205022e+01, // 102
-2.728524456577027e+01, // 103
-3.071025360664998e+00, // 104
-1.187643230791296e+02, // 105
-1.095457989991220e+01, // 106
-1.601556241934886e+02, // 107
-1.553937796515074e+02, // 108
-2.971513866918258e+01, // 109
 2.604973449746902e+00, // 110
-9.081552863326523e+00, // 111
-3.637539581832528e+01, // 112
-9.086380247116219e-01, // 113
-2.508307073245634e-01, // 114
-1.511371837656884e+02, // 115
 1.205699733465264e+01, // 116
 2.297376933319006e+02, // 117
-1.342494755041444e+01, // 118
-1.793481251315641e+01, // 119
-2.044601837418740e+00, // 120
 1.088986239118422e+02, // 121
 6.081358551950226e+00, // 122
 1.333302147845001e+01, // 123
-5.937189387648858e+01, // 124
 1.689921803941937e+00, // 125
-1.550683126379640e+00, // 126
-7.419966419820798e+01, // 127
 2.756391274238702e+01, // 128
-8.549558164368785e+00, // 129
 1.137861525603124e+02, // 130
-5.676111543347402e+01, // 131
 2.597760446150157e-01, // 132
-9.498285246692981e+01, // 133
 2.176689023436776e+01, // 134
-5.589336367288955e-01, // 135
-8.440547589909630e-01, // 136
 1.221694648127522e+01, // 137
-2.703762290784692e+02, // 138
 2.264771962510430e+02, // 139
-1.858631745527615e+00, // 140
 2.195845124904765e+00, // 141
-3.365575083125115e+01, // 142
-7.108242601564218e+00, // 143
 2.475091718619069e+02, // 144
-6.561037055967295e+00, // 145
-3.631481186466402e+01, // 146
-2.583387861936103e+01, // 147
 2.590479214928112e+02, // 148
-2.081850716102304e+01, // 149
-2.380269875235291e+01, // 150
 1.383090292863005e+00, // 151
-1.465780964318573e+01, // 152
-1.791225764781641e+00, // 153
-1.709239358128890e+00, // 154
-2.044522297641132e+00, // 155
-2.563179081127097e+02, // 156
 2.911773894262669e+01, // 157
 3.473832052702792e-01, // 158
 4.551144308090829e+00, // 159
 1.845142531667918e+01, // 160
 4.336278467090020e-01, // 161
 3.274019332600991e+01, // 162
 8.993622318937130e+01, // 163
-1.254578464629642e+02, // 164
 1.801166369274973e+01, // 165
 6.326413103323807e+01, // 166
-1.993652560987495e+01, // 167
 2.520717587504535e+01, // 168
-8.510873242697119e+01, // 169
-6.840125442499850e+01, // 170
-4.924545161262161e+00, // 171
 2.190421283202322e+02, // 172
 1.151155243049002e+02, // 173
-8.084632942994347e+00, // 174
 4.354465347808696e+01, // 175
 4.074301505230897e+00, // 176
-4.995815067492583e-01, // 177
 1.381115967888738e+02, // 178
-5.655776033794378e+00, // 179
 1.810994760302231e+01, // 180
 2.366069236277883e+02, // 181
-5.037348597094265e+00, // 182
 3.713287378350285e+00, // 183
 4.459218379224612e+02, // 184
 1.844353742441545e-01, // 185
-2.109673810221429e-02, // 186
 1.580292232907078e+02, // 187
-1.174036735753034e-01, // 188
-7.539285388759897e-01, // 189
 1.303145882246104e+02, // 190
-3.696517215055223e+02, // 191
 6.023067664475216e+00, // 192
 3.078436711688100e+00, // 193
-4.131769149179691e+01, // 194
-1.003262772896701e+00, // 195
 4.277881040338660e-01, // 196
-3.007440473455116e+00, // 197
-5.035204941635406e+01, // 198
 4.440347480407377e+00, // 199
-2.207773577557285e+01, // 200
-1.437722597935242e+00, // 201
-9.481285406863219e-01, // 202
 2.249810243709176e+00, // 203
 1.057187006091636e+01, // 204
 4.620190522893207e+01, // 205
-1.525074348387242e+02, // 206
 1.466519149404582e-01, // 207
 1.208003610675616e+02, // 208
-3.704138196605355e+01, // 209
-1.688119744901660e-02, // 210
-1.603819338647242e+00, // 211
 1.487002942835366e-01, // 212
-1.627870254759969e+00, // 213
 2.523552941238574e+01, // 214
 5.362575577055578e-01, // 215
 4.611060638418257e+00, // 216
-5.238362040218132e+01, // 217
 1.682150110405682e+01, // 218
-5.528722809337242e-01, // 219
 7.664610285550203e-01, // 220
 4.069105047583218e+00, // 221
 1.914438323774992e+01, // 222
-1.258882062455936e+01, // 223
-5.587315317730072e+00, // 224
 1.034817735316076e+02, // 225
 8.547553052372492e-02, // 226
 5.750733430568070e-04, // 227
 1.004415541810093e+00, // 228
 9.678600386226381e-01, // 229
 1.454235247257770e+01, // 230
 7.105088292879311e+01, // 231
 1.437052450161236e+01, // 232
-1.015201383778479e-01, // 233
 1.201748873147793e+01, // 234
 2.595081398211939e-01, // 235
 3.253326088523446e+01, // 236
 1.011008717063377e-02, // 237
 5.744094025292160e+00, // 238
 9.871539002395840e+00, // 239
-4.274188373237123e+01, // 240
-6.944442648321552e+00, // 241
-4.101040145267956e-01, // 242
 3.189151303013094e+01, // 243
 7.151169565173926e-02, // 244
 1.175181785856687e-01, // 245
-1.066150456840925e+00, // 246
 3.768577042006109e-02, // 247
-3.415171054774726e+00, // 248
-1.435440009265475e-01, // 249
-4.429001847902075e-02, // 250
-1.062776160247313e+00, // 251
-8.432795274589787e-01, // 252
-1.342140374738420e+00, // 253
 1.302256228656842e+02, // 254
 1.019702530425080e+00, // 255
-3.524607625126615e-01, // 256
 6.085759868881341e+01, // 257
-1.023892518647589e-01, // 258
 4.919695666220826e+01, // 259
 2.077693539081152e+02, // 260
 1.701143039913279e+00, // 261
-1.916478644541070e+00, // 262
 3.263722061157884e+00, // 263
 3.738643214418128e+00, // 264
-6.594337762271961e+00, // 265
 3.926399849157957e-01, // 266
-2.076021574585139e+01, // 267
-1.465708269414986e+00, // 268
 3.879840043789846e-01, // 269
 8.827242342859499e+00, // 270
 2.141593707203032e+00, // 271
 1.096549703607054e+01, // 272
-4.186231268889897e-01, // 273
 1.056223619777841e+00, // 274
 8.373030035421652e-01, // 275
-6.722890472220949e+00, // 276
 4.255492089264040e-02, // 277
-3.197606163167735e+01, // 278
 6.875984297685124e+00, // 279
 1.665418309389253e-01, // 280
 4.733859396835914e+01, // 281
-2.362371741267585e+01, // 282
 1.237903514616833e+01, // 283
-1.452570118270205e+00, // 284
-5.821130477746631e-02, // 285
 4.568686915839526e+00, // 286
 8.067216406250283e-01, // 287
 5.635472796496189e+00, // 288
-9.095741023939789e-02, // 289
 9.178640683210260e-02, // 290
 9.915432955489016e-01, // 291
-2.653793375253333e+01, // 292
-1.141835767087012e+00, // 293
-1.512061648223606e+02, // 294
 1.842834797924621e+01, // 295
-1.326480302606739e+01, // 296
 3.312074752262868e+01, // 297
 2.065819757174149e+00, // 298
 2.666744693035719e-01, // 299
-4.094031375237732e+00, // 300
 8.786475606260044e+00, // 301
-1.095329563716972e-02, // 302
-6.237248747475766e+00, // 303
 3.680950636507366e-01, // 304
 1.995892790258621e+01, // 305
-2.441858640538048e+01, // 306
 1.661188257790168e-02, // 307
 3.730264249219955e+01, // 308
-5.132975864598435e-03, // 309
 1.106058135556309e+01, // 310
 6.161811220318802e-01, // 311
-4.751288143777971e+00, // 312
-8.487509749134863e+01, // 313
 3.691349216458598e-01, // 314
-1.150353561803606e+00, // 315
-3.099640426122839e-01, // 316
 1.874818353085454e+01, // 317
 7.991637289893430e-02, // 318
-2.102309204510426e-01, // 319
-3.793708384964006e+00, // 320
 3.781508134403669e+00, // 321
 2.271739820899525e+00, // 322
-2.430891139862765e-01, // 323
-3.150013261453108e+01, // 324
-1.747999816946499e+01, // 325
-9.169694254198520e-01, // 326
 2.464791252671155e+01, // 327
-1.584575767234888e+02, // 328
 2.520695652804446e-01, // 329
-1.346043984438592e-01, // 330
-1.358829781792472e+01, // 331
-8.429389394040113e+00, // 332
 7.530857665056969e-01, // 333
 1.971247873164370e+01, // 334
-1.189901856454773e-01, // 335
-1.675245290561311e-02, // 336
-7.886987135508569e-02, // 337
 3.040845851580431e-01, // 338
-1.247323320960486e+01, // 339
 1.033078998337759e+00, // 340
-4.991039420683099e-01, // 341
-3.234122544870834e+00, // 342
-3.522176203859834e+01, // 343
 2.727084946809044e+00, // 344
-1.872362251952933e+00, // 345
-1.524824572718069e+01, // 346
-5.364516261236728e-01, // 347
 9.413553064496851e+01, // 348
 1.397746515217163e-01, // 349
 5.987517650142155e-01, // 350
-7.485744191727025e+00, // 351
-8.521145770418354e+00, // 352
 7.159456344692230e+00, // 353
-6.249450107283937e-02, // 354
 1.275885948524865e+02, // 355
 3.048568064404188e+01, // 356
 2.135459230585894e-01, // 357
 4.192640212765368e+01, // 358
 1.026239097578076e-01, // 359
 8.004198954994965e+00, // 360
 4.846181867389436e-01, // 361
-1.008522084296164e+00, // 362
 1.100618319945750e+01, // 363
-8.704911366266053e+00, // 364
 2.942393240874961e+00, // 365
 4.433256462021151e-01, // 366
-7.153045912393192e+00, // 367
 7.470002670614095e+00, // 368
 2.432771413005205e+01, // 369
-7.315830378482865e-02, // 370
 6.424068691115590e+02, // 371
-2.087527285685810e+00, // 372
-1.888020997475598e-01, // 373
 7.123185955415761e+00, // 374
 2.380573858652761e+00, // 375
-1.185128234374745e+01, // 376
 3.584634750507660e+00, // 377
-7.779956968173654e+00, // 378
-1.027414117089030e+01, // 379
 5.981964532218064e-01, // 380
-4.658331375047242e+01, // 381
 4.483675120922104e-02, // 382
 6.913116710524559e-03, // 383
-5.007918051700041e+02, // 384
 2.079822818267602e+00, // 385
-1.248125703441181e-01, // 386
-3.414980435818465e+02, // 387
-5.787175440293580e+00, // 388
-1.617996695335821e+00, // 389
-7.830710139688347e+01, // 390
-3.065219500702080e+00, // 391
-1.131660630337718e+01, // 392
-1.869046108321489e+00, // 393
 2.069916211120220e-02, // 394
-4.415649090392519e-01, // 395
 1.632002762962480e+01, // 396
-8.448671739820459e-01, // 397
-4.976164497474889e+00, // 398
 1.736417690441750e+00, // 399
-8.837856850772603e+00, // 400
 9.910537873605257e+00, // 401
-1.308471350995047e-02, // 402
-1.798556759757911e+00, // 403
 2.022783800484552e-01, // 404
 8.598175022131612e-01, // 405
 1.239413257504652e+00, // 406
 1.265140645177305e-01, // 407
-1.506905134325670e+01, // 408
 4.169856980734438e-02, // 409
-3.750342905044279e+00, // 410
-4.187665505604808e+01, // 411
-1.748904960904236e-02, // 412
-3.945407752157464e+01, // 413
-3.499619163040116e+01, // 414
 1.134174776558979e+01, // 415
-2.113345108328194e+00, // 416
-1.683879714717929e+01, // 417
 5.224480076357453e-02, // 418
-3.899409699754385e+00, // 419
 1.223390645184411e+00, // 420
 3.576679150142784e+00, // 421
-5.954781991146867e-01, // 422
-1.680255669187768e-01, // 423
-1.609596574940138e-01, // 424
-8.610986258803596e-02, // 425
-2.094124786575149e+00, // 426
-1.473168691079968e+01, // 427
-3.908303057031723e-01  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.667085815782832e-01; // A^(-1)
    m_k_OH_intra =         2.801251345458680e-01; // A^(-1)
                           
    m_k_XH_coul =          5.080145727567770e-01; // A^(-1)
    m_k_XO_coul =          7.960520615632308e-01; // A^(-1)
                           
    m_k_XLp_main =         9.898007815044938e-01; // A^(-1)
                           
    m_d_HH_intra =         1.999999995173205e+00; // A^(-1)
    m_d_OH_intra =         1.943715330099157e+00; // A^(-1)
                           
    m_d_XH_coul =          6.344232538290123e+00; // A^(-1)
    m_d_XO_coul =          6.994867608232823e+00; // A^(-1)
                           
    m_d_XLp_main =         4.703314553986001e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_br_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_br_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_br_cutoff(double* r)
#else
void mbnrg_2b_h2o_br_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
