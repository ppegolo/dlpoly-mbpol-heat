#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
-1.619289089823933e+01, // 0
-4.153833970776455e+02, // 1
 1.578943492572361e+01, // 2
 6.352546807922990e+01, // 3
 5.636872872338738e+01, // 4
 7.592492833208729e+01, // 5
 7.779568620635746e+02, // 6
-1.637528274346041e+02, // 7
 2.370338945103429e+02, // 8
 1.627664737839015e+01, // 9
-6.428252124006067e+01, // 10
 5.243225618428233e+01, // 11
-1.657417765253192e+01, // 12
-3.748399831984703e+02, // 13
-1.793591852319438e+02, // 14
-1.197918464006785e+02, // 15
-3.492177197917986e+02, // 16
 1.988878660767962e+02, // 17
 4.108980977595525e+02, // 18
 1.556118469343216e+02, // 19
 3.605690406597940e+02, // 20
 1.491881428271500e+02, // 21
 1.449113472927651e+02, // 22
 7.404976245713779e+00, // 23
-3.563675179455234e+01, // 24
 5.991045652261572e+02, // 25
-1.772236412675533e+01, // 26
-1.869281498576421e+02, // 27
 7.667045854277862e+01, // 28
 5.638649442909625e+00, // 29
-1.181990532149277e+02, // 30
-1.191529972570298e+02, // 31
-1.891062627872426e+01, // 32
 3.920065939795504e+01, // 33
-6.672658517616803e+02, // 34
 8.361234716712625e+01, // 35
-1.199566069510470e+01, // 36
-3.623632935915695e+02, // 37
 1.634742491307658e+01, // 38
-2.681118477218491e+02, // 39
-2.751429094816494e+02, // 40
-8.565427301353532e+01, // 41
 3.576301410230590e-01, // 42
-1.492501719479913e+00, // 43
 3.593309399096150e+01, // 44
 2.230509018370540e+01, // 45
 1.436331682725128e+02, // 46
 4.952130060929330e+02, // 47
-3.837440774632193e+02, // 48
 1.645734516169463e+02, // 49
-5.031347422331427e+01, // 50
-3.632640720687413e+01, // 51
-6.923992443175690e+01, // 52
 8.873337381587474e+01, // 53
-2.687808890080718e+02, // 54
-1.425114933748684e+01, // 55
-6.557556638194367e+00, // 56
 1.760707358478202e+02, // 57
-3.127995385170245e+02, // 58
-7.915485033272711e+01, // 59
-3.445772891350819e+01, // 60
 1.703686039352040e+02, // 61
-1.648269460952895e+01, // 62
-3.353888080227183e+01, // 63
 1.412141886999076e+02, // 64
-9.899231019496945e+01, // 65
 1.224015551954718e+02, // 66
-7.166739302214332e+01, // 67
 2.096989088766670e+02, // 68
 1.818474259651943e+01, // 69
 3.230814161664016e+00, // 70
 2.723140128023295e+01, // 71
 1.760855765054323e+01, // 72
 2.475688530281299e+01, // 73
 1.433213181261626e+02, // 74
-2.922133077941936e+01, // 75
-6.332483380759092e+01, // 76
 7.301932625695648e+00, // 77
-1.926908902801892e+02, // 78
 2.038610749987099e+02, // 79
-2.463447986413334e+00, // 80
-9.791337935569518e+01, // 81
 4.638379304118874e+01, // 82
-2.051063514168530e-01, // 83
-5.438551123147410e+00, // 84
-3.340970232295429e+00, // 85
 3.418494632066947e+02, // 86
 2.262171508956789e+02, // 87
-5.147808469239389e+01, // 88
 6.099572807154726e+01, // 89
 5.997222680775984e+00, // 90
-8.019854586523290e+01, // 91
 1.436245779802341e-01, // 92
-3.879757778626179e+02, // 93
 7.307365251307736e+01, // 94
 3.448431062926955e+02, // 95
 3.424300428974607e+02, // 96
-5.673651125168279e+00, // 97
-1.428597722853968e+02, // 98
-2.100515843393693e+02, // 99
 1.194420201629362e+01, // 100
 3.270084502428659e+00, // 101
-4.513273761874706e+01, // 102
 1.139658993228724e+02, // 103
-2.624516705056344e+02, // 104
-2.672211647989755e+02, // 105
 4.803652477722586e+01, // 106
-1.629474727337394e+02, // 107
-5.643093835646288e+01, // 108
 9.742604785724784e+01, // 109
-2.121822699233588e-01, // 110
-4.153881053654795e+01, // 111
-2.148520996057014e+00, // 112
-8.019489411195867e-01, // 113
-2.378215660190697e+01, // 114
 1.075040965497057e+01, // 115
-5.183285111000379e+01, // 116
 1.184456827209844e+02, // 117
-5.799132592414122e+00, // 118
-2.148698771711748e-01, // 119
-3.344632447249840e+01, // 120
 6.016864836795520e+01, // 121
-7.766248390925552e-02, // 122
 1.337861289699050e+02, // 123
-1.539412298963689e+01, // 124
 8.322165837400506e+00, // 125
-1.904722912280049e+01, // 126
-6.328329787721856e+02, // 127
 4.332217222178240e+01, // 128
-1.997101184436420e+02, // 129
 7.444819735025482e+00, // 130
-6.810326700767547e+01, // 131
-8.710748719857956e+01, // 132
-3.459992245862640e+02, // 133
 7.631726609914500e+00, // 134
-3.038507770826906e+00, // 135
 4.462466902395542e+01, // 136
 1.308621608352491e+02, // 137
-5.753897886724673e+01, // 138
 1.182826845418606e+02, // 139
 1.925080995275755e+00, // 140
-4.020339301344745e+01, // 141
 1.737855823501149e+01, // 142
-1.486052921342126e+02, // 143
 2.073019248218403e+02, // 144
-1.017557468416819e+00, // 145
-2.641309987365833e+02, // 146
-1.086993903744871e+01, // 147
 9.869831096033417e+01, // 148
-2.419323243940017e+00, // 149
-3.534252568441842e+02, // 150
 1.858909824003798e+01, // 151
 1.385077078668141e+01, // 152
-4.115612621951581e-01, // 153
 7.078631021733370e-03, // 154
 2.357289114987238e+01, // 155
 3.893022430018270e+02, // 156
-1.026312013594955e+02, // 157
 2.137823783413744e-02, // 158
 1.388802851053033e+02, // 159
-7.354794495685889e+00, // 160
-1.143773358185920e+01, // 161
 7.692728550443714e+01, // 162
 1.012517678562357e+02, // 163
-1.158144200232704e+02, // 164
-2.385975118093808e+01, // 165
 3.513835599532298e+02, // 166
 3.264168683738302e+00, // 167
-2.533920502528850e+01, // 168
 6.377815072971230e+01, // 169
-7.298864920054084e+00, // 170
-3.162142078131369e+01, // 171
 3.498498516394249e+01, // 172
-3.951559983286071e+00, // 173
-7.234576403913650e+01, // 174
 8.485543203634298e+01, // 175
 1.274321599869420e+00, // 176
-4.015677676785343e+01, // 177
 6.262453858787133e+00, // 178
-1.179063788098847e+01, // 179
-1.813649011015060e-01, // 180
 2.350976237411625e+02, // 181
 7.850351715788246e+01, // 182
 1.072177957756964e+01, // 183
 2.526067692192829e+02, // 184
-9.395151604467934e+00, // 185
-9.724195885248106e-01, // 186
 1.806676826666186e+01, // 187
-6.102179373684701e-01, // 188
-8.866225097764784e-01, // 189
 7.465971561435289e+01, // 190
-1.636710824574687e+02, // 191
 1.841395923707066e-02, // 192
-5.834007726588552e+00, // 193
-1.424420852280329e+02, // 194
-5.634070496038274e+01, // 195
 4.785216301203534e-01, // 196
 2.076735183923899e+01, // 197
-2.135626376959303e+02, // 198
 5.841888332621966e-01, // 199
 6.071950253707267e+01, // 200
-5.334339358546806e-02, // 201
 2.199610321583623e+00, // 202
 3.180532931114080e+01, // 203
 3.874444290887124e+01, // 204
 3.758362267125088e+02, // 205
-5.150713296886305e+01, // 206
 4.320661417276844e+00, // 207
 1.554356139328375e+02, // 208
-7.125381586362170e+01, // 209
 6.072145427826576e-03, // 210
-3.129287430333343e-02, // 211
 1.806237594158413e+00, // 212
-9.621758656979004e-03, // 213
 5.269233637246013e+00, // 214
 1.005892032878151e+01, // 215
 4.262814718769533e+01, // 216
-5.195594454259257e+00, // 217
-2.887773434076491e+01, // 218
 2.766574915611935e-01, // 219
-1.156688005387867e+00, // 220
 1.032874098884928e-01, // 221
-1.418753709056176e-01, // 222
 1.746485473575131e-01, // 223
 2.758555095063079e-02, // 224
-4.557537711586190e+01, // 225
 3.137313191932801e-01, // 226
 6.992197674465815e-02, // 227
-6.956320182419516e+00, // 228
-3.082703889737185e+01, // 229
 5.691323056186667e+00, // 230
 9.232576533326711e-01, // 231
 5.328466549961941e+01, // 232
-3.145978431505997e+00, // 233
 3.953849174961563e-02, // 234
-1.492491345027932e+01, // 235
-5.366681500474746e-01, // 236
-2.097826003533222e+01, // 237
 7.274617809916846e+01, // 238
-1.951331602877981e+02, // 239
-5.006876018724147e+02, // 240
-1.866252401735159e+00, // 241
 5.055157581517514e-01, // 242
 7.434811258080852e+00, // 243
-9.961239555087453e-02, // 244
-2.346811001353691e-02, // 245
 3.085816118943815e+01, // 246
-2.068950208680445e-02, // 247
-3.021357047928582e+01, // 248
-4.330229761868019e-01, // 249
-3.676262562549660e+00, // 250
-6.457145825151643e+00, // 251
 6.022047848669154e+01, // 252
-4.771616370543465e+00, // 253
 1.668853335667569e+02, // 254
 3.293814751098172e+00, // 255
-4.967321154882044e+00, // 256
 3.330833542393535e+02, // 257
 6.305843411059450e-03, // 258
-1.429566981616589e+01, // 259
 7.812683886434782e+01, // 260
 5.692288822680406e-01, // 261
-2.721733813374502e-01, // 262
 6.241830628108644e+00, // 263
-4.763455961666310e+00, // 264
-1.450081994841718e+01, // 265
 5.083200925948783e-01, // 266
-9.463095231961307e+01, // 267
-1.728584172101772e-02, // 268
 1.575202298891688e-04, // 269
 1.074888400559155e+01, // 270
 1.871041055459792e-01, // 271
 7.121778595316277e+01, // 272
 9.781974537259373e+00, // 273
-2.044287131546007e+00, // 274
 1.672171510232018e-01, // 275
-7.702014183934236e+01, // 276
 1.437301239126448e-04, // 277
-5.852533697042412e+00, // 278
 1.308257802134988e+02, // 279
 1.590119917013437e+01, // 280
 2.703451589508502e+01, // 281
-1.802665066756045e+02, // 282
-1.292610364889014e+02, // 283
-1.024571988987812e+00, // 284
 8.684289879589908e-01, // 285
 6.488708437601709e+01, // 286
-1.146974384066501e-01, // 287
-2.296970636219498e-01, // 288
-3.855016057212270e+00, // 289
 3.090958561519484e+00, // 290
 6.878200049796163e-01, // 291
 1.023440743135773e+01, // 292
-1.020044520115724e+00, // 293
-1.491783945092135e+02, // 294
 5.080255735027213e+00, // 295
 4.070734435432188e+00, // 296
 2.779890851522515e+01, // 297
 8.765206284436437e-03, // 298
 1.559212934485878e-02, // 299
-3.566773814223673e+00, // 300
-8.225062255700877e-01, // 301
 4.951123034014320e-01, // 302
-2.684591783737651e+00, // 303
 8.051083640511795e-03, // 304
 1.311275531335519e+01, // 305
-6.029514204203357e+01, // 306
 4.984293187115643e-02, // 307
 9.839856574537176e+01, // 308
 3.858620710918000e-01, // 309
 2.720635338734679e+01, // 310
 3.809081782310826e+00, // 311
 4.042188021005113e-01, // 312
 3.294404251191676e-01, // 313
-1.276430911502876e-01, // 314
 1.400427998883580e+01, // 315
-5.083733216720599e+00, // 316
 5.389681266683853e+01, // 317
 3.781258614676373e+00, // 318
-1.144655503923786e+01, // 319
-2.190121651908173e-01, // 320
-6.173625606100180e+01, // 321
 9.758514700242447e+00, // 322
-2.420607043914405e-01, // 323
 1.857557285115114e+00, // 324
 3.247569462119298e+01, // 325
-3.284940850880395e+01, // 326
 4.723488686501486e+00, // 327
-1.434801259164196e+01, // 328
-1.913884485898712e+00, // 329
-5.965949127650076e-03, // 330
-1.275458595635709e+01, // 331
-6.916436179825575e+01, // 332
-4.647773739769948e+01, // 333
 1.302492856469014e+01, // 334
-5.778120388865265e-02, // 335
 1.002180692189642e+01, // 336
-1.159641049210867e+00, // 337
-1.169240279096888e+01, // 338
-2.579613595037879e+01, // 339
-3.392492988922160e-02, // 340
-1.091509755036850e+01, // 341
-1.581375495848088e+00, // 342
-8.655202554685799e+00, // 343
 1.529533473704203e+00, // 344
-7.157069281616931e+01, // 345
 5.462846654063431e-01, // 346
 1.197274446669077e+01, // 347
 4.240206568773992e+02, // 348
-1.957761139543069e+00, // 349
 2.583942452961345e-01, // 350
 1.168313709055024e+00, // 351
 1.201439732560583e+02, // 352
 1.183627087085686e-02, // 353
-2.404497003280801e-01, // 354
-1.671130754882777e+01, // 355
 5.260366512196195e+01, // 356
 5.936038121373252e-01, // 357
 1.434503793944865e+01, // 358
-2.721356885716967e+00, // 359
 1.191867130131617e-01, // 360
 1.631406116513178e-03, // 361
-2.974287296555681e+01, // 362
 1.353297239054541e+01, // 363
-3.058476895572428e-02, // 364
 5.200687349649631e+01, // 365
 5.039788830334937e-02, // 366
-1.307734047146527e+02, // 367
 2.905208863569412e+00, // 368
-1.640591081185372e-01, // 369
-1.301406179926515e-02, // 370
 1.455242196343960e+02, // 371
-2.964082965568470e-03, // 372
-2.370870160966821e+00, // 373
 1.023063147555682e+02, // 374
-4.923706054158598e+01, // 375
-5.916856897746037e+00, // 376
 5.241916402678333e+01, // 377
-1.790990196695910e+01, // 378
-5.529202734918850e+00, // 379
-3.153984650186663e-02, // 380
-4.158949840354129e-01, // 381
 5.308820610458826e-03, // 382
 1.496705126995908e+00, // 383
-8.195650260064509e+02, // 384
 6.956969765043250e+01, // 385
 1.649050572507832e-03, // 386
-7.056303079490694e+01, // 387
-2.189000635079210e+01, // 388
 2.149562248235088e+01, // 389
-1.386030645011182e-01, // 390
-5.510664217256782e+01, // 391
-4.530667340726557e+00, // 392
 1.074991453809549e+00, // 393
-2.393491015723674e-01, // 394
 1.851496212475065e-01, // 395
 1.807965591743751e-01, // 396
 1.105042900972062e+00, // 397
-2.492798898857573e+01, // 398
-1.553597853373515e+00, // 399
 8.922753811898331e-01, // 400
 1.354907998347729e+00, // 401
-1.822885711537360e-01, // 402
-1.560126188568890e+01, // 403
 1.231743913093954e+00, // 404
 1.524774739525773e+01, // 405
 3.477070690301026e-02, // 406
-5.609217180604613e-01, // 407
 3.945276777084147e-02, // 408
 2.868520252447770e+00, // 409
-4.756083861139935e+01, // 410
-1.814704251609074e+01, // 411
-3.240440635392472e+00, // 412
 2.934618737453742e+02, // 413
 4.731557363777945e+00, // 414
 2.236986306108320e+00, // 415
-5.582339016121896e-01, // 416
-3.254100706072647e-01, // 417
 1.809550744181847e+02, // 418
-2.992412150579412e-01, // 419
 4.197771989843798e+01, // 420
-1.292573763979546e+01, // 421
 1.267420920005882e-02, // 422
-2.294773882876123e+00, // 423
-1.459899304570617e-03, // 424
-2.473232532992486e-05, // 425
-7.397051927714107e-01, // 426
-1.473889136484610e+02, // 427
 7.202619570213483e-01  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.194771747666220e-01; // A^(-1)
    m_k_OH_intra =         3.419176497768354e-01; // A^(-1)
                           
    m_k_XH_coul =          3.332459701753808e-01; // A^(-1)
    m_k_XO_coul =          1.019254133009966e+00; // A^(-1)
                           
    m_k_XLp_main =         6.337110726760744e-01; // A^(-1)
                           
    m_d_HH_intra =         1.999993889892156e+00; // A^(-1)
    m_d_OH_intra =         1.999998660012685e+00; // A^(-1)
                           
    m_d_XH_coul =          6.981225878149538e+00; // A^(-1)
    m_d_XO_coul =          6.730321695897208e+00; // A^(-1)
                           
    m_d_XLp_main =         5.098110825415694e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_i_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_cutoff(double* r)
#else
void mbnrg_2b_h2o_i_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
