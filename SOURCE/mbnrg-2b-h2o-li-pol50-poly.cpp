#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-1.026059655035525e+02, // 0
 3.263696839824677e+02, // 1
-1.856708932291786e+02, // 2
 4.835795782433848e+02, // 3
 7.864645498397477e+02, // 4
 1.667869440716272e+02, // 5
 3.817948186645411e+01, // 6
 5.905294041875502e+02, // 7
-1.724721758859664e+02, // 8
-2.057002581542045e+01, // 9
-4.512795878958188e+02, // 10
 3.740991562245599e+02, // 11
-2.653772298020405e+02, // 12
-9.799358391384884e+02, // 13
 1.379441414374941e+02, // 14
-2.483256301149440e+02, // 15
 4.295191191987955e+02, // 16
 1.575003117715073e+02, // 17
 1.929520633732296e+01, // 18
 5.755808207912050e+02, // 19
 8.581960998626030e-01, // 20
 6.011099969166373e+02, // 21
-1.766947074688953e+02, // 22
-1.109987490508943e+02, // 23
 3.440608310618367e+01, // 24
-3.869757361265546e+01, // 25
-5.031009683094756e+01, // 26
-2.470946373353444e+00, // 27
 6.417259730721531e+02, // 28
 1.093009255745377e+03, // 29
-8.895530290949537e+01, // 30
 1.042081884774341e+01, // 31
 5.155587969761151e-01, // 32
-8.794915317844678e+02, // 33
 3.827992329505762e+00, // 34
-3.689401555167117e+00, // 35
 1.021625808613832e+02, // 36
 3.195082300736757e+01, // 37
 6.043422988844496e+01, // 38
 4.930765565944500e+00, // 39
 1.500911696460497e+01, // 40
-1.328655988904651e+02, // 41
-3.430341943461099e+01, // 42
 6.769609202200390e+02, // 43
-4.188880471149636e+02, // 44
-6.961929477500764e+00, // 45
-7.654718099101918e+01, // 46
-7.122242787358513e+00, // 47
-5.264071339457614e+02, // 48
-6.403150230399829e+02, // 49
-9.414516834755850e+01, // 50
 2.544842685894953e+02, // 51
-1.017159039533836e+01, // 52
-1.227458080810475e+02, // 53
-1.937988769692555e+02, // 54
-1.143905676009594e+03, // 55
 6.348810235138377e+01, // 56
-4.249485152737165e+02, // 57
 1.464966918278506e+01, // 58
 4.609579248571800e+01, // 59
 9.610698403029260e+02, // 60
 3.541662378328734e+02, // 61
-7.176856368634590e+01, // 62
-9.277534376352544e+02, // 63
 4.534275663420880e+01, // 64
-1.260471143873554e+02, // 65
 3.040630511906895e-01, // 66
-2.658849317438151e+00, // 67
 3.544165420982239e-01, // 68
-3.725777000151541e+02, // 69
-1.276841481998004e+00, // 70
-2.275940455008430e+01, // 71
-6.093850990944923e-01, // 72
 2.914052155492079e+02, // 73
 4.868501225518089e+00, // 74
 5.317141062589466e+02, // 75
 7.877774235745947e+00, // 76
-3.423804771945507e+02, // 77
 7.624909764742043e-01, // 78
 1.846877558507335e+03, // 79
 5.358328725810794e+02, // 80
 4.292183395538331e+01, // 81
 3.400410378878949e+01, // 82
 4.796673935134576e+00, // 83
 5.188473603217608e+02, // 84
 6.920171763660264e+01, // 85
 3.836279352382986e+00, // 86
 1.418917285265256e+02, // 87
-4.688748835352312e+01, // 88
 4.563776799071221e+02, // 89
 1.327069769210508e+01, // 90
 4.181574519510611e+00, // 91
 7.219144241880101e+00, // 92
-1.601389854440572e+02, // 93
 3.220668188244237e+01, // 94
-3.507946397363979e+01, // 95
-4.407817374865752e+02, // 96
-1.577349422300909e+01, // 97
-2.397053506156535e+00, // 98
-3.974562925655090e+00, // 99
-6.992783085144729e+02, // 100
-3.047329879675253e+02, // 101
-2.814744974134786e+00, // 102
-6.882011369911138e-01, // 103
-3.154964172027944e+01, // 104
-4.540321514982645e+01, // 105
-9.817414664547983e+02, // 106
 9.890618559785295e+00, // 107
-1.279076094102009e+03, // 108
-1.755191835318854e+00, // 109
-1.232093151432946e+01, // 110
 1.606704027750216e+02, // 111
-7.613785696245075e-01, // 112
 3.521734524369066e+02, // 113
 3.076717577395100e+01, // 114
-7.053723515206228e-01, // 115
 1.182480762837601e+02, // 116
-3.067870367999175e-01, // 117
 5.137452652058808e+00, // 118
-3.899714679602599e+00, // 119
-8.245025475589536e+01, // 120
 2.523179058238433e+00, // 121
 8.234371496435579e-01, // 122
-7.329902250331838e-01, // 123
-6.701784791724633e+01, // 124
-1.885185211060451e+00, // 125
 1.160865783220132e+01, // 126
-1.548110897436146e+00, // 127
-8.700508570718244e-01, // 128
-2.032147785353572e+02, // 129
 2.551316336540406e-01, // 130
 2.659245328908981e+02, // 131
 6.462479504262357e-01, // 132
-8.547075184949046e+00, // 133
 1.134824719364818e+00, // 134
 4.887455225254603e+01, // 135
 3.506633120338572e+02, // 136
-1.256594169863865e+02, // 137
 8.439768390812808e-01, // 138
-6.734685978180555e+02, // 139
-7.891136217675688e+01, // 140
 4.571341592543036e+00, // 141
-2.385867010942645e+01, // 142
 1.381255108962567e+02, // 143
 3.688400017921298e+00, // 144
 5.818004909953377e-01, // 145
-1.637357147758273e+01, // 146
-4.917548886404378e+01, // 147
-1.298416582211846e+01, // 148
-1.701245198565604e+01, // 149
-7.466306059212651e+00, // 150
 8.987113366668381e-01, // 151
 3.586351814988095e+01, // 152
 1.932554217169702e+01, // 153
 9.937038785376363e-02, // 154
-1.161533518981036e+01, // 155
-6.773512145268628e+00, // 156
-1.224342603432341e+02, // 157
-8.368542273226611e+00, // 158
 2.572071973386522e+01, // 159
 7.487457919030161e+00, // 160
 1.679939336047338e+02, // 161
 1.423056223570579e+01, // 162
 1.678047944485403e+02, // 163
-1.297783625404464e+02, // 164
 6.307432210338625e+01, // 165
 2.158811897539207e+01, // 166
-8.682510910688061e+00, // 167
 8.235694179311633e+00, // 168
 2.239465170935423e+02, // 169
-1.641473708097355e+00, // 170
 6.475238683462580e+01, // 171
 1.690798736762407e+02, // 172
 4.647528755555860e+01, // 173
-1.667474483998792e+00, // 174
-1.424303377817712e+02, // 175
-2.096146818017278e+01, // 176
 3.186811452897535e+02, // 177
 2.594086397890461e+00, // 178
 5.281949790904525e+02, // 179
 6.380152649979314e-01, // 180
-2.393182512412976e+01, // 181
-4.042145955612448e+00, // 182
-8.904724971642344e+02, // 183
 8.577933218470577e-01, // 184
-1.767301342034388e+03, // 185
 9.839634650089788e+00, // 186
 1.508771234875862e+00, // 187
 9.251106512436776e+00, // 188
 1.609602629988911e-01, // 189
 3.202871478066533e+00, // 190
 1.291888346720108e-01, // 191
-3.021324572475496e+00, // 192
-1.381157986207803e+00, // 193
-5.168588700858111e+00, // 194
 4.209599373107889e+02, // 195
-2.834968994379276e-01, // 196
 2.313068355679112e+02, // 197
-7.412732177365570e+00, // 198
-2.932706421812674e+01, // 199
 2.611511948386078e+02, // 200
 1.101195150211448e+01, // 201
-9.533811820367735e+00, // 202
 6.121658263696825e-02, // 203
 8.578622000127289e-01, // 204
 1.760618676099026e+01, // 205
-1.768022130174628e+02, // 206
-6.953130423608880e+00, // 207
-4.854779639772506e-01, // 208
-4.737106272566563e+00, // 209
 2.983817879573307e-01, // 210
 4.049711411047262e-02, // 211
 1.469680032560907e+03, // 212
 5.817719896961285e-01, // 213
 3.555887928434776e-01, // 214
 2.478922108796372e-01, // 215
-3.586040624998865e-01, // 216
-3.656952979040886e-01, // 217
 4.374756148155552e+00, // 218
-2.175029163487476e-01, // 219
-5.253979183421590e+01, // 220
-1.541584038272655e+00, // 221
 1.254508925881315e+00, // 222
-1.807139210475411e-01, // 223
 2.495575294206008e+01, // 224
 1.882494401405017e+01, // 225
 1.382845109184503e+01, // 226
-7.173902862991752e-01, // 227
 5.884855620423248e+00, // 228
-1.176465869220020e+02, // 229
 4.864846256850089e-01, // 230
 5.976702411366124e-01, // 231
 3.516829257764367e-01, // 232
 6.601400776740094e+00, // 233
 1.314563535065176e+01, // 234
 2.746168662445483e+01, // 235
 5.690928825174431e-02, // 236
 1.117543269624020e+00, // 237
-4.669520764625158e+02, // 238
 1.120824189013864e-01, // 239
 7.370971042154679e+02, // 240
 3.601518975150961e+00, // 241
-3.842737220298942e+00, // 242
-4.495477363930843e+02, // 243
 2.644562490491488e+01, // 244
 9.123294923411178e-02, // 245
 4.667709365128917e-02, // 246
 7.318594326848142e+00, // 247
 1.632996448486591e+00, // 248
 8.881223976078301e-01, // 249
-7.786305082123786e+01, // 250
 2.205340493327662e-02, // 251
-2.118701393882703e+02, // 252
-4.556140638541073e+01, // 253
 1.319713686853076e+02, // 254
-2.063882186673301e-01, // 255
-2.092897297382251e+00, // 256
 2.160250659674724e+01, // 257
 4.375993162776567e-02, // 258
 1.724274436719512e+01, // 259
-5.483275955633669e+00, // 260
-1.842790812748706e-01, // 261
 1.368663525635214e+01, // 262
-1.115326585227947e+00, // 263
-3.070502760588947e+00, // 264
 8.188653077525190e+02, // 265
-7.687537651006429e+02, // 266
 2.536415806187747e+01, // 267
 5.967560704645817e-02, // 268
-9.324070503990978e-05, // 269
 3.221420054613206e+01, // 270
-6.943929937746753e-02, // 271
 6.770872092028120e+00, // 272
 8.153441776516182e+00, // 273
-6.445910758347111e-02, // 274
 1.585290377261870e-01, // 275
-3.001347439395392e+02, // 276
 4.009749194227446e-03, // 277
 2.440163687413810e+00, // 278
-1.061707443162240e+03, // 279
 1.959912875145122e+02, // 280
-6.133368580349401e+01, // 281
 5.936402986934590e+02, // 282
 3.683881146855827e+00, // 283
 4.720187388624048e+02, // 284
-1.049081906365681e-01, // 285
 1.630399113117493e+01, // 286
 5.161684947194950e+00, // 287
-1.771640716021604e-01, // 288
-1.899575777481184e+01, // 289
-7.852532784502893e+00, // 290
-1.160488456745907e+01, // 291
-7.353407999824098e-02, // 292
 7.112165868934030e-02, // 293
-8.100900154336333e-01, // 294
-1.089320396398781e+02, // 295
-8.917916553226763e-01, // 296
 5.277031111818159e+00, // 297
-3.395222450644309e+00, // 298
-2.289635758019127e+00, // 299
-1.666565197257635e-01, // 300
-5.076937033613542e+01, // 301
-3.464152873090990e+01, // 302
 3.409259756987075e-01, // 303
-4.573774961518796e-01, // 304
-1.042649195985919e+00, // 305
 1.280838916709842e+00, // 306
-7.271176982935947e+00, // 307
 1.517635967504609e+01, // 308
 2.770139581305958e+01, // 309
-1.000441217130923e-01, // 310
-5.101621927959410e-02, // 311
 6.555159820680524e-02, // 312
-1.163068236909476e+00, // 313
 7.055186612661508e-02, // 314
-1.231654649274974e+00, // 315
-4.618437671611821e+00, // 316
 6.115597470463963e-02, // 317
-1.681491532933621e+02, // 318
-8.596310370142244e+02, // 319
 8.376027710761619e-02, // 320
 2.723218419595171e-02, // 321
-1.532591415257756e+01, // 322
 2.732516907072538e-01, // 323
-1.941136719122295e+01, // 324
 5.879337336625460e-03, // 325
 1.206253060589865e+00, // 326
 1.340360859342575e+02, // 327
-2.398560321017184e+00, // 328
 2.491890105221745e+00, // 329
-4.947679831795038e-02, // 330
-7.966221295279409e-01, // 331
-9.636531097450357e+00, // 332
-7.717259402300687e-02, // 333
-4.299015997710586e+01, // 334
-1.647557640627545e+00, // 335
-2.230511907597220e+00, // 336
 9.498351895540759e+00, // 337
-1.155156219104354e-01, // 338
-1.589778151788935e-02, // 339
-4.722413501679071e-01, // 340
 7.146499952615948e+02, // 341
 1.420615071347924e+00, // 342
-1.521986596237188e+01, // 343
-1.923116549827083e+01, // 344
 5.454430606697386e-02, // 345
-2.688659449078828e+01, // 346
 4.664861466610227e+01, // 347
 2.016911052984172e+00, // 348
-1.330187579379765e+01, // 349
 7.211849100209885e-03, // 350
 2.651123269399509e+00, // 351
 3.847461193838260e+01, // 352
 9.618100454836686e+00, // 353
-2.491456031438025e+01, // 354
 1.826484833990573e+00, // 355
-2.288632868701180e+00, // 356
 6.726864348863801e+00, // 357
 1.181593714166490e-01, // 358
-2.871302906121993e-01, // 359
-1.511741544458040e-01, // 360
-2.445190300817537e-02, // 361
 1.298387554628180e+00, // 362
-1.421135431521803e-01, // 363
-8.145553117048338e-01, // 364
-1.706253431895524e-01, // 365
-3.352625103976685e-01, // 366
-6.763979706336086e+01, // 367
 6.106182867255693e+02, // 368
 9.172397138973290e+00, // 369
 1.734964098854714e+00, // 370
 2.790713950356993e-01, // 371
 9.060470262956852e-01, // 372
-2.845168601995120e+01, // 373
 4.724353986407955e+01, // 374
-1.272902908606397e+01, // 375
 1.006544260143422e-01, // 376
-1.656684884211286e+01, // 377
-5.959128870988230e+01, // 378
-5.695948972226730e-02, // 379
-2.241682722230925e+02, // 380
-1.606650145347282e+01, // 381
-4.013280334204902e+00, // 382
 2.046917027992486e+02, // 383
-2.128219459786481e+00, // 384
-1.124036959712114e+02, // 385
-7.621833200908458e-01, // 386
 6.371943340786154e+00, // 387
-4.961469313706335e-01, // 388
 2.288104508833338e+01, // 389
-1.057407763233979e+00, // 390
-5.268849412272826e+00, // 391
-1.358982729395888e+00, // 392
 4.248242095564731e+00, // 393
-1.871256168524536e+02, // 394
 9.910731299284082e+00, // 395
 1.107609166783608e+01, // 396
-2.772367320195256e+01, // 397
 6.803693755043210e+01, // 398
 4.188939203356790e-01, // 399
 5.467253887662991e+00, // 400
-2.166762100823053e+01, // 401
 7.951942852456343e+00, // 402
 5.142021936659782e+00, // 403
 1.039196970847847e-03, // 404
-2.279347377110622e+00, // 405
-2.420893391096087e-02, // 406
 6.521278816552917e+02, // 407
-1.358418505163730e-02, // 408
-2.281795851719411e+00, // 409
 3.812876235122889e+01, // 410
-1.100573789779369e-01, // 411
 4.648394598504552e-02, // 412
 2.057250556026580e+00, // 413
-1.617835831704567e+00, // 414
-9.357385062754189e+01, // 415
 1.460831726274755e+01, // 416
 1.868338814305188e+02, // 417
-1.176981754673432e+00, // 418
-4.147816712722145e+02, // 419
-7.156300603179283e+02, // 420
-7.610754367527870e-01, // 421
-2.153721903248815e-02, // 422
 2.840071922506384e+00, // 423
 5.531896878054168e-01, // 424
-1.779869839147001e-04, // 425
 7.099090690613212e-02, // 426
-2.822641989340704e+02, // 427
 6.010514168202159e+00 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         1.933419667152400e-01; // A^(-1)
    m_k_OH_intra =         1.999999989505011e+00; // A^(-1)
                           
    m_k_XH_coul =          1.289635628159724e-01; // A^(-1)
    m_k_XO_coul =          8.402101499475487e-01; // A^(-1)
                           
    m_k_XLp_main =         1.209163031510111e+00; // A^(-1)
                           
    m_d_HH_intra =         3.701703442148330e-01; // A^(-1)
    m_d_OH_intra =         1.999999870730651e+00; // A^(-1)
                           
    m_d_XH_coul =          5.049015463253291e+00; // A^(-1)
    m_d_XO_coul =          5.301588865907062e+00; // A^(-1)
                           
    m_d_XLp_main =         3.389828039668528e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.000000000000000e+00; // A
    m_r2f =  6.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_li_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_li_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_li_cutoff(double* r)
#else
void mbnrg_2b_h2o_li_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
