#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-1.305780582415673e+02, // 0
-5.187981626281316e+01, // 1
 1.475496620320224e+02, // 2
 2.925811119032981e+01, // 3
 2.463219737231938e+00, // 4
-3.058965921130174e+02, // 5
-3.185955136098843e+02, // 6
-2.050805559892114e+00, // 7
 2.006542144084165e+02, // 8
-6.460044396005021e+01, // 9
 5.013123501719976e+02, // 10
 2.560448283454208e+01, // 11
 1.035291699643545e+02, // 12
-2.506547841856720e+01, // 13
 1.263249472697588e+02, // 14
-9.883189157612829e+01, // 15
-3.799634948308422e+01, // 16
-1.391242051007822e+02, // 17
-8.175140254479884e+01, // 18
-4.024086330620802e+00, // 19
-1.073353280734787e+02, // 20
-3.992685397775038e+00, // 21
 1.710230356733383e+00, // 22
 3.261040873571384e+01, // 23
-5.932838164177174e+02, // 24
 2.127338102956915e+02, // 25
-3.778643481334149e+02, // 26
 7.065951988991128e+01, // 27
 1.754175743434752e+02, // 28
 3.251812626323735e+02, // 29
 1.622435161610727e+00, // 30
-1.259895513803277e+01, // 31
 1.236701898040230e+00, // 32
-2.089583964609851e+02, // 33
 1.336674995584575e+01, // 34
-4.434244787760837e+01, // 35
-2.850432562701111e+00, // 36
-1.127976418212387e+02, // 37
-1.880882318252469e+01, // 38
 3.433126425713332e+02, // 39
 3.046355161867439e+02, // 40
-2.991483435937750e+00, // 41
 1.130736063891041e+02, // 42
 1.809641660424692e-02, // 43
 1.098601567031435e+02, // 44
 1.575201540595670e+01, // 45
 5.784340797619969e+00, // 46
 3.506579501707107e+00, // 47
-1.104441988134611e+01, // 48
 4.054086140988804e+00, // 49
-9.746358776048181e+01, // 50
-2.104325852830209e+01, // 51
-2.426658967421019e+01, // 52
 5.677101205014349e+02, // 53
-1.301702732256250e+02, // 54
-5.733826795060676e+02, // 55
-5.963570071243453e+01, // 56
-1.864477164273458e+02, // 57
-6.958814553012506e+01, // 58
 2.340943099211289e+02, // 59
-1.129737138452283e+01, // 60
-1.594340479158931e+02, // 61
-1.243064107044695e-02, // 62
 4.559456360600453e-01, // 63
 5.044315577955836e+01, // 64
-1.346753805893308e+00, // 65
 1.105161333466165e+02, // 66
-2.067381879898000e+01, // 67
-2.614252665788825e+02, // 68
-1.985758217659304e-03, // 69
 1.160978359732828e+02, // 70
-7.975716774265823e-02, // 71
-1.187994007125276e+01, // 72
 2.689495121495131e+02, // 73
 3.096798064369925e+00, // 74
 3.625613181581535e+02, // 75
 1.285908607594022e+01, // 76
 9.678616978730223e-02, // 77
-9.779594716037695e-01, // 78
 2.889247766120165e+01, // 79
-3.995186894891571e+00, // 80
-1.558070132338036e+02, // 81
 1.808284638541654e-02, // 82
-5.106724764111552e-01, // 83
-1.528357432721327e-02, // 84
-4.800305706873399e-05, // 85
-4.787681337552996e+01, // 86
-1.333388299410327e+00, // 87
-5.971452579665508e+02, // 88
 3.887075904444631e-01, // 89
-5.263912378288099e+00, // 90
-2.116967577500031e+02, // 91
 1.263026658153266e+02, // 92
-1.043523910962969e+01, // 93
-3.783995945371893e+01, // 94
 6.725865899354618e+01, // 95
 6.795669818835888e+00, // 96
 3.466080412862614e+02, // 97
-3.715796030705025e+02, // 98
-1.259136839491085e+02, // 99
 3.201596153200399e+00, // 100
 3.876656923732118e-02, // 101
-1.758335586514271e+00, // 102
 3.205634555997727e+01, // 103
 1.092718861446334e+02, // 104
-1.719942856252688e+00, // 105
-9.284435138544331e-01, // 106
 8.295952687087589e+01, // 107
-1.448266065323329e+01, // 108
-9.207365070576984e-01, // 109
 6.505937511791554e+00, // 110
-4.035565998077775e+00, // 111
 3.542307499750841e+00, // 112
 6.166570140327008e-03, // 113
 1.393033895660686e-02, // 114
 1.717915989720524e+01, // 115
 2.185825820837162e+02, // 116
 4.193697432677664e+01, // 117
-7.797713385199402e-01, // 118
 6.286596383867266e+01, // 119
-7.462020410080183e+01, // 120
 2.731991637559263e+02, // 121
-3.187795890517602e+01, // 122
-5.973211497759898e+01, // 123
-1.354149525845787e+02, // 124
-1.413552748186380e+02, // 125
 1.191261791827442e-01, // 126
 8.975862973394557e+01, // 127
 1.568222408876080e+02, // 128
 1.264747910815156e-02, // 129
 2.348824710584565e+02, // 130
-6.690053562542928e+01, // 131
-8.510305046005732e+01, // 132
-1.481379383333668e+00, // 133
-3.679536961452946e+01, // 134
 1.303062566548595e+01, // 135
-7.171191404793639e-01, // 136
 5.851805605345307e-03, // 137
-5.043005690856499e+01, // 138
-1.983278087884230e+02, // 139
 4.245218525231754e-01, // 140
 2.924757109697521e-01, // 141
-3.397930174597458e+01, // 142
 4.003761028081076e+02, // 143
 5.295869891037871e+01, // 144
 1.933112294599991e+02, // 145
-3.171953135108402e+00, // 146
-6.288819936425940e-01, // 147
-4.937148610372083e+02, // 148
-1.730176978880676e+02, // 149
 2.095780072006251e+01, // 150
 3.473777201070504e+01, // 151
 5.005359957680674e+01, // 152
-2.439789228352402e+01, // 153
 1.887589402175110e+01, // 154
-3.580518114700506e+00, // 155
-7.230651428200035e+01, // 156
 1.992073238553160e-01, // 157
 2.054011731524159e+01, // 158
-3.222229789589233e-02, // 159
 1.260061894280777e+02, // 160
-1.225805576734312e-04, // 161
 2.567339616300524e-01, // 162
 9.768144109316691e-01, // 163
 7.824544196129689e+01, // 164
 1.170882569567803e+00, // 165
 3.651004814351931e+01, // 166
-3.095615681609914e+02, // 167
 3.900140284961013e+00, // 168
-2.299375522256003e+00, // 169
 2.886647155357967e+02, // 170
 1.229854783501158e-03, // 171
-1.273352286587890e+02, // 172
 4.609339373322919e+00, // 173
-2.606109120794379e+01, // 174
-1.860392270934754e+02, // 175
 2.148510237045916e+01, // 176
-1.816345660199311e-01, // 177
 5.041166156602088e+01, // 178
-1.032732866993669e+00, // 179
-1.914495534813593e+02, // 180
 4.143985315019996e+01, // 181
-1.793437581313193e+01, // 182
 3.293929283318005e+00, // 183
 3.167588241520572e+02, // 184
-1.427034748549495e-04, // 185
 1.192545760687518e-03, // 186
 5.623992676945527e+01, // 187
-6.750661703348095e-03, // 188
-6.148259600739080e-02, // 189
 4.044117295011146e+01, // 190
-4.608881617914319e+01, // 191
-7.356867624854674e-01, // 192
 4.027146175638618e+00, // 193
-2.170675421617527e+00, // 194
-2.830536130046016e-05, // 195
 1.017591293911537e-01, // 196
-3.865670306180903e-03, // 197
-1.751465520030290e+01, // 198
-8.805310412060204e-01, // 199
-1.053737570362794e-01, // 200
 2.402267273256816e-01, // 201
-1.717296224051185e-01, // 202
 1.717347042065915e+01, // 203
 8.608553140490713e-01, // 204
 8.943977394011823e-01, // 205
-3.341816948222633e+01, // 206
 2.326321162575730e-03, // 207
 1.935646340967539e+02, // 208
-4.412670224663614e+01, // 209
 1.207954751751916e-04, // 210
 2.416265316591108e+00, // 211
-1.999577566074200e-05, // 212
-2.019806874219347e+01, // 213
 4.228837641827421e+00, // 214
 1.727520081629812e-01, // 215
-2.010903112515391e+01, // 216
 4.244021709308695e+00, // 217
 7.308945792166115e+00, // 218
-2.100912232364855e-01, // 219
-4.575396657875029e-03, // 220
 2.363950499036068e+01, // 221
 5.163468630129911e+01, // 222
-2.426220583127640e+01, // 223
-4.366575760793409e-01, // 224
 1.473149893246370e+00, // 225
-4.027760649225123e-04, // 226
 3.760349076911833e-09, // 227
 1.010516723811324e-01, // 228
 1.275925039744441e-02, // 229
 2.692921712926539e-01, // 230
 7.430825397942207e+00, // 231
-1.011840972486973e-01, // 232
-2.456424934542610e-06, // 233
-8.621177407635854e+01, // 234
-6.566863424447214e-02, // 235
 1.703223212723845e+02, // 236
-3.811137843981707e+00, // 237
 4.947356796484665e-03, // 238
-3.419054178974167e+02, // 239
-3.157997845877275e+00, // 240
 1.710459544782837e+00, // 241
 1.977664661155230e-03, // 242
 2.805501091402723e+00, // 243
-2.220127825019183e-07, // 244
 4.035920595767486e-04, // 245
 6.643435247714594e+01, // 246
-1.496980324352851e-03, // 247
 1.872477415350431e-04, // 248
-1.208270727469525e-04, // 249
-2.439379454150934e-03, // 250
-1.700539136856326e+01, // 251
 1.438963995993710e-01, // 252
-1.795625913977414e+00, // 253
 1.582480205110142e+01, // 254
 1.587163396698048e-02, // 255
-1.139281093474093e-02, // 256
 1.247779553317633e+01, // 257
-8.674297580981791e-02, // 258
-1.312514955963222e+02, // 259
 7.683731045087649e+01, // 260
-1.466921368260311e+01, // 261
-1.394153696949374e+01, // 262
-5.487835641575518e-01, // 263
-9.922406804142319e-01, // 264
 1.896290997902236e-02, // 265
 2.441618641995349e-03, // 266
-1.348543889314886e-02, // 267
 1.769296482683057e+01, // 268
-5.740210583756717e-01, // 269
 6.810505547359147e-01, // 270
-1.779616460848841e+00, // 271
 3.711233479376850e+01, // 272
 5.298024269954480e+00, // 273
 6.201821368456431e+01, // 274
 1.223193380956111e-01, // 275
-1.802454763252042e-01, // 276
-1.594269067825951e-02, // 277
-3.446862919887979e+00, // 278
 2.119663551143629e-03, // 279
-2.996020927865678e-05, // 280
 1.039969189130206e+01, // 281
-4.732185223149265e-01, // 282
 2.764933035996899e+00, // 283
 2.172382648616936e-03, // 284
-1.634715825582383e+00, // 285
 2.612743970876253e-01, // 286
 3.528571157961634e-01, // 287
 1.271029042835494e+02, // 288
 1.934861474174406e-05, // 289
 4.620549913501877e-04, // 290
 2.450023507854084e+00, // 291
-9.528158020713066e+01, // 292
 4.421311886342203e+00, // 293
-3.316167368410190e+01, // 294
 1.004943240541340e+00, // 295
-5.525092115295673e-01, // 296
 8.085930763302838e+01, // 297
-1.743510312081538e-01, // 298
 8.731098289248230e+00, // 299
-6.931680515190627e+00, // 300
 1.267273945349291e-01, // 301
 4.885026496876929e-08, // 302
 8.106410029140993e+01, // 303
 2.666825231157267e-01, // 304
 5.840630211510749e-02, // 305
-2.636853864383391e+00, // 306
 1.006072183684797e-06, // 307
 1.452116055560696e+00, // 308
-1.103522451606803e-08, // 309
 3.776541801702639e+01, // 310
 1.284438748753176e-01, // 311
-5.908461008493640e+01, // 312
 4.573196370431430e+01, // 313
 4.725260026670597e-01, // 314
 3.113101946736004e-01, // 315
 1.436621558236317e-04, // 316
 6.493951708223490e+01, // 317
-3.285926273875309e-07, // 318
-1.240473605483381e-03, // 319
 1.909263260572413e+02, // 320
 2.827662359994414e+01, // 321
 6.017480979120811e-03, // 322
-1.153820013596979e-02, // 323
 5.969336898729649e+01, // 324
 7.405922918756470e+00, // 325
-6.858430438771226e-02, // 326
-1.297702760050778e+01, // 327
-1.100246500644005e+02, // 328
-1.384539008669397e-03, // 329
 3.039119305577405e-02, // 330
-7.380129380482717e+00, // 331
-3.030841122988332e-01, // 332
 5.217576948435253e+00, // 333
-5.188580279761926e-02, // 334
 2.005837961141758e-06, // 335
 3.069124901853292e-02, // 336
 1.462577279175191e-05, // 337
-1.997798761132006e+02, // 338
-2.289254344868956e+01, // 339
-4.052205630291757e+00, // 340
-8.800068294361591e-04, // 341
-6.130493282948096e+00, // 342
-1.326247295494076e+01, // 343
-2.144955997814472e-01, // 344
-1.543287049457793e+01, // 345
 6.444272794722146e+01, // 346
 2.335264296171401e-03, // 347
 6.956941449668044e+02, // 348
 4.460155828735399e-02, // 349
-8.341605653840448e+01, // 350
-2.303588879408863e+01, // 351
 7.392123620073305e-01, // 352
-4.701411612994072e+01, // 353
-2.829789461589544e-07, // 354
-2.820793958101934e+02, // 355
 1.348816998977126e+00, // 356
-4.011000483730056e-05, // 357
-2.256578893495905e+00, // 358
-1.029671410310287e-01, // 359
-1.056148626486775e+02, // 360
-6.079338108314344e+00, // 361
-9.815693045777922e-03, // 362
-4.075978880508013e+01, // 363
-8.371173034750828e+01, // 364
 2.736581415639091e+01, // 365
 3.800609938472169e-02, // 366
-1.381240668387520e-02, // 367
-7.700124781656523e-02, // 368
 3.650741229061498e+01, // 369
 2.254988772480982e-05, // 370
 2.146954053556859e+02, // 371
-4.272358707719128e-01, // 372
 6.458540208754453e-05, // 373
 9.743054794511746e-01, // 374
 2.931060339889175e-01, // 375
 6.235098676507959e-01, // 376
 1.111457165685256e-03, // 377
 6.372975292667848e+00, // 378
-5.803767366165101e+01, // 379
-2.152657621121302e-02, // 380
-3.036698923048317e+01, // 381
 3.913993528352196e-05, // 382
 4.292054482349219e-07, // 383
-1.483923237147476e+02, // 384
-1.951696900412626e-03, // 385
 5.476355413877938e-03, // 386
-2.364704447460793e+02, // 387
-7.106940139951035e+00, // 388
 1.071317572601527e-01, // 389
 3.575476436792165e+02, // 390
-2.237390231109933e-02, // 391
-1.849375847062386e+00, // 392
 3.974155831378943e+00, // 393
-2.318851285853467e-06, // 394
-1.145623322963977e-01, // 395
 2.310947121372011e+01, // 396
 1.818630086010381e-01, // 397
-1.557190171095778e-01, // 398
 1.783666212196752e+01, // 399
 2.125369217336637e+00, // 400
-5.509843951212407e+01, // 401
-8.354566884765597e-07, // 402
 3.323365319273740e-02, // 403
-7.939544078235073e-01, // 404
-5.814377286300539e-01, // 405
-1.530573056229082e+02, // 406
 3.543820497071915e-03, // 407
-7.706702692370649e+01, // 408
 6.804859909763640e-04, // 409
 1.283754106979613e+01, // 410
-2.657573132741676e+02, // 411
 4.997049585076778e-01, // 412
-1.365191217735975e+01, // 413
 1.247087111565752e+02, // 414
 2.175876462729944e+00, // 415
-1.329165481408021e-02, // 416
-4.721836379597902e+00, // 417
 2.270706359126131e+00, // 418
-2.735296749845635e-03, // 419
-1.505378435628785e-02, // 420
 2.155955478426956e-02, // 421
-1.611293257839239e-01, // 422
 7.567388176087209e-05, // 423
-3.449930445516915e+00, // 424
 1.958706236340447e-01, // 425
-3.928458397928827e+00, // 426
-2.634901840912616e-01, // 427
 1.135640818827231e-02 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         4.486412984013282e-01; // A^(-1)
    m_k_OH_intra =         2.965785746708369e-01; // A^(-1)
                           
    m_k_XH_coul =          8.934833554680240e-01; // A^(-1)
    m_k_XO_coul =          5.895664191492318e-01; // A^(-1)
                           
    m_k_XLp_main =         8.239634871980352e-01; // A^(-1)
                           
    m_d_HH_intra =         1.964432833377021e+00; // A^(-1)
    m_d_OH_intra =         8.287277878813175e-01; // A^(-1)
                           
    m_d_XH_coul =          6.737948652308653e+00; // A^(-1)
    m_d_XO_coul =          6.186091861788619e+00; // A^(-1)
                           
    m_d_XLp_main =         4.401618921395108e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cs_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_cs_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_cs_cutoff(double* r)
#else
void mbnrg_2b_h2o_cs_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
