#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-2.268295242837376e+02, // 0
 1.550923545921577e+02, // 1
-1.141042332561956e+02, // 2
 3.097798423752227e+02, // 3
 6.688091656541823e+02, // 4
 2.376200967773352e+02, // 5
 1.222249848621419e+02, // 6
 4.674469982016017e+02, // 7
-6.850813587806257e+02, // 8
-1.227943417589514e+02, // 9
-3.798047213773723e+02, // 10
 1.637378677175239e+02, // 11
-3.291866156407733e+01, // 12
-3.553081707416318e+02, // 13
 6.021769591029793e+02, // 14
-4.077233530725780e+02, // 15
 2.845815564231434e+02, // 16
 3.387220198454082e+02, // 17
 5.370515650851323e+01, // 18
 2.858983903549162e+02, // 19
-2.755367310866130e+01, // 20
 9.475667548894484e+02, // 21
-6.954645451787772e+01, // 22
-3.214086049651696e+01, // 23
 6.755146323181542e+01, // 24
 1.101501118985537e+00, // 25
-1.718184550190269e+02, // 26
-1.594915755826835e+02, // 27
 5.298019577441241e+02, // 28
 6.475402595110369e+02, // 29
-9.919802695720800e+02, // 30
-2.835401322917075e+01, // 31
-4.317380600558022e+02, // 32
-2.725792984344852e+02, // 33
 1.468763213298581e+02, // 34
-2.438889080194370e+02, // 35
 3.225648200444584e+02, // 36
 3.238063473042154e+01, // 37
 3.977685749976068e+02, // 38
 2.031183252928634e+02, // 39
 8.509152703285937e+01, // 40
-9.384740237586199e+02, // 41
-1.118702472645313e-01, // 42
 7.201068921360858e+02, // 43
-5.444431236117028e+02, // 44
 2.096855766516467e+01, // 45
 2.145945672424868e+01, // 46
-9.763616796142415e+01, // 47
-6.835679375896050e+02, // 48
-8.037345894173578e+02, // 49
-1.325930330039272e+01, // 50
 7.936762696340313e+01, // 51
-5.136800692870634e+02, // 52
-4.312480832076151e+02, // 53
 2.736246755956733e+01, // 54
-4.518005879193669e+02, // 55
-3.182360153465619e+00, // 56
-4.448158247743945e+02, // 57
 6.489759036481430e+02, // 58
 2.763301041912939e+02, // 59
 5.757211962721362e+02, // 60
 9.296245949574796e+02, // 61
 1.491861312904853e+02, // 62
-4.563186487175157e+02, // 63
 2.166939301977251e+01, // 64
 2.854226323706148e+02, // 65
 4.962675710641374e+01, // 66
-1.844848769345542e+02, // 67
 1.951051450718972e+01, // 68
-2.362472705128019e+02, // 69
-2.617777808270562e+00, // 70
-3.554919556728227e+01, // 71
-2.630032323090598e+01, // 72
 1.866812124983092e+02, // 73
 2.739093475897863e+02, // 74
 1.059119711857746e+02, // 75
 7.492232852474952e+01, // 76
-4.142690759158339e+02, // 77
-8.787429042005437e+00, // 78
 9.338368323941827e+02, // 79
 8.047234656380019e+01, // 80
 1.078646442740497e+02, // 81
 3.154578379096484e+02, // 82
 9.668775320042355e-01, // 83
 3.606611578893302e+02, // 84
 1.020720869312762e+02, // 85
 1.838030294494151e+02, // 86
 5.788233908475958e+02, // 87
-1.887703374990794e+02, // 88
 1.027316053281741e+03, // 89
 9.255228312883145e+01, // 90
 1.500941012207137e+01, // 91
-2.793146846443048e+00, // 92
-1.676628404367231e+02, // 93
-7.509208866584444e+01, // 94
-1.242966295381633e+03, // 95
-4.943324224295804e+02, // 96
-6.668752563646304e+01, // 97
-1.237631937809553e+02, // 98
-1.259509406779945e+02, // 99
-4.851936481074766e+02, // 100
-8.946252894518236e+01, // 101
-6.298930052159482e+01, // 102
-6.443681623069238e+00, // 103
 7.456533480708006e+01, // 104
-2.294178954569434e+02, // 105
-8.155228991305527e+02, // 106
 4.778608265971886e+02, // 107
-1.142112950684055e+03, // 108
-3.567761546697947e+01, // 109
 2.152247092834805e+00, // 110
-1.982190408906441e+01, // 111
 5.610617771047675e+00, // 112
 1.034404939033671e+02, // 113
 2.810234809119749e+02, // 114
-2.159201528057071e+01, // 115
 4.018822208929988e+00, // 116
-1.584637164611634e+01, // 117
 5.937425982046725e+02, // 118
-6.596602334061639e-01, // 119
-2.594069110361927e+01, // 120
 6.500506576570636e+01, // 121
 2.619026718616739e-02, // 122
-2.964606462878368e+01, // 123
-3.953799256824350e+02, // 124
-1.563049476590465e-01, // 125
 7.803905694030304e-01, // 126
 4.625442390428377e+01, // 127
-8.373238476885583e-01, // 128
 2.252830395584094e+01, // 129
 5.022944381868213e+00, // 130
 2.068340764613656e+02, // 131
 2.059828300898934e+00, // 132
-6.734743562386901e+02, // 133
-2.107738044452969e+01, // 134
 2.251250984817633e+00, // 135
 1.437343910950249e+02, // 136
-7.479001660687048e+02, // 137
 2.494758776710175e+01, // 138
-2.602170294862179e+02, // 139
-2.272479673606558e+01, // 140
 5.419757431610183e+01, // 141
-3.708908737491165e+01, // 142
 4.297346227967715e+02, // 143
 2.143866491481607e+02, // 144
 5.930768301638509e-02, // 145
-7.677036718104848e+01, // 146
-3.456489956162405e+02, // 147
-3.680978798943698e+02, // 148
 1.448878482388416e+01, // 149
-1.144438804628208e+01, // 150
 1.682257771896785e-01, // 151
 6.042219591376470e+01, // 152
 1.595308296243512e+00, // 153
 3.729402280555148e-03, // 154
-6.192674833201282e+00, // 155
-1.967959077552843e+02, // 156
-2.064248618122322e+02, // 157
-3.983919978540790e-01, // 158
-2.598738889162835e+01, // 159
 8.591063912188279e-01, // 160
 2.724449849173666e+02, // 161
 2.886061611822902e+02, // 162
 5.959766728264087e+02, // 163
-4.870082390253930e+02, // 164
 2.430126207232220e+02, // 165
 6.524184308989638e+02, // 166
-5.825752170506827e-01, // 167
 6.829216853495677e+01, // 168
 1.439045307525512e+03, // 169
-2.320558934837520e+01, // 170
-4.072424494356585e+02, // 171
 3.473064823961829e+02, // 172
 1.022045144753264e+02, // 173
-6.441641076580433e-01, // 174
-9.256940393417237e+01, // 175
-8.248606513575893e+00, // 176
 2.228811550621405e+02, // 177
 8.601527495432296e+01, // 178
 2.854360455566625e+02, // 179
 5.669194012145742e-01, // 180
-8.801238321099678e+02, // 181
-5.224190051524464e-01, // 182
-2.416093950144457e+02, // 183
 4.128441205040588e+01, // 184
-2.310661284294910e+03, // 185
 1.140765346930666e+01, // 186
 4.900260811419949e+01, // 187
 3.447380192847366e+01, // 188
 3.364060587111863e-02, // 189
 1.606095637992406e+02, // 190
 2.588512508226128e+01, // 191
-3.152196016377050e+00, // 192
-6.149967595314119e+00, // 193
-1.741350162100083e+02, // 194
 5.008970547189650e+02, // 195
-5.432254762209828e-02, // 196
 1.339425838767560e+03, // 197
 4.778285577371646e+01, // 198
-9.899530586448178e+00, // 199
 1.431340186228578e+03, // 200
 1.577686551686394e+01, // 201
-2.746427648091811e+01, // 202
 1.682375220981341e-01, // 203
 6.980286658612040e+01, // 204
 1.749500088131008e+01, // 205
-4.378124890097415e+02, // 206
-4.832628303293166e+01, // 207
-1.709887560791316e+01, // 208
-2.353789937059150e+02, // 209
 2.083590815241500e-02, // 210
 1.824960393516527e-03, // 211
 1.661343925146648e+03, // 212
 3.995305409027804e-01, // 213
 7.188795197325577e+00, // 214
 1.436382304035767e-01, // 215
-1.954718749487280e+01, // 216
-2.951032134782007e+01, // 217
-2.002946655397524e+00, // 218
-3.738739685590277e+00, // 219
-1.506041437303599e+02, // 220
-2.061818310535851e+00, // 221
 1.341103683987488e+00, // 222
-1.873781224648182e+00, // 223
 2.859588328364852e+00, // 224
 4.598477537581368e+02, // 225
 3.704078532090418e+00, // 226
-5.983483190397612e-01, // 227
 4.254335415489243e+01, // 228
-3.093653594897855e+01, // 229
 1.392187403558436e+01, // 230
 3.661737400119761e+00, // 231
 3.510352949948427e+01, // 232
 5.184475555586563e+00, // 233
 1.624759335726119e+01, // 234
 1.212654114212031e+01, // 235
 5.368802993886223e-01, // 236
 3.615240219439099e-01, // 237
-4.963032527157127e+02, // 238
-4.785609245973387e+00, // 239
 5.120398188148890e+02, // 240
 7.830334327463612e+00, // 241
-1.291082538703524e+00, // 242
-1.813403735433993e+02, // 243
 8.988283961183592e+00, // 244
 3.095421204140466e-02, // 245
 1.890893300919500e+00, // 246
 2.679841756659700e+01, // 247
 1.650530796597556e+02, // 248
 3.442559793532675e-01, // 249
-5.911963870770929e+01, // 250
-8.073014653932772e-03, // 251
-4.855677099023059e+01, // 252
-6.903294469498080e+01, // 253
 5.769029514255546e+02, // 254
-1.550939913203735e+00, // 255
-1.970932708471743e+02, // 256
 5.934830357369088e+01, // 257
 3.115820448214776e-04, // 258
 5.213764157603020e+01, // 259
-1.780547848011377e+02, // 260
-8.755130661801068e-01, // 261
 6.367644060765197e-01, // 262
-4.791466889281986e+00, // 263
-1.068393380038016e+01, // 264
 3.822536481666303e+02, // 265
-2.094621706016552e+02, // 266
 1.176391699260369e+02, // 267
 3.651330877128700e-02, // 268
-8.060165169245769e-06, // 269
 9.827918147663691e+01, // 270
-5.720757953494355e-03, // 271
 1.823912110700158e+01, // 272
 1.280810510627964e+00, // 273
-1.224766400464031e-03, // 274
 2.472781207784047e-02, // 275
-1.492078082859085e+03, // 276
 8.082576135261940e-05, // 277
 7.063131666871789e+01, // 278
-8.900715461190829e+02, // 279
 6.696750947305750e+01, // 280
-3.108235817289099e+02, // 281
 1.416390821800474e+02, // 282
-1.176678023824591e+01, // 283
 1.155683824919364e+02, // 284
-1.750265669623412e-02, // 285
 1.056498148635445e+02, // 286
 7.847966751574852e+00, // 287
-1.402125952307661e-01, // 288
-1.626930433412632e+02, // 289
-5.468120994125206e+01, // 290
-1.027247834230321e+00, // 291
-1.393897876772314e+00, // 292
 1.457183118422534e-02, // 293
-3.811284727658717e+01, // 294
 3.814577372545165e+01, // 295
-2.061443640354108e+01, // 296
 1.430193627041807e+02, // 297
-2.186738133282227e-01, // 298
-8.085133794665206e-02, // 299
-6.250819754784608e+00, // 300
-4.889781839423643e+01, // 301
-5.356456069072512e+01, // 302
 7.866804209447682e+00, // 303
 1.496070636910369e-01, // 304
-2.269438236372000e+02, // 305
 2.120939010387589e+02, // 306
-2.827688177561389e+00, // 307
 9.952486064075439e+02, // 308
 2.291324173282451e+01, // 309
-2.807887180083549e+00, // 310
-1.488547667379084e-02, // 311
 7.169791255178173e-02, // 312
-1.569825605736834e+01, // 313
 5.779980615084458e-03, // 314
 4.493050526765302e+00, // 315
-5.526893908802722e+01, // 316
 1.991427960901351e+00, // 317
-1.732003018848521e+02, // 318
-5.040494563067990e+02, // 319
 1.238723765960684e+00, // 320
 1.052663845027902e+00, // 321
-9.643490492236816e+01, // 322
 1.073993165632307e-01, // 323
-3.711696479870791e+01, // 324
 2.579502098966168e+00, // 325
-7.005382695802719e-01, // 326
 3.109218403402949e+01, // 327
-5.518688243965716e+01, // 328
 1.502895910525695e+00, // 329
-3.009176753648083e-03, // 330
-3.773908122793416e+01, // 331
-5.245330220199118e+01, // 332
-1.578442295000924e-01, // 333
-1.106533419579366e+02, // 334
-2.258097315189909e-01, // 335
-1.276340908283526e+01, // 336
 9.448652552897107e+01, // 337
-2.796182395072306e+00, // 338
 6.949076143426445e+00, // 339
 6.338710927496718e-02, // 340
 3.779331349379518e+02, // 341
 4.110237336888882e+00, // 342
-1.621523964160653e+00, // 343
-5.120697651922413e+01, // 344
 2.554900934420179e+00, // 345
-4.999993641992692e+00, // 346
 2.459552281948564e+02, // 347
 7.524183173789410e+01, // 348
-6.362120359773220e+00, // 349
-3.589274283827199e-02, // 350
 5.912874410623877e+00, // 351
 6.724444963508786e+01, // 352
 6.915795334757481e-01, // 353
-1.306160310303193e+01, // 354
 3.854882333028414e+01, // 355
-1.230316657994633e+02, // 356
 2.020728009557802e+00, // 357
 3.010475618290484e+01, // 358
-1.299105933588384e-01, // 359
-1.856559531386369e+00, // 360
-7.671508122942396e-03, // 361
 9.340781292875744e+01, // 362
 1.177576792655376e-01, // 363
-3.706662011846380e-01, // 364
 1.476163017534885e+00, // 365
-1.234792151974029e-01, // 366
-1.884936606696312e+02, // 367
 1.241879244321590e+02, // 368
 4.585150066488254e+00, // 369
 4.670987430774398e-01, // 370
-1.114561162349087e+01, // 371
 4.939539846558403e-01, // 372
-1.853226148953840e+01, // 373
 1.769596225441721e+02, // 374
-9.876788366903465e+02, // 375
-2.083766991929076e+00, // 376
-1.168241055861481e+02, // 377
-2.838255028391161e+01, // 378
-1.675578109912574e+00, // 379
-3.064195050416878e+01, // 380
-1.374307866853979e+01, // 381
-3.048566645884313e+01, // 382
 1.641519054648833e+02, // 383
-8.262078095225017e+01, // 384
-8.123518330021529e+02, // 385
-4.865652053673827e-02, // 386
 1.095515404547979e+02, // 387
-1.549759600616266e+01, // 388
 1.184548749450191e+02, // 389
-1.235405492719315e+01, // 390
-4.630496517588193e+02, // 391
-5.682324013862089e+01, // 392
 1.820970161284447e-01, // 393
-7.773133604690729e+01, // 394
 2.327483196369899e+00, // 395
 4.624686894196743e+00, // 396
-5.541240190535629e+00, // 397
 2.299475123265301e+01, // 398
 6.428593831421841e+00, // 399
 9.404488793374259e+00, // 400
 4.245507841258261e+00, // 401
 5.750429711383219e+00, // 402
 2.223193706710778e+01, // 403
-5.734474256600829e-04, // 404
-3.165313067908855e-01, // 405
-2.173341019396676e-01, // 406
 1.943070398777703e+02, // 407
-6.196417783737523e-02, // 408
-1.522387454840994e+00, // 409
 5.837625941978674e+00, // 410
-1.885084401019455e+00, // 411
 1.477849813514078e-02, // 412
 7.348222876690784e+01, // 413
-2.988998202740780e+00, // 414
-1.327491655814493e+01, // 415
 4.825901621277142e+01, // 416
 4.114110675942174e+01, // 417
 5.348943581365938e+01, // 418
-4.851643873431098e+01, // 419
-3.597404538573286e+02, // 420
-1.028386443660784e+02, // 421
-9.808448639552568e-04, // 422
 1.149055480133294e+01, // 423
 1.319493903663682e-02, // 424
-1.682344560011078e-06, // 425
 6.487422229667337e-03, // 426
-1.271443052167298e+02, // 427
 5.115335989511358e+02 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         1.853385891498456e-01; // A^(-1)
    m_k_OH_intra =         1.999999373313378e+00; // A^(-1)
                           
    m_k_XH_coul =          1.017361590017279e-01; // A^(-1)
    m_k_XO_coul =          7.742905945638343e-01; // A^(-1)
                           
    m_k_XLp_main =         1.124477532713349e+00; // A^(-1)
                           
    m_d_HH_intra =         1.680174389725735e+00; // A^(-1)
    m_d_OH_intra =         8.721727668657013e-01; // A^(-1)
                           
    m_d_XH_coul =          6.431110784338681e+00; // A^(-1)
    m_d_XO_coul =          6.745514805141323e+00; // A^(-1)
                           
    m_d_XLp_main =         3.768024943617683e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.000000000000000e+00; // A
    m_r2f =  6.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_li_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_li_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_li_cutoff(double* r)
#else
void mbnrg_2b_h2o_li_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
