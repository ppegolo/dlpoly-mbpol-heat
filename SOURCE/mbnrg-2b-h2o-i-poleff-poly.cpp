#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
-4.380361232689882e-01, // 0
-2.987056917540709e+02, // 1
 4.263063532983639e+01, // 2
 1.538427289022133e+02, // 3
 8.907433087848887e+01, // 4
 1.732664639338173e+02, // 5
 5.845568746246167e+02, // 6
-3.078335058321011e+02, // 7
 2.672504052998528e+02, // 8
-1.780091100347562e+01, // 9
 1.256870339752150e+00, // 10
 1.126164886892584e+01, // 11
 1.763486102768928e+01, // 12
-2.400149700878321e+02, // 13
-2.555765761075100e+02, // 14
-9.159479539226220e+01, // 15
-3.200769991579812e+02, // 16
 1.933043172048277e+02, // 17
 3.314803840214198e+02, // 18
 1.396003044575039e+02, // 19
 2.918817956538365e+02, // 20
 3.070382237858805e+02, // 21
 2.233474629040406e+02, // 22
 2.946842950824271e+00, // 23
-8.162017481021499e+00, // 24
 4.594806211224459e+02, // 25
-3.583293365190941e+01, // 26
-5.032036471722682e+01, // 27
 7.440616686010490e+01, // 28
 8.298624737974909e-01, // 29
-2.218022404645723e+02, // 30
-1.509876076835630e+02, // 31
 2.649216665808497e+01, // 32
 1.134038620335677e+01, // 33
-5.832966868645617e+02, // 34
 3.896591947304250e+01, // 35
-1.509521828922047e+01, // 36
-5.888914915573488e+02, // 37
-7.435458317701749e+00, // 38
-1.846537144131840e+02, // 39
-4.646232803600611e+02, // 40
-1.827506260902326e+02, // 41
 6.236549620109753e-02, // 42
 3.065842531498829e+01, // 43
 1.438061522863123e+02, // 44
-1.140564236220608e+02, // 45
 6.093607216438353e+01, // 46
 8.298715632176828e+02, // 47
-2.757539532976759e+02, // 48
 2.473006857217125e+02, // 49
-3.282481996463053e+01, // 50
-2.673320015037272e+01, // 51
-2.021153636990334e+01, // 52
 7.705032443237673e+01, // 53
-1.956050983304298e+02, // 54
 5.872062962769289e+01, // 55
-1.914524270357117e+00, // 56
 2.865298689112169e+02, // 57
-2.520996889899525e+02, // 58
-1.618210850782885e+02, // 59
-2.475314402996356e+01, // 60
 4.204627333362643e+01, // 61
-2.226287965333382e+01, // 62
-3.247294412726178e+01, // 63
 1.242476432612403e+02, // 64
-4.443064655389210e+01, // 65
 7.523074197675645e+01, // 66
-1.393840744539445e+02, // 67
 5.492510825508291e+02, // 68
 3.293280541129225e+01, // 69
 1.181596219016737e+00, // 70
 3.316849746784322e+01, // 71
 1.521997285129319e+01, // 72
 1.658590931373793e+01, // 73
 3.667345049452423e+02, // 74
-9.224917823217732e+00, // 75
-1.098563286661425e+02, // 76
-8.998542500228447e+01, // 77
-5.091286795409374e+02, // 78
 1.462760176863756e+02, // 79
-1.178145212821567e+00, // 80
-5.887055769029160e+01, // 81
 1.005090830835547e+02, // 82
-1.084596985870387e-01, // 83
-6.868841394964156e+00, // 84
-8.073555432882653e+00, // 85
 2.064390805827722e+02, // 86
 4.054081354165864e+02, // 87
 2.684498796393157e+01, // 88
 7.906151279670448e+01, // 89
 2.863725891575900e+00, // 90
-6.019697991743138e+01, // 91
 2.028963141855798e-02, // 92
-3.480766391303056e+02, // 93
 1.872652148955094e+02, // 94
 2.038297413334786e+02, // 95
 5.338862937914416e+02, // 96
-5.492999182090774e+01, // 97
-1.498317650632122e+02, // 98
-1.945889048059065e+02, // 99
 1.400771451279810e+00, // 100
 3.917622538220910e+00, // 101
-1.216838274488565e+02, // 102
 1.835107282753567e+02, // 103
-2.269774202955088e+02, // 104
-5.061930940036155e+02, // 105
 3.736077522601243e+01, // 106
-9.043906415364066e+01, // 107
-1.064720111697237e+02, // 108
 2.767267643539144e+02, // 109
 8.543749509398106e-01, // 110
-5.659891551416461e+01, // 111
-1.164482443777423e+00, // 112
-1.216289855588791e+00, // 113
-6.511344916956892e+01, // 114
 1.321408541021680e+01, // 115
-2.720640047595853e+01, // 116
 2.730685850407873e+02, // 117
 4.359596596969412e+01, // 118
-5.698311702256792e-01, // 119
-2.318140582920122e+01, // 120
 4.787908765371062e+01, // 121
-6.880729348040720e-03, // 122
 1.748323689684096e+02, // 123
-3.093825012562912e+00, // 124
 5.152748130724972e+00, // 125
-2.513904672239341e+01, // 126
-4.564842009074351e+02, // 127
 2.828682165990333e+01, // 128
-3.653387973818562e+02, // 129
 2.336579404960029e+00, // 130
-1.495128935744009e+02, // 131
-9.226170366257556e+01, // 132
-6.696120991232907e+02, // 133
 1.038749609178739e+01, // 134
-9.936978988770421e-01, // 135
 7.018888546743642e+01, // 136
 2.346620521873032e+02, // 137
-5.434971735352269e+01, // 138
 6.723066790376132e+01, // 139
 1.616929911248462e+00, // 140
-1.002795343343687e+02, // 141
 5.573913263764704e+00, // 142
-1.105550645063413e+02, // 143
 3.585231065583370e+02, // 144
-4.182205644062095e-01, // 145
-3.709391615799842e+02, // 146
-5.731298490651775e+01, // 147
 6.929516684724513e+01, // 148
-5.727661053137832e-01, // 149
-4.589327729820432e+02, // 150
 2.144320006316459e+01, // 151
-2.280220008682462e+01, // 152
-1.474698200308935e-01, // 153
 4.685179653523257e-04, // 154
 3.147859269110857e+01, // 155
 2.728447403013868e+02, // 156
-2.019620636552316e+02, // 157
 4.808801926615773e-03, // 158
 2.744149826637513e+02, // 159
-2.860696274635044e+00, // 160
-2.667071407157855e+01, // 161
 8.670680565715193e+01, // 162
 1.765551193328564e+02, // 163
-2.811366419300811e+02, // 164
-1.725420548652418e+01, // 165
 3.302670597495004e+02, // 166
 9.130471199397540e-01, // 167
-1.827858560638003e+01, // 168
 1.995488052933378e+02, // 169
-3.763588573707421e+00, // 170
-3.294483909195896e+01, // 171
 3.711809655905627e+01, // 172
 1.306884644368376e+00, // 173
-7.375006108205440e+01, // 174
 4.485490292059346e+01, // 175
-9.929420185084550e-01, // 176
-4.016614191634433e+01, // 177
 1.147204098676624e+01, // 178
-3.019760465666761e+01, // 179
-4.515424820076035e-02, // 180
 1.983632492840237e+02, // 181
 7.184811999598399e+01, // 182
 8.392709969426143e+00, // 183
 2.414237191704830e+02, // 184
-2.957136427928645e+01, // 185
-3.995564799131187e+00, // 186
 2.392912570209127e+01, // 187
-8.239379481576142e-01, // 188
-9.470946597517650e-01, // 189
 1.533635355212119e+02, // 190
-1.505744754190909e+02, // 191
 4.273676893711863e-02, // 192
-8.792094763848883e+00, // 193
-3.568811381319018e+02, // 194
-1.116259126322127e+02, // 195
 4.872046511850355e-01, // 196
 3.179304983280774e+01, // 197
-2.201363097396276e+02, // 198
 8.524182738011467e-01, // 199
 1.717695476172914e+02, // 200
-2.970626842011379e-02, // 201
 2.642824484530187e+00, // 202
 3.398190883341838e+01, // 203
 9.461408463833682e+01, // 204
 5.762389643919653e+02, // 205
-5.210698444344919e+01, // 206
 8.873852448791721e+00, // 207
 3.426502183521726e+01, // 208
-8.250281947286788e+01, // 209
 2.151900210021548e-03, // 210
-1.121594935203484e-02, // 211
 9.360326078592330e+00, // 212
-5.032387124642890e-03, // 213
 3.925531770891986e+00, // 214
 1.274838047640679e+01, // 215
 7.019582508059585e+01, // 216
-7.302555552673821e+00, // 217
-3.012932358985984e+01, // 218
-2.587470659488127e-01, // 219
-1.668835376492217e+00, // 220
 8.789753850913035e-02, // 221
 2.039828659840510e-01, // 222
 1.685556457256009e-01, // 223
-6.263538990407029e-02, // 224
 4.755028631207692e+01, // 225
 4.594845065723365e-01, // 226
 2.617129731056058e-01, // 227
-9.852574133792347e+00, // 228
-4.648867821686348e+01, // 229
 1.929947491855091e+01, // 230
 5.403727457924975e-01, // 231
 1.206195905014458e+02, // 232
-5.318763586999312e+00, // 233
 8.758069124194043e-02, // 234
-3.096269556322968e+01, // 235
-3.503726012388311e-01, // 236
-1.980353343931985e+01, // 237
 1.169503062824743e+02, // 238
-2.264304539188892e+02, // 239
-7.024785503290614e+02, // 240
-1.861832594777733e+00, // 241
 5.073152101190226e-01, // 242
 8.807448979962665e+00, // 243
-1.161121488517873e-01, // 244
-1.808642597997403e-02, // 245
 4.048516498595662e+01, // 246
-4.524948333575371e-02, // 247
-7.209044974692732e+01, // 248
-3.446019609125857e-01, // 249
-5.155772121797430e+00, // 250
-4.520932801080338e+00, // 251
 7.754905208797808e+01, // 252
-7.352155026325568e+00, // 253
 2.653906722002752e+02, // 254
 9.832207440863346e+00, // 255
-2.887689262201135e+00, // 256
 5.381558312314620e+02, // 257
-4.902221074747058e-03, // 258
-7.275088979471083e+01, // 259
 6.309758725084337e+01, // 260
 3.228769716573552e-01, // 261
-2.467816784105442e-01, // 262
 9.814407784541034e+00, // 263
-4.301299472160820e+00, // 264
-1.344811414723002e+01, // 265
 7.620186201284953e-01, // 266
-1.608234189882738e+02, // 267
-9.708850130332866e-03, // 268
 3.140127141624024e-05, // 269
 1.166174398593945e+01, // 270
 1.248674782309150e-01, // 271
 1.439415491972855e+02, // 272
 2.503517545404383e+00, // 273
-2.105147279730454e+00, // 274
 1.025419172664740e-01, // 275
-8.793193261787847e+01, // 276
 1.785924756814909e-05, // 277
-7.706466794095611e+00, // 278
 2.506512426948008e+02, // 279
 3.486996197326407e+01, // 280
 2.551448220045065e+01, // 281
-3.182354011071349e+02, // 282
-1.950932576067258e+02, // 283
-3.334039375576349e-01, // 284
 9.756407143185072e-01, // 285
 1.129468527203001e+02, // 286
-8.812523245897287e-02, // 287
-4.700077658491755e-02, // 288
-8.128001011855988e+00, // 289
 6.250992986733179e+00, // 290
 1.413264565028761e+00, // 291
 1.032133392709857e+01, // 292
-7.435167109889473e-01, // 293
-2.918185165790350e+02, // 294
 6.889951564681749e+00, // 295
 3.609891941735195e+00, // 296
 2.964800764442488e+01, // 297
 5.670841832819669e-03, // 298
 9.840793203659194e-03, // 299
-1.352740587713692e+01, // 300
 2.196976602571451e+01, // 301
 1.626972003754730e+00, // 302
-2.718447099729711e+00, // 303
 3.029985454677269e-02, // 304
-8.916548886994303e+01, // 305
-1.089088429840758e+02, // 306
 6.636450215338693e-02, // 307
 1.505861721824753e+02, // 308
 9.074219507731417e-01, // 309
 2.664935350319869e+01, // 310
 6.010294605290980e+00, // 311
 1.533703869635652e-01, // 312
 8.022428077249499e-01, // 313
-9.353745560732725e-02, // 314
 1.636820813726169e+01, // 315
-1.193895487454842e+01, // 316
 6.659111838221725e+01, // 317
 7.199472407677218e+00, // 318
-2.667177186313801e+01, // 319
-2.874500268681019e-01, // 320
-1.066142472818362e+02, // 321
 2.332973081259172e+01, // 322
-1.671061194352387e+00, // 323
-7.583735107772241e-01, // 324
 7.515139539569520e+01, // 325
-5.569945935155252e+01, // 326
 7.246833239032096e+00, // 327
-1.435235729729387e+01, // 328
-2.988866813350096e+00, // 329
-1.618650515559517e-03, // 330
-5.747708588542541e+01, // 331
-1.265719964920226e+02, // 332
-4.983786895579453e+01, // 333
 1.332130091965579e+01, // 334
-4.056241560930131e-02, // 335
 2.065502048883540e+01, // 336
-2.583874216360587e+00, // 337
-8.403122316010792e+00, // 338
-5.371409114682252e+01, // 339
-5.953649007051307e-02, // 340
-2.088331002307218e+01, // 341
-1.984792583970633e+00, // 342
-8.787430176183053e+00, // 343
 1.505165728535906e+00, // 344
-1.235221913885163e+02, // 345
 7.917676825549481e-03, // 346
 2.681041954346464e+01, // 347
 5.205052374115189e+02, // 348
-3.155491336941934e+00, // 349
 1.916886495276216e-01, // 350
 1.546710996436282e+00, // 351
 1.572484251704729e+02, // 352
 9.873651544943624e-03, // 353
-6.507332369940597e-01, // 354
-8.218385976984694e+00, // 355
 1.118674024392937e+02, // 356
 7.344935119376459e-01, // 357
 2.600748164150112e+01, // 358
-1.381470629714078e+00, // 359
 7.601103212114971e-02, // 360
 4.485797530931534e-04, // 361
-8.116772251936811e+01, // 362
 3.860048686915257e+01, // 363
-1.795657914858139e-02, // 364
 6.451016063602526e+01, // 365
-6.377297074278021e-04, // 366
-2.854842232299025e+02, // 367
 3.304842816588161e+00, // 368
 7.149456124090078e-02, // 369
-1.377204026695274e-02, // 370
 1.444772274447885e+02, // 371
-2.467189065899068e-03, // 372
-6.601693088232443e+00, // 373
 2.133073590716534e+02, // 374
-1.301245120793844e+02, // 375
-8.134622473933923e+00, // 376
 1.004658244930940e+02, // 377
-2.611297853895913e+01, // 378
-4.836731869288979e+00, // 379
-4.315129091562424e-02, // 380
-3.542394106485582e+00, // 381
 1.122062142370448e+00, // 382
 2.980717231720117e+00, // 383
-1.014701709386557e+03, // 384
 1.559613937632245e+02, // 385
 1.434803741284934e-03, // 386
-6.471708072568612e+01, // 387
-5.663479647470466e+01, // 388
 2.715661529945049e+01, // 389
-3.174545684689817e-01, // 390
-1.191205181080227e+02, // 391
-6.601039164954656e+00, // 392
 4.075652709223774e-01, // 393
-3.346238999988035e-01, // 394
 3.959368483845466e-01, // 395
 1.979080420435726e-01, // 396
 1.894607117327310e+00, // 397
-4.033762877590450e+01, // 398
-1.115819395562373e+00, // 399
 7.530798928524559e-01, // 400
 1.246761858034677e+00, // 401
-4.881119392201488e-01, // 402
-2.314027178382636e+01, // 403
 8.686445897647307e-01, // 404
 1.693660100503301e+01, // 405
 1.808080972800788e-02, // 406
-2.098433856804432e-01, // 407
 1.683045640635453e-02, // 408
 4.062969717698430e+00, // 409
-5.551135358892078e+01, // 410
-1.391952323746740e+01, // 411
-5.128292823719422e+00, // 412
 2.119295054561995e+02, // 413
-2.615258766816434e+00, // 414
 2.762878415664781e+00, // 415
-1.202874934491493e+00, // 416
-3.083007781632984e-01, // 417
 4.793989011927778e+02, // 418
-1.919994353019450e-01, // 419
 5.443264329682847e+01, // 420
-1.812567989075464e+01, // 421
 4.401631855995580e-03, // 422
-4.237202089156384e+00, // 423
-4.451486014900718e-04, // 424
-1.605817608109737e-06, // 425
-1.250263129380846e+00, // 426
-1.929208002363187e+02, // 427
 6.592421231876348e+00  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.004807874831417e-01; // A^(-1)
    m_k_OH_intra =         3.320183070941838e-01; // A^(-1)
                           
    m_k_XH_coul =          3.754530993760760e-01; // A^(-1)
    m_k_XO_coul =          1.075911169692660e+00; // A^(-1)
                           
    m_k_XLp_main =         7.040107549061330e-01; // A^(-1)
                           
    m_d_HH_intra =         1.999743935581367e+00; // A^(-1)
    m_d_OH_intra =         1.505311089967528e+00; // A^(-1)
                           
    m_d_XH_coul =          5.846580266522743e+00; // A^(-1)
    m_d_XO_coul =          6.997415465992746e+00; // A^(-1)
                           
    m_d_XLp_main =         4.710698892206315e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_i_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_cutoff(double* r)
#else
void mbnrg_2b_h2o_i_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
