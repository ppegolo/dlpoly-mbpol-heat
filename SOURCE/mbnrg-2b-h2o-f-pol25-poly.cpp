#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
 9.493561463896451e+01, // 0
-1.469362654292558e+03, // 1
 9.900781406002407e+02, // 2
 1.665443243737024e+01, // 3
 1.999237922503142e+01, // 4
-7.107864554889930e+01, // 5
 1.578728095293659e+03, // 6
-1.389774688368792e+01, // 7
 2.667596404342594e+02, // 8
-9.860226035397245e+02, // 9
 8.377555881699568e+00, // 10
-1.422382765134497e+01, // 11
-4.670832288718059e+02, // 12
 3.073491916836736e+00, // 13
-3.198822128676363e+02, // 14
 2.976084701723229e+02, // 15
-5.853633614972492e+02, // 16
 2.813046804868083e+02, // 17
 3.042997661745057e+01, // 18
 6.726956283559787e+02, // 19
 2.420463214089246e+02, // 20
 5.638166016388429e+01, // 21
 6.805603272226192e+00, // 22
 6.091024072738583e+00, // 23
-5.379187140630479e+01, // 24
 1.700031723065122e+01, // 25
 1.391716185941903e+02, // 26
 7.155429838863124e+02, // 27
-4.416195186724734e+01, // 28
-2.159463472966960e+02, // 29
 7.393943979861178e+00, // 30
 1.894111227178955e+01, // 31
 1.402455460537926e+00, // 32
 9.815948589654913e+01, // 33
-1.217971096203076e+03, // 34
 2.699125621832145e+02, // 35
-1.072379988023873e+00, // 36
-6.155053244926545e+01, // 37
-3.597859787353253e+02, // 38
-3.935158645041730e+02, // 39
-4.233478499831592e+01, // 40
-8.380745064581047e+00, // 41
-7.171211447618473e+00, // 42
 1.724058467726427e-01, // 43
-4.347227686585616e+02, // 44
-5.002725375602931e+01, // 45
 1.795684073492895e+01, // 46
 2.316379212370446e+01, // 47
-3.440728222523288e+01, // 48
 3.461888480433322e+00, // 49
-1.761565871223927e+01, // 50
-1.408825218573446e+01, // 51
-3.112524527160153e+01, // 52
 2.737795634607498e+02, // 53
 7.616022205609029e+02, // 54
 4.275160856049282e+02, // 55
 2.124943545863136e+01, // 56
 4.629514216397847e+02, // 57
-2.125580265345118e+02, // 58
-3.662219460654105e+02, // 59
-2.987009135346363e+00, // 60
-3.361223107464600e+02, // 61
 5.011060134431369e-02, // 62
-6.096849419039800e+00, // 63
-1.120151342839136e+00, // 64
-5.343719414205781e+01, // 65
-4.117788534212246e+01, // 66
 2.308466287946174e-01, // 67
 6.107910302176392e+01, // 68
-5.276307911131661e-04, // 69
-2.427281850372340e+01, // 70
 1.401587898475308e-02, // 71
 1.147212957887269e+01, // 72
-8.013478414071074e+02, // 73
 2.614466477863924e+00, // 74
-2.049920245783002e+02, // 75
-6.129420477656669e+00, // 76
 1.878448202392743e+01, // 77
-2.399434451549144e+00, // 78
 7.381495525015733e+01, // 79
 3.673424748027443e-03, // 80
-3.148327392568891e+02, // 81
-1.443375498556786e-02, // 82
 1.629196928198401e-03, // 83
-3.557746009358410e-03, // 84
-4.707292505288195e-05, // 85
-4.716442170377714e+01, // 86
 1.741768175815627e+00, // 87
 9.302744780997430e+02, // 88
 4.230118193575225e-01, // 89
-2.809692738727630e+00, // 90
 5.564301142033575e+01, // 91
-4.344538423709686e+00, // 92
-1.802602412127996e+02, // 93
 5.787949643140926e+01, // 94
 3.708488777137882e+02, // 95
 1.082665965758866e+00, // 96
-1.008237361569933e+02, // 97
-1.165574827670100e+02, // 98
-3.104179041503068e+00, // 99
-8.330055278956642e-01, // 100
 2.436221273648149e-03, // 101
-8.720527647339678e-01, // 102
-3.170901791826113e+01, // 103
-5.684239628571905e+01, // 104
-3.339179945029562e+00, // 105
-2.377068149597404e-01, // 106
-1.302271422908825e+02, // 107
-1.206779616689710e+02, // 108
-4.592446751508318e+00, // 109
-1.621126319434695e-01, // 110
 1.764724575958282e+00, // 111
-4.829036883808836e+00, // 112
 6.335970794360917e-04, // 113
-6.880231366632454e-02, // 114
-2.030142768482849e+02, // 115
-1.119917189620417e+01, // 116
 6.807560624354207e+01, // 117
-1.903974322941036e+00, // 118
-5.829196650665701e+00, // 119
-6.171025216916435e+00, // 120
 5.727015005734791e+01, // 121
-8.110913922193265e-02, // 122
-7.374082281178168e-01, // 123
 3.676566337682455e+02, // 124
-6.105503735607829e-01, // 125
 8.017318971335279e-02, // 126
-5.082874603467203e+02, // 127
 2.147696428333718e+01, // 128
-5.877017831772210e-02, // 129
 8.620160508228757e+01, // 130
-2.927341863291505e+02, // 131
 7.834263586597510e-02, // 132
-1.012945491968466e+01, // 133
 1.300894897441653e+01, // 134
 1.369175012515201e+00, // 135
 2.181751814007366e-02, // 136
-1.596752618635272e-01, // 137
-4.604097407640081e+01, // 138
 5.434932954923347e+02, // 139
-1.021806372429800e-02, // 140
-5.756929495713980e+00, // 141
 1.269973448523404e+02, // 142
-5.561972708470390e+02, // 143
 1.511267954449887e+01, // 144
 3.521284084427255e-01, // 145
-1.439265545366923e+01, // 146
-1.847037126449039e+00, // 147
 2.851857385822616e+02, // 148
 1.511538399110509e+01, // 149
-1.530757782415430e+01, // 150
 6.159025594432725e-01, // 151
 4.752615221453470e+01, // 152
 1.049412473318526e-01, // 153
 6.859870164015645e-03, // 154
 1.457140625866218e-01, // 155
 2.933785107801086e+02, // 156
 7.184191938091526e+00, // 157
-2.605551282048638e-02, // 158
-6.753594316858402e-02, // 159
-2.013079544456202e-01, // 160
-1.028472317855363e-04, // 161
 2.617244756465126e-01, // 162
 2.644038679481415e+01, // 163
 2.972674284419332e+01, // 164
 1.343222219065373e+00, // 165
 6.373130077615968e+01, // 166
 1.447546666069856e-01, // 167
 6.338892500789117e-01, // 168
-2.324517424214977e+00, // 169
-2.674809501038586e+01, // 170
 4.635181248069494e-03, // 171
 3.083421367458372e-01, // 172
 2.595512898075924e+00, // 173
-6.158118984212310e-01, // 174
-5.912465849601082e+01, // 175
-2.235038605402386e-01, // 176
 1.568747688203764e-02, // 177
 6.351066921181218e+00, // 178
 4.749369456819551e-02, // 179
 7.799506634686149e+00, // 180
-6.771433265660216e+02, // 181
 1.011615586651922e+00, // 182
-1.771123137198870e-02, // 183
 4.777144313906471e+02, // 184
 1.049306275866615e-04, // 185
 1.178955697446434e-04, // 186
 5.836254081564516e+01, // 187
-5.918927246616903e-04, // 188
 5.459553528678114e-03, // 189
-1.587950564004661e+01, // 190
-5.354747895536368e+02, // 191
-1.252961929177523e-01, // 192
 4.004023433722009e-02, // 193
-7.163058543860389e+00, // 194
-4.394817092285533e-03, // 195
 8.389380074922452e-03, // 196
 1.024905963193698e-02, // 197
 3.780183100950406e+01, // 198
 1.245680720233419e-02, // 199
-2.479826879806969e+00, // 200
-6.069751560455355e-03, // 201
 9.499470321305750e-02, // 202
 8.158613655840663e-01, // 203
 2.675230201586938e-01, // 204
-2.798374806339645e+00, // 205
-5.222726489807733e+01, // 206
 6.784290103928565e-04, // 207
-4.047430857466659e+01, // 208
-2.393726949451180e+01, // 209
-1.988031849093298e-04, // 210
 2.553479240717303e-02, // 211
-2.201137586840469e-05, // 212
-9.098808649295576e-03, // 213
-5.791960411312900e+00, // 214
 2.765338772079362e-04, // 215
 8.339498198541069e-01, // 216
-9.944924164523905e-01, // 217
 2.396079070900140e+00, // 218
 2.785503988335836e-03, // 219
 1.025532123308422e-03, // 220
 3.456317792859751e-02, // 221
-1.078891114267391e+01, // 222
 2.450606459059418e+00, // 223
 8.825013940870403e-02, // 224
-8.053485869184945e+01, // 225
-1.568580561161544e-04, // 226
-5.942807167139807e-08, // 227
-5.453444477391224e-03, // 228
 9.623639007530785e-03, // 229
 3.758555428975877e-01, // 230
-1.458795530977004e+01, // 231
 8.661329748730081e-01, // 232
-1.530575488169882e-05, // 233
 5.274326358801745e+01, // 234
-6.902561007603197e-03, // 235
 6.956381802793056e+00, // 236
-2.176872388636840e+00, // 237
 2.826573300551294e-01, // 238
 2.421353777538221e-01, // 239
-5.701862568117466e+00, // 240
 1.012557882798821e-01, // 241
-2.430824191571044e-03, // 242
 6.012690308555578e-01, // 243
-7.071732641307934e-06, // 244
 8.398368089020572e-04, // 245
 2.035048209952079e+00, // 246
-2.812542247263371e-04, // 247
 4.822976442045305e-03, // 248
-1.242038762692596e-03, // 249
 1.570414931039549e-05, // 250
-1.753655651070441e-01, // 251
 1.264188032870702e-01, // 252
 4.693505661001358e-02, // 253
 6.908139998784949e+01, // 254
 4.652585827402255e-02, // 255
 2.077950181801272e-02, // 256
 1.001739640335624e+01, // 257
-4.468812724767299e-03, // 258
 2.152493706047053e+02, // 259
 1.815632854402124e+02, // 260
 1.073913796097254e+00, // 261
-2.292785001117326e+00, // 262
 3.198937558973743e-02, // 263
-2.770779539231994e-01, // 264
-1.646200714395138e-01, // 265
 6.680459625110768e-04, // 266
-6.211850481856167e-01, // 267
-9.884114456491143e-02, // 268
-6.682584806819786e-03, // 269
 1.061463482869262e-01, // 270
-3.822171892156425e-02, // 271
 8.992947158640578e+01, // 272
-9.949981655231023e-01, // 273
-6.928238064478748e-02, // 274
-1.738681979021864e-03, // 275
-4.750087662875472e+00, // 276
-3.549104327762107e-06, // 277
-9.769049091111883e-01, // 278
 2.795732688145933e-02, // 279
 4.791140955522155e-05, // 280
-2.160433272656684e+01, // 281
-2.079619981021223e+00, // 282
-4.202820115647611e+00, // 283
-5.930893755514814e-03, // 284
 8.770098113521863e-03, // 285
-6.731395308781318e-02, // 286
-3.025900083669650e-02, // 287
 3.806251686787540e-01, // 288
-1.744891981942049e-05, // 289
 4.171357532256921e-04, // 290
 3.078543162778161e+00, // 291
-9.688741146883283e+00, // 292
 3.184540037405881e-02, // 293
-8.322883679022208e+01, // 294
 1.358578894631439e+00, // 295
-2.620042744274849e-01, // 296
 1.307920096076966e+01, // 297
-2.634674259430904e-02, // 298
 6.746458464170423e-01, // 299
 1.043204690640196e+00, // 300
-4.889807011307115e+00, // 301
 2.730474912702949e-07, // 302
-7.333621803368195e-01, // 303
-4.478866667861570e-05, // 304
 2.859374027458851e+00, // 305
 4.510780943179182e+01, // 306
-1.181691031728936e-06, // 307
 4.313095164049821e+00, // 308
 1.518870193640262e-07, // 309
-2.781909035435541e+01, // 310
-9.923814672826704e-03, // 311
-5.543793693886899e-01, // 312
 3.454403498262953e+01, // 313
-1.596320481839322e-02, // 314
-1.475438687351182e-01, // 315
 7.340811709654639e-06, // 316
 9.989917743201508e+00, // 317
-6.814706781913773e-06, // 318
 4.559098619517922e-03, // 319
 1.216240683776098e+01, // 320
 2.497917964195766e+00, // 321
 1.280659117079180e-03, // 322
-4.745280862443559e-03, // 323
-1.416195662939460e+02, // 324
 2.711277440833882e+00, // 325
-8.568601769160658e-02, // 326
-9.940531322568540e-01, // 327
 8.277583577775754e+00, // 328
 1.797250733736848e-03, // 329
 7.120346160243380e-04, // 330
 7.527595230398993e+00, // 331
-1.621695917230917e-01, // 332
-2.878497419334516e-01, // 333
 3.409963279523200e-01, // 334
 2.084146158312564e-06, // 335
-3.815378761228373e-03, // 336
 5.864569134135613e-06, // 337
-1.233671980395651e+01, // 338
-1.143005898860153e+00, // 339
-1.448479617628447e+00, // 340
-1.050129111535331e-03, // 341
-5.479522311972266e-02, // 342
 4.235081318450093e+00, // 343
 2.167973188288767e-02, // 344
 1.598368279180274e+01, // 345
 7.252064107521750e+00, // 346
-1.668275302918828e-03, // 347
-4.588736480441663e+01, // 348
 3.049022273880129e-04, // 349
 1.516083019868106e-01, // 350
-7.337247497551642e-02, // 351
 1.829395411965633e+00, // 352
-1.627730162638579e+00, // 353
 1.049543705902742e-05, // 354
 3.180955656121869e+02, // 355
 1.186019252960900e+00, // 356
 3.633589729013927e-06, // 357
 1.107604508854894e+00, // 358
-7.680544965919997e-03, // 359
 4.496300495624812e-01, // 360
 2.378004627151676e-02, // 361
 2.194745743163675e-03, // 362
-2.020213900646836e+01, // 363
 2.746136820905370e+00, // 364
-5.242766601581837e+00, // 365
-2.383380251960106e-04, // 366
-3.008733155253546e-02, // 367
-1.323035632011738e-01, // 368
 1.719224915212690e+00, // 369
 7.768294706000048e-05, // 370
 8.201070481305062e+02, // 371
 3.413301512021946e-02, // 372
-7.382736233351893e-06, // 373
 6.473757953104300e-02, // 374
 6.083254107683768e-01, // 375
-5.770902165854144e-01, // 376
 5.389078454731008e-03, // 377
 3.452873657669494e+00, // 378
 1.687730000728718e+01, // 379
 1.233998766345929e-03, // 380
-4.843255130506341e+00, // 381
 5.300866967992387e-05, // 382
 3.661369688211276e-05, // 383
-7.982490203761704e+02, // 384
 1.315805277104349e-03, // 385
-3.519299394715722e-05, // 386
-3.593919179583792e+02, // 387
 2.930256178798189e+00, // 388
-2.887666351455557e-02, // 389
-1.301288612434492e+02, // 390
 5.015096771042834e-02, // 391
-1.996678991699287e-01, // 392
 1.453016889869721e+00, // 393
-2.270967265372906e-05, // 394
 5.049892251889192e-04, // 395
-1.642309197704064e+00, // 396
 4.086166002397127e-03, // 397
 3.294002563090907e-01, // 398
-2.460744915543994e+00, // 399
 4.144138005272930e-01, // 400
-1.938249190461701e+01, // 401
 1.338937102693600e-06, // 402
-2.356408459185240e-02, // 403
-1.081332722066269e-02, // 404
-3.679242068109525e-01, // 405
-3.670839366423945e+00, // 406
-2.870818974787913e-03, // 407
-2.010714084059115e+00, // 408
 6.686080354363419e-04, // 409
 1.238166877208470e+01, // 410
-1.320601389291211e+01, // 411
-2.489348450980075e-03, // 412
 3.131985162692121e+02, // 413
 2.392288013181083e+01, // 414
-4.584322715530548e-01, // 415
-8.091371299747802e-04, // 416
-1.014594841802688e-01, // 417
 6.341562906499705e-02, // 418
 4.432589563590560e-02, // 419
 5.693302612515595e-03, // 420
 3.453284430305435e-02, // 421
 1.429096899251993e-02, // 422
-1.248642572943248e-04, // 423
-1.328835761280464e-01, // 424
 1.294407009555532e-03, // 425
 2.835108596518610e-02, // 426
 6.483868759785738e-02, // 427
 2.294736889512747e-02  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         1.608881037806864e-01; // A^(-1)
    m_k_OH_intra =         2.643491762047780e-01; // A^(-1)
                           
    m_k_XH_coul =          8.543520931649833e-01; // A^(-1)
    m_k_XO_coul =          8.350079686876681e-01; // A^(-1)
                           
    m_k_XLp_main =         1.008466716100759e+00; // A^(-1)
                           
    m_d_HH_intra =         1.919523883502627e-01; // A^(-1)
    m_d_OH_intra =         1.835456141926950e+00; // A^(-1)
                           
    m_d_XH_coul =          5.923128108874295e+00; // A^(-1)
    m_d_XO_coul =          6.999733618259895e+00; // A^(-1)
                           
    m_d_XLp_main =         4.612804615962554e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
     m_out_of_plane_gamma= 9.859272078406150e-02;

    m_r2i =  5.000000000000000e+00; // A
    m_r2f =  6.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_f_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_f_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_f_cutoff(double* r)
#else
void mbnrg_2b_h2o_f_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
