#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-2.847309636135063e+02, // 0
-4.738693224719817e+02, // 1
 1.419414907054816e+02, // 2
 4.422068613778172e+01, // 3
 1.024801204248153e+01, // 4
 8.612851074250754e+01, // 5
-3.995417390290023e+02, // 6
-4.422603106798299e+01, // 7
 8.901435065775894e+02, // 8
-1.609522030239720e+02, // 9
 1.312145733039189e+02, // 10
-3.941240216109864e+01, // 11
 3.113172870270872e+00, // 12
-5.438581289755215e+01, // 13
-3.926113299002354e+01, // 14
-1.233858153857757e+02, // 15
 5.752568060837094e+02, // 16
-1.767249582872776e+02, // 17
 1.080879643858617e+01, // 18
 3.394725924451600e+02, // 19
-3.284615515558257e+02, // 20
-5.008927280163138e+01, // 21
 1.693521911592467e+01, // 22
-2.094994795693318e-01, // 23
 4.430079100446491e+01, // 24
 7.311574281559463e+01, // 25
-1.556498349350072e+02, // 26
 1.953928420159408e+02, // 27
-7.045060362785458e+00, // 28
 5.060779913164476e+01, // 29
-8.700309682610746e+00, // 30
-1.864449191746140e+01, // 31
 2.685805153373249e+00, // 32
-2.160271371480844e+01, // 33
 1.927702446030668e+02, // 34
-9.412597867335812e+00, // 35
-1.071038918647715e+00, // 36
-1.390698395881244e+02, // 37
 1.547718985546068e+02, // 38
 7.523095943841772e+02, // 39
-2.080857735987299e+02, // 40
 1.134545181152724e+01, // 41
 4.781175096182187e-02, // 42
-6.549027072291143e-01, // 43
 9.508926475880597e+01, // 44
 5.748250518582046e+01, // 45
-3.152988023801182e+01, // 46
 1.009789304455781e+02, // 47
 1.979717520354826e+01, // 48
 6.547181990791867e+00, // 49
-8.662176682820546e+00, // 50
 1.515149240530161e+00, // 51
 1.564247796843307e+02, // 52
 8.274345990134667e+02, // 53
-2.967132108409104e+02, // 54
-1.480985749280944e+03, // 55
 3.808621452174522e-01, // 56
-5.759675490149161e+01, // 57
-4.194218476500528e+02, // 58
 5.429761574043450e+02, // 59
-9.340660851180441e+00, // 60
-1.080547515137955e+02, // 61
-6.303914439698974e-01, // 62
 2.122900444580834e+01, // 63
 2.462640447046695e+00, // 64
-6.594752541868552e+01, // 65
 1.866869030877309e+01, // 66
-4.911614416262722e+01, // 67
-2.803407966553383e+02, // 68
 1.740586472649052e-02, // 69
-4.259901190270036e-01, // 70
-8.072674391429785e-02, // 71
 7.462959668391586e-01, // 72
 4.075853813051440e+02, // 73
 3.253098212172178e+01, // 74
 1.200756546061535e+01, // 75
-5.000077249323794e+00, // 76
 1.816345827512575e+01, // 77
-1.024751151050518e+02, // 78
-1.066483089070630e+01, // 79
-5.653147818068927e-02, // 80
-1.446563358337396e+01, // 81
 8.093073783166047e-01, // 82
 1.754686469101001e-03, // 83
 2.146627110081234e-02, // 84
-3.852731416692596e-03, // 85
-2.682055385311947e+02, // 86
-2.180548277535185e-01, // 87
-7.050702473742449e+02, // 88
 7.827069697757041e-01, // 89
 8.794343380656049e-02, // 90
-7.494872012202769e+00, // 91
-6.472961058002728e-02, // 92
-6.457683054148132e+02, // 93
-1.266537939337595e+01, // 94
 7.310178059949614e+00, // 95
 5.162003351560918e+00, // 96
 2.628326914975211e+02, // 97
-6.982728609557247e+02, // 98
-4.983014045773359e+01, // 99
 2.568376556899646e+00, // 100
 1.504203321996340e-02, // 101
-2.914493117680795e+00, // 102
 1.884988560268135e+01, // 103
-1.984123894764832e+01, // 104
-6.695000901523587e+00, // 105
-3.787924490569662e-01, // 106
 4.347149221135918e+01, // 107
 1.132343079101923e+01, // 108
 2.271115749534844e+00, // 109
 2.280954476131090e-01, // 110
-4.378411872785414e+00, // 111
-1.822038935790858e-01, // 112
-4.019804051263949e-03, // 113
 5.076779054290763e-01, // 114
 2.400021520735897e+01, // 115
 2.653550114367970e+00, // 116
 1.521042354490698e+01, // 117
 8.987294006293347e+00, // 118
 5.281665115368704e-01, // 119
-8.813850124700361e+00, // 120
 6.318245065421861e+01, // 121
 2.401777687658875e-04, // 122
 2.988469300499976e+02, // 123
-4.444160023415072e+00, // 124
 1.377202782554946e-01, // 125
-2.783490546253029e-01, // 126
 4.725786443467436e+02, // 127
 3.771839895666713e+00, // 128
-6.678601022284028e-02, // 129
-1.128342751244762e+01, // 130
-1.083232830429898e+02, // 131
 8.807683880086847e-01, // 132
-5.392737314674221e+01, // 133
-3.572250920367835e+00, // 134
 5.254578676717622e-02, // 135
 1.498265986138529e-01, // 136
 8.916610333515589e-01, // 137
 3.644278282359883e+01, // 138
-6.286526332294878e+00, // 139
 7.223121042392591e-04, // 140
-2.270936589523797e+01, // 141
-2.005245261762505e+00, // 142
 9.047010642418095e+02, // 143
 6.482491061900552e+01, // 144
-2.866294627677083e-02, // 145
 6.355107553655295e+00, // 146
-3.287581663089553e+00, // 147
-1.413624472527121e+03, // 148
 4.237762822757097e-01, // 149
 4.857439673109070e+01, // 150
 9.805674220363680e-01, // 151
 2.963181688622135e+00, // 152
-5.244494675071498e-03, // 153
 5.373367106852778e-05, // 154
 2.072462805408083e-01, // 155
-2.829718055034153e+01, // 156
-4.237360377658389e+00, // 157
 2.926218101320029e-04, // 158
 6.366955951106871e-01, // 159
-1.757096253686832e-01, // 160
-6.271120029022050e-04, // 161
 1.754483691847569e+01, // 162
 4.174096937772084e+01, // 163
 1.006514264004576e+02, // 164
 1.320687617436635e+00, // 165
-4.614627446296974e+01, // 166
 5.661030213222228e-02, // 167
 9.005579321797225e-01, // 168
-6.188330467319796e+01, // 169
-1.168137770849812e+01, // 170
-8.572230287428094e-02, // 171
 6.681953341611940e+00, // 172
-3.922530016621227e-02, // 173
-2.938339928275844e+00, // 174
-6.072378213408849e+00, // 175
-3.872519941660081e-01, // 176
 1.594322450233603e-01, // 177
-1.394146803863673e+01, // 178
 8.560964135450581e-01, // 179
-3.869380039554916e-02, // 180
 9.733468253629546e+01, // 181
 3.925899325173697e+00, // 182
 4.283025598051937e-01, // 183
 4.625518291787972e+02, // 184
-1.132526347079777e-02, // 185
 1.332395973639412e-03, // 186
-2.172431188354214e+00, // 187
 1.673499285331924e-04, // 188
-4.398634187037195e-04, // 189
 3.940438965899510e+01, // 190
 7.536622129008913e+01, // 191
 1.123748189027788e-03, // 192
-2.837672025923524e-01, // 193
-5.779595523320608e+01, // 194
 1.866665676745154e-02, // 195
 6.265252503067558e-06, // 196
-4.227554377611878e-01, // 197
 3.884035178745320e+00, // 198
 2.835288038470690e-02, // 199
 7.840665970344722e+00, // 200
-2.295277520032544e-04, // 201
 5.045046243349061e-02, // 202
 1.812001404069484e+00, // 203
 1.418312072060440e+00, // 204
-1.180704375511357e+01, // 205
 5.989508583069383e+00, // 206
-1.213078039653546e-02, // 207
 1.258924898852411e+02, // 208
-3.867924919013952e+01, // 209
-9.940507465813528e-07, // 210
-8.654444993550147e-06, // 211
-1.201599814992005e-03, // 212
-1.922765123822157e-04, // 213
 1.283809994586547e+00, // 214
 1.923359680468953e-02, // 215
-4.205164046230403e+00, // 216
-7.812002023445973e-01, // 217
 3.845784583138809e+00, // 218
-7.061641967930136e-03, // 219
 4.411043690308412e-03, // 220
 3.883355178427810e-04, // 221
 2.641671278751716e-02, // 222
-2.424662889370837e-01, // 223
-1.482792146782799e-03, // 224
 3.246697640889485e+02, // 225
-1.628544196225454e-04, // 226
-5.944321302377200e-07, // 227
-1.785882464155520e-02, // 228
 1.792648407017852e-02, // 229
-1.391367228250485e-01, // 230
 4.068142554473440e-01, // 231
 1.488986476435026e+00, // 232
 1.056649324103386e-03, // 233
-2.261117001683789e+00, // 234
-4.426358484812848e-02, // 235
 1.134819881522977e-01, // 236
-5.664454889634614e-01, // 237
-2.904010934670606e-01, // 238
-2.927045865385736e+02, // 239
 1.739667326055934e+00, // 240
-8.604130733273373e-02, // 241
 6.451639907935158e-04, // 242
-3.351185393860612e-01, // 243
-3.847722935978487e-05, // 244
 4.613710362577962e-06, // 245
-5.136636062146605e+00, // 246
 2.970284115058804e-03, // 247
 5.027771549138171e-02, // 248
-1.161077791288354e-04, // 249
-8.641595519402480e-03, // 250
-5.576019143823128e-01, // 251
-9.111635845492193e-02, // 252
 6.746828996430941e-01, // 253
-7.608303459727986e-02, // 254
 1.827850838689533e-01, // 255
-2.300062023061918e-01, // 256
-4.550643507822579e+00, // 257
-1.459565412627704e-04, // 258
-2.121778159512251e+02, // 259
-3.063466459395973e+01, // 260
 1.170108067108381e-01, // 261
 6.869949304711766e-04, // 262
 3.757577728468021e-01, // 263
-2.153783973865883e-01, // 264
 1.536060304422529e-01, // 265
 1.042118503090887e-03, // 266
 9.875400521444944e-02, // 267
 5.624274807997315e-04, // 268
 7.560652636847130e-07, // 269
-1.490640084014001e-01, // 270
-4.145455757621751e-04, // 271
 5.162250042091281e+01, // 272
 1.120940598672942e+00, // 273
 2.655690662167954e-02, // 274
 5.175830310938655e-04, // 275
-9.650650801051134e-01, // 276
 3.930142454787358e-07, // 277
-1.457182208750149e+00, // 278
 2.441918231944763e-01, // 279
-1.894861091504644e-03, // 280
 7.286717863680405e+00, // 281
 8.092858202711896e-02, // 282
 4.356744211972428e+00, // 283
 6.938495541878894e-03, // 284
 9.868427502157265e-04, // 285
 2.731282898523579e-01, // 286
-3.783659748359426e-03, // 287
-4.211297698412542e-03, // 288
-4.486908504879763e-03, // 289
-1.536688559341676e-02, // 290
 1.205994343467384e-02, // 291
-3.753006436380380e+00, // 292
-6.759352452159138e-03, // 293
-2.777676449943663e+01, // 294
-5.225603334382518e-01, // 295
 5.322663543431864e-02, // 296
-9.124173654432330e-01, // 297
 2.698315550734947e-04, // 298
 8.038029757578884e-04, // 299
 1.011596253481777e+00, // 300
-1.030090967368325e+01, // 301
 6.667327595283195e-06, // 302
-5.967368099773145e-01, // 303
-4.995365672265780e-04, // 304
-2.317423837290745e+00, // 305
-1.600663902598937e+01, // 306
 4.973966069009824e-06, // 307
 3.505410762048119e+01, // 308
-3.718615662277205e-06, // 309
 8.904724832717521e-01, // 310
-4.641082626990041e-03, // 311
 5.544216362598453e-03, // 312
 1.687851171752855e+01, // 313
 2.392274787445295e-04, // 314
-1.711156324949571e-01, // 315
 2.940767001208116e-03, // 316
-1.133442385653168e+01, // 317
 7.236119314600835e-05, // 318
 1.671919458294460e-03, // 319
-4.312511096256969e-02, // 320
 1.014582642150240e+01, // 321
-1.014543384799460e-02, // 322
-4.997549804235394e-03, // 323
-3.181328375607338e+00, // 324
 9.794278194483368e+00, // 325
-1.740285297875212e-02, // 326
 5.531884802709426e-01, // 327
-1.153200967993714e+01, // 328
-1.083977646822507e-03, // 329
-3.701553139508273e-06, // 330
-1.995465378116856e+01, // 331
 4.595940924081533e-02, // 332
-2.630845221103177e+00, // 333
-7.945092507306306e-02, // 334
 6.670387881898845e-06, // 335
 2.028540892292708e-02, // 336
 1.890838607205673e-03, // 337
-6.002263950958054e-01, // 338
 6.809227722693404e+00, // 339
-1.474551387763417e-03, // 340
 5.216630275047417e-05, // 341
-4.684277760474173e-02, // 342
-6.885353159351519e-02, // 343
-9.136696408957290e-03, // 344
-4.425417363327960e+00, // 345
-4.011789043230073e-02, // 346
-5.408482067148297e-03, // 347
 7.714554808758994e+02, // 348
-1.217899700355849e-02, // 349
 3.760373590622757e-03, // 350
 9.835380792666897e-02, // 351
-7.202947573830638e-02, // 352
-1.095957989314256e-02, // 353
 2.251874041570184e-04, // 354
-1.570976636735126e+01, // 355
 4.274895269016981e+00, // 356
-6.229284638258917e-05, // 357
-5.489934790170452e-01, // 358
-8.105153646171780e-03, // 359
 8.486223779611092e-02, // 360
-7.399918713316767e-05, // 361
-4.045623850750109e-01, // 362
-1.211168852556143e+00, // 363
 2.318838935515376e-03, // 364
 2.161805399046983e+00, // 365
 6.814494036553063e-04, // 366
-1.015513940486454e-01, // 367
-3.134142278588465e-02, // 368
-9.019350320134530e-02, // 369
-2.906135845318024e-06, // 370
-3.768983987018261e+01, // 371
-4.950248078077104e-04, // 372
-1.003294125600779e-03, // 373
-2.202925040543265e-01, // 374
-1.732967137528833e+01, // 375
-2.697813252788774e-01, // 376
-2.774120964127912e-02, // 377
-2.913733267681669e-01, // 378
 6.773785782094652e-01, // 379
-1.354193145706401e-03, // 380
 5.628805396313136e-01, // 381
 3.030008691286861e-03, // 382
-2.462631174822696e-04, // 383
-1.704359281985200e+02, // 384
 6.460343618534312e-02, // 385
-3.493226186057724e-07, // 386
-3.281643648440174e+01, // 387
 8.901342051854435e-01, // 388
 7.351486983604352e-03, // 389
 5.338502053490651e+00, // 390
-4.995439239621504e-01, // 391
-1.776875933417979e-01, // 392
-3.860662187287019e-02, // 393
 1.583608425821875e-05, // 394
-1.740270040732597e-03, // 395
 9.066250727065525e-04, // 396
-3.866621551167166e-03, // 397
 2.207073953362404e-01, // 398
-2.045033195311596e-01, // 399
 2.071594858788020e-01, // 400
-5.661751482702346e-01, // 401
-3.139575375181061e-05, // 402
-3.613733362175660e-03, // 403
 1.139525636809742e-02, // 404
 1.216905460912344e-01, // 405
 2.883416729770753e-02, // 406
 2.049792221309072e-04, // 407
-2.399133421583684e-02, // 408
 7.943127758928941e-04, // 409
 1.519868285387628e+00, // 410
 7.856602541753760e+00, // 411
-7.138019551046388e-03, // 412
-1.280330906749918e+02, // 413
-1.344337062579149e+00, // 414
-7.685991186864753e-02, // 415
 7.580442926493390e-03, // 416
 8.005193408218896e-02, // 417
 1.048390387652725e+02, // 418
-3.331021196485338e-04, // 419
-5.113366717158677e-02, // 420
 2.481544489811786e-01, // 421
-1.413377468987553e-05, // 422
 9.333731320610066e-03, // 423
-1.805011386522920e-05, // 424
 1.116210173800551e-08, // 425
 1.210488834157037e-02, // 426
-1.306384233792975e-01, // 427
-3.118021224805126e-01 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.064004876486227e-01; // A^(-1)
    m_k_OH_intra =         2.471256152027382e-01; // A^(-1)
                           
    m_k_XH_coul =          7.762750032738346e-01; // A^(-1)
    m_k_XO_coul =          9.933011248417245e-01; // A^(-1)
                           
    m_k_XLp_main =         5.999500550010335e-01; // A^(-1)
                           
    m_d_HH_intra =         1.998371950086630e+00; // A^(-1)
    m_d_OH_intra =         7.808340463268542e-01; // A^(-1)
                           
    m_d_XH_coul =          5.944227702072819e+00; // A^(-1)
    m_d_XO_coul =          6.670276150726455e+00; // A^(-1)
                           
    m_d_XLp_main =         6.624121317859796e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_k_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_k_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_k_cutoff(double* r)
#else
void mbnrg_2b_h2o_k_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
