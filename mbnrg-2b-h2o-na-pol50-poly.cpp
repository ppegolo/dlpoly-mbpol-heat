#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams  12/20/16
static const double the_poly[] = {
-7.914659341323259e+01, // 0
-8.062042303701506e+02, // 1
 3.258865594695232e+02, // 2
 3.980689280066844e+02, // 3
 9.588445520301916e+02, // 4
-1.089752672843168e+02, // 5
 6.840245140195393e+01, // 6
-5.171447284198700e+01, // 7
-3.398462091008727e+01, // 8
-1.638955698745522e+01, // 9
-2.941245641414508e+02, // 10
 7.064447773740233e+02, // 11
 1.636801637992249e+02, // 12
-1.125739346178728e+03, // 13
 2.574839605026171e+01, // 14
-4.370049235410300e+02, // 15
 7.396431586398282e+02, // 16
 3.311560455857816e+01, // 17
 1.556869471924003e+02, // 18
-5.097943634144531e+01, // 19
 8.872150944155902e-01, // 20
 3.392513138188989e+02, // 21
 6.730750052978546e+01, // 22
 9.099836948114215e+02, // 23
 2.167762381077988e+02, // 24
 1.169521605453678e+02, // 25
-2.084425257137717e+02, // 26
-1.733080222869291e+00, // 27
 2.233718742367923e+02, // 28
 5.150320679769241e+02, // 29
-3.510261075314330e+01, // 30
-7.697576146007960e+01, // 31
 4.559261886594840e+01, // 32
-2.298123014683522e+02, // 33
 3.899046119316169e+00, // 34
-1.886792037910755e+00, // 35
-6.168863637665513e+02, // 36
-6.090478390800984e+01, // 37
 1.460673407022071e+01, // 38
 3.111251979109137e+00, // 39
 5.963324854620238e+01, // 40
-7.654959599827680e+01, // 41
-9.298367783812259e+02, // 42
 2.117912460000615e+02, // 43
 1.968228243500872e+02, // 44
-3.780437005544552e+01, // 45
-1.487825119385395e+02, // 46
 3.227892912638914e+01, // 47
-4.916120971950343e+02, // 48
-2.549843297997109e+02, // 49
-6.081709421642896e+02, // 50
 6.730679899171599e+01, // 51
-2.768373092982047e-01, // 52
-5.386688546665830e+01, // 53
-4.424942555711417e+01, // 54
-3.966500570382123e+02, // 55
 5.267658204953644e+02, // 56
-1.147375574054353e+02, // 57
 2.391929237920911e+00, // 58
 6.197434740804046e+01, // 59
-1.874105805273511e+02, // 60
 5.167045575983330e+01, // 61
 1.691313262261183e+02, // 62
-8.226836270205317e+01, // 63
 1.411332321977274e+02, // 64
-1.297074503754252e+03, // 65
 7.729631686416219e+02, // 66
-1.690007370483292e+00, // 67
 5.415331581470236e-01, // 68
 7.182607549001499e+01, // 69
 1.340801362007967e+02, // 70
-6.744485812680388e+02, // 71
-1.006548617005940e+02, // 72
 1.180640139587964e+02, // 73
 1.597398989679681e+00, // 74
 1.540134632221103e+03, // 75
 2.515953191883365e+01, // 76
 5.301321155963368e+02, // 77
-4.215328072549153e+00, // 78
 8.118004104889681e+02, // 79
 1.798184910781182e+03, // 80
 1.110351608474281e+02, // 81
 3.626677839384740e+00, // 82
-9.117737446019421e+02, // 83
 4.544415741300317e+02, // 84
 1.034503534794807e+01, // 85
 2.061608051268009e+00, // 86
 1.666762262741255e+01, // 87
-2.717999398863825e+01, // 88
 1.473294960514246e+02, // 89
-1.371577386500185e+03, // 90
-1.350563957208722e+02, // 91
-8.107967234998226e+01, // 92
-2.206648889431013e+01, // 93
 1.930888450994271e+01, // 94
-4.187658058041760e+00, // 95
-4.107923594317340e+02, // 96
-4.871897761557368e+01, // 97
-6.748753747603401e+00, // 98
-4.175107056373009e+00, // 99
 7.557498517137190e+02, // 100
-2.339802743956585e+01, // 101
-8.263709845673473e+00, // 102
 4.400003342218177e+01, // 103
-1.025214119894754e+02, // 104
-1.484084133545923e+01, // 105
 3.638633782365631e+02, // 106
 4.680905503840466e+00, // 107
-3.823187558194891e+02, // 108
 7.059031461673463e-01, // 109
 6.607965864125194e+02, // 110
 4.787098012135405e+02, // 111
 8.855151006589705e+01, // 112
-3.159835119830781e+02, // 113
-5.001386963428482e+00, // 114
 8.755371563058694e-01, // 115
 3.804919944097686e+02, // 116
 2.892563723485385e-01, // 117
 2.041856611374041e-01, // 118
 4.753976447711609e+01, // 119
-1.386128075321265e+02, // 120
 1.403615421648671e+01, // 121
 1.442353821746537e+02, // 122
-2.736600028034549e+00, // 123
-1.527771444710934e+01, // 124
 2.277868158106738e+01, // 125
-1.214298332828851e+01, // 126
-1.543850293107752e+00, // 127
-7.425057476337258e+01, // 128
-2.485895749825514e+02, // 129
-1.073308367854322e+00, // 130
 2.680126344483802e+02, // 131
 7.404726876313251e+00, // 132
-3.084871305344289e+00, // 133
-9.903813801877759e+01, // 134
 1.259700015689743e+03, // 135
 3.705395368436909e+02, // 136
 2.389760278578207e+00, // 137
 6.538204213030887e-01, // 138
-1.176101923710045e+03, // 139
 9.113153711448234e+02, // 140
 1.559524728993552e+01, // 141
-8.298416499919624e+01, // 142
 5.203548489848322e+01, // 143
 3.228829353917811e+00, // 144
-6.224627046814637e+00, // 145
 2.174943784610453e+01, // 146
-3.236493383998331e+01, // 147
-1.046433685027275e+01, // 148
-1.581045533361825e+02, // 149
 1.116269098087227e+02, // 150
-7.012666247692756e+01, // 151
-5.210446485150823e+01, // 152
-6.514899703242102e+02, // 153
-2.053414439918813e+01, // 154
-3.092234869013324e+02, // 155
-4.660519931912078e+00, // 156
-4.928622530214200e+00, // 157
 3.822527594025045e+02, // 158
-2.346870297861086e+01, // 159
 3.188821284426790e+01, // 160
 1.007969376451979e+02, // 161
 4.529711594687885e+01, // 162
 1.039291130944086e+02, // 163
 1.849399731036657e+01, // 164
 6.816028927721712e+01, // 165
 1.153744861680168e+00, // 166
-2.861853312960160e+02, // 167
 2.883918076107609e+01, // 168
 1.175928952300330e+01, // 169
-1.456193291994027e+01, // 170
-2.167308698861414e+02, // 171
-7.595368906099054e+01, // 172
 3.237897417603111e+01, // 173
 2.487222693476470e+02, // 174
-1.858078789872983e+02, // 175
 1.990044030671306e+01, // 176
 5.857328265103397e+02, // 177
 1.884481831701502e+00, // 178
 5.040214604811370e+02, // 179
-8.701219560181565e+01, // 180
 1.295198955982640e+01, // 181
-3.379601831753065e+02, // 182
-2.200195297047382e+03, // 183
-2.018553211420953e+00, // 184
-6.695923770457921e+02, // 185
 1.322497664190278e+02, // 186
 1.099158581472385e+00, // 187
-1.600831733006812e+00, // 188
 4.827378519052604e+00, // 189
 2.036711559982266e+00, // 190
-1.761952036501274e-01, // 191
-5.275122822544302e+00, // 192
 1.175008123236274e+01, // 193
 7.736977130426171e-01, // 194
 1.016561005430179e+02, // 195
 4.257006932255057e+01, // 196
 3.411113337307472e+00, // 197
-2.302528452109979e-01, // 198
-1.500695134688365e+02, // 199
 2.581629881955095e+00, // 200
-1.151195889238677e+01, // 201
-8.496056963520482e+01, // 202
 8.937567377418866e+00, // 203
 1.876395850190123e+00, // 204
-7.286154613335066e+00, // 205
-2.159430658887227e+01, // 206
-1.030690015524591e+00, // 207
 2.816543887983636e-01, // 208
-1.513868797678501e+00, // 209
 1.164799247157059e+01, // 210
 1.805600210608609e+01, // 211
 5.736155241019953e+02, // 212
-1.683967655955461e+01, // 213
 6.208841681723250e+00, // 214
 1.173274593068126e+02, // 215
-1.199549860933567e+00, // 216
-1.796897116474763e+00, // 217
 5.923600382280772e+00, // 218
 1.745977997109326e+01, // 219
 8.706723369531332e+00, // 220
 3.362985860626497e+01, // 221
-9.934923734307734e+00, // 222
-4.552964853082575e+00, // 223
 1.223362016589012e+02, // 224
 1.801575388670154e+00, // 225
 2.362800571157151e+01, // 226
 9.437581800265475e-01, // 227
 3.117721824728525e+00, // 228
 3.226804407674718e+02, // 229
-3.217774792269976e-01, // 230
 1.994022707294975e-01, // 231
 2.020680185202678e+00, // 232
 9.722705143537598e+01, // 233
 4.072653613947991e+01, // 234
 5.090832316397770e+02, // 235
-6.464236726927510e-01, // 236
 4.631805529799335e+01, // 237
-3.005398807268085e+02, // 238
-7.489211691746399e-01, // 239
 1.116501231743095e+03, // 240
-9.182412542569510e-01, // 241
-1.397486340556915e+02, // 242
-6.873181708878013e+02, // 243
 1.728289083373523e+01, // 244
 8.525869698382161e+00, // 245
 3.024060236913217e-01, // 246
 9.306185617379898e+00, // 247
 8.627687846813530e-02, // 248
 7.173243935207314e+01, // 249
-4.483726457084760e+02, // 250
 1.303165698906730e+00, // 251
 5.753413663419458e+02, // 252
 2.805646809646108e+00, // 253
 2.103844364126764e+01, // 254
 1.569921372270256e+01, // 255
-5.733062497496469e-01, // 256
 3.890002140724398e+01, // 257
-5.360527478336937e+01, // 258
 1.099676758431175e+01, // 259
-1.313199770520419e+00, // 260
-1.829489762278998e+00, // 261
-2.802707062772927e+02, // 262
 7.266043878077361e+00, // 263
-6.045801173355026e+00, // 264
 5.350898386902480e+02, // 265
-1.803632313243363e+02, // 266
 3.122962537154907e+00, // 267
-5.956268636055309e+00, // 268
-7.611920353947514e+00, // 269
 1.570894874289597e+01, // 270
-1.785841948028500e+01, // 271
 1.438591503738338e+01, // 272
-1.913490546586614e+02, // 273
-1.079384940307252e+01, // 274
 4.822499208744527e+01, // 275
-1.706487685191473e+01, // 276
-5.737409166043696e+00, // 277
 4.782586546598695e+00, // 278
 2.825492214033071e+01, // 279
-8.525961288750713e+01, // 280
-8.736737962299593e+00, // 281
 1.795298833860887e+02, // 282
 1.218576084506389e+00, // 283
-2.142291558617891e+02, // 284
-3.826519141449179e+01, // 285
 9.457582994936699e+01, // 286
 5.841879270018958e+01, // 287
-5.119835326349983e+00, // 288
 2.536631669757332e+00, // 289
-7.040632031306008e+00, // 290
 1.704676598698087e+02, // 291
 1.258290108112537e+00, // 292
 1.793709882764311e+02, // 293
-6.243499734767493e-01, // 294
-3.935522542127296e+02, // 295
 4.298443923579063e-01, // 296
 1.459622661040913e+00, // 297
-1.051590859739584e+02, // 298
-5.192318258196372e+00, // 299
-1.137062963207626e+00, // 300
-4.827991187484272e+01, // 301
-5.748401501244657e+01, // 302
-1.610364235059609e-01, // 303
-1.732995116318289e+01, // 304
-6.638746094507327e-01, // 305
 1.274859672661887e+00, // 306
-5.952867561197986e+00, // 307
 1.947998374959462e+00, // 308
 1.366432252337049e+01, // 309
-1.498064572512258e-01, // 310
 5.685410741221217e+01, // 311
-2.669577063504678e+00, // 312
-4.353332236204492e-01, // 313
-1.902960309969601e+01, // 314
 6.169581432267654e+00, // 315
 7.925583439021177e+00, // 316
 1.427350386124048e-02, // 317
-8.097652069693535e+00, // 318
-6.136617362592639e+02, // 319
 9.466452942614454e-01, // 320
-4.996788400963027e-01, // 321
-6.463832890369193e-01, // 322
-4.437892132944645e+00, // 323
-4.227650240112143e+01, // 324
-4.836471487762236e-01, // 325
 1.355854022267422e+01, // 326
-1.319667571011282e+02, // 327
-1.992660641288072e+00, // 328
 4.592480266312154e+01, // 329
 1.004346007366359e+01, // 330
-7.987004655323808e+00, // 331
-7.220862197212131e+00, // 332
-5.946399169008265e+00, // 333
-7.536444325036871e+00, // 334
-7.355129875583978e+00, // 335
-1.079065775674665e+01, // 336
-1.711154314792598e-01, // 337
-1.303326967224654e+00, // 338
 2.114899493586575e+00, // 339
 1.441876093693609e+02, // 340
 1.207087513238701e+02, // 341
-2.973572367968930e+01, // 342
 6.536251730093609e+00, // 343
 1.530738157334915e+01, // 344
 1.416227628088105e-02, // 345
-1.767077505671954e+02, // 346
-1.003374851978287e+01, // 347
 3.084128335002470e+00, // 348
-3.910366499784941e+02, // 349
 1.361202759383678e+01, // 350
-4.077811958307112e+01, // 351
-7.904419156496242e+01, // 352
 7.237549663967197e+01, // 353
-1.165132545850753e+00, // 354
 1.106899047606072e+00, // 355
-2.898835341264465e+00, // 356
 3.620831554773343e+01, // 357
 9.118439844445579e-01, // 358
-8.233020198637259e+01, // 359
 3.322528805767275e-01, // 360
 3.418972505636786e+00, // 361
 5.519572675340694e-01, // 362
-2.144399287936952e+01, // 363
 2.937522367677791e+00, // 364
 9.297659193034969e+00, // 365
-1.225286516223198e+02, // 366
 1.239681318624048e+01, // 367
-3.164658524116413e+02, // 368
 2.150408850289433e+01, // 369
 3.823604782698035e+01, // 370
-1.035883553000728e-01, // 371
 5.054877041191953e+00, // 372
-1.924909278980489e+02, // 373
 2.439473071731861e+00, // 374
-2.170517345981180e+00, // 375
-2.157022510838940e+00, // 376
-2.469215918380581e+00, // 377
 4.645253668464828e+01, // 378
-7.702410606544334e+00, // 379
 1.362691473336483e+02, // 380
-2.680716537670835e+01, // 381
 2.709725851438817e+00, // 382
 2.312145634565775e+02, // 383
-9.719553000838546e-01, // 384
-6.892752716931668e+00, // 385
-6.699837638665572e+00, // 386
 1.924580417315291e+00, // 387
-3.076185474783279e+00, // 388
-3.739746809088440e+00, // 389
-1.375835075159245e+00, // 390
-8.962748681882328e-01, // 391
-3.370634706685159e+00, // 392
-1.299073083027121e+02, // 393
-2.859231968212997e+02, // 394
 4.419986085460258e+02, // 395
 1.291341059303895e+00, // 396
-5.697030071216610e+02, // 397
 1.561424216287551e+02, // 398
 3.373265337903891e+00, // 399
 9.203207665430259e+00, // 400
 2.223075031852303e+02, // 401
-1.614091285252801e+00, // 402
-9.954721795889320e+00, // 403
-1.041069648312643e+02, // 404
 5.090191515015890e+00, // 405
-5.958383960896557e-02, // 406
 5.255398075065057e+02, // 407
 3.347280817557148e-01, // 408
-8.349301913630701e+01, // 409
-3.758654695966680e+01, // 410
-5.890285702093402e-01, // 411
 3.697289925671806e+01, // 412
 8.004150263846649e-01, // 413
 4.988885820186285e+01, // 414
 5.824782714838868e+01, // 415
-4.612173449936828e+00, // 416
 3.681741033553272e+02, // 417
 2.674485375139047e+00, // 418
-1.332020453602064e+02, // 419
-4.473213905149094e+02, // 420
-1.634505646279537e-03, // 421
 1.091348008375181e+01, // 422
-3.494489190736262e-01, // 423
 6.359328765725562e+00, // 424
 1.697142572237051e+00, // 425
-2.240128814625389e+02, // 426
 3.287883147996691e+02, // 427
 3.719797571662550e-01 // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         3.321161909396534e-01; // A^(-1)
    m_k_OH_intra =         1.999932119813929e+00; // A^(-1)
                           
    m_k_XH_coul =          1.831034195649205e-01; // A^(-1)
    m_k_XO_coul =          7.023549089060371e-01; // A^(-1)
                           
    m_k_XLp_main =         8.970690021710719e-01; // A^(-1)
                           
    m_d_HH_intra =         1.999923858421108e+00; // A^(-1)
    m_d_OH_intra =         1.999999743732683e+00; // A^(-1)
                           
    m_d_XH_coul =          5.344755082101092e+00; // A^(-1)
    m_d_XO_coul =          4.238831734909894e+00; // A^(-1)
                           
    m_d_XLp_main =         2.930699586797454e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  5.500000000000000e+00; // A
    m_r2f =  6.500000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_na_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_na_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_na_cutoff(double* r)
#else
void mbnrg_2b_h2o_na_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
