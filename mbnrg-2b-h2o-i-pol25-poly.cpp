#include <cmath>
#include <algorithm>

#include "poly-2b-h2o-ion-v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o, int x );

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o, int x );

    void grads(const double& gg, double* xgrd, int o, int x ) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o, int x )
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o, int x)
{
    g[0] = xcrd[o++] - xcrd[x++];
    g[1] = xcrd[o++] - xcrd[x++];
    g[2] = xcrd[o]   - xcrd[x];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o, int x) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o++] += d;
        xgrd[x++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

////////////////////////////////////////////////////////////////////////////////

struct x2b_h2o_ion_v1x_p {
    x2b_h2o_ion_v1x_p();

    typedef h2o_ion::poly_2b_h2o_ion_v1x poly_type;

    double operator()(const double* w, const double* x,
                      double* g1, double* g2) const;

protected:
    double m_k_HH_intra;
    double m_k_OH_intra;

    double m_k_XH_coul;
    double m_k_XO_coul;

    double m_k_XLp_main;

    double m_d_HH_intra;
    double m_d_OH_intra;

    double m_d_XH_coul;
    double m_d_XO_coul;

    double m_d_XLp_main;

    double m_in_plane_gamma;
    double m_out_of_plane_gamma;

public:
    double m_r2i;
    double m_r2f;

    double f_switch(const double&, double&) const; // X-O separation

protected:
    double m_poly[poly_type::size];
};

////////////////////////////////////////////////////////////////////////////////

double x2b_h2o_ion_v1x_p::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_h2o_ion_v1x_p::operator()
    (const double* w, const double* x, double* g1, double* g2) const
{
    // the switch

    const double dXO[3] = {w[0] - x[0],
                           w[1] - x[1],
                           w[2] - x[2]};

    const double rXOsq = dXO[0]*dXO[0] + dXO[1]*dXO[1] + dXO[2]*dXO[2];
    const double rXO = std::sqrt(rXOsq);

    if (rXO > m_r2f)
        return 0.0;

    // offsets

    const int O  = 0;
    const int H1 = 3;
    const int H2 = 6;

    const int X   = 9;
    
    const int Lp1 = 12;
    const int Lp2 = 15;

    double xcrd[18]; // coordinates including extra-points

    std::copy(w, w + 9, xcrd);
    std::copy(x , x  + 9, xcrd + 9);

    // the extra-points

    monomer ma;

    ma.setup(xcrd + O,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xcrd + Lp1, xcrd + Lp2);

    // variables

//    const double d0_intra = 1.0;  //TODO MBpol values 
//    const double d0_inter = 4.0;

    double v[ 8]; // stored separately (gets passed to poly::eval)

    variable ctxt[8 ];

    v[0] = ctxt[0].v_exp(m_d_HH_intra, m_k_HH_intra, xcrd, H1, H2);

    v[1] = ctxt[1].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H1);
    v[2] = ctxt[2].v_exp(m_d_OH_intra, m_k_OH_intra, xcrd, O, H2);

    v[3] = ctxt[3].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H1);
    v[4] = ctxt[4].v_coul(m_d_XH_coul, m_k_XH_coul, xcrd, X, H2);
                            
    v[5] = ctxt[5].v_coul(m_d_XO_coul, m_k_XO_coul, xcrd, X, O);

    v[6] = ctxt[6].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp1);
    v[7] = ctxt[7].v_exp(m_d_XLp_main, m_k_XLp_main, xcrd, X, Lp2);

    double g[8 ];
    const double E_poly = h2o_ion::poly_2b_h2o_ion_v1x::eval(m_poly, v, g);

    double xgrd[18];
    std::fill(xgrd, xgrd + 18, 0.0);

   ctxt[0].grads(g[0], xgrd, H1, H2);
                       
    ctxt[1].grads(g[1], xgrd, O, H1);
    ctxt[2].grads(g[2], xgrd, O, H2);
                       
    ctxt[3].grads(g[3], xgrd, X, H1);
    ctxt[4].grads(g[4], xgrd, X, H2);

    ctxt[5].grads(g[5], xgrd, X, O);

    ctxt[6].grads(g[6], xgrd, X, Lp1);
    ctxt[7].grads(g[7], xgrd, X, Lp2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Lp1, xgrd + Lp2,
             m_in_plane_gamma, m_out_of_plane_gamma,
             xgrd + O);

    // the switch

    double gsw;
    const double sw = f_switch(rXO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] = sw*xgrd[i];
    }

    for (int i = 0; i < 3; ++i) {
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rXO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dXO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

//fit-fullpolargrid-fixedwaterparams 100%polfac 03/15/17
static const double the_poly[] = {
-1.298615731674540e+01, // 0
-3.992418394618359e+02, // 1
 1.242709125861770e+00, // 2
 1.914780444992664e+02, // 3
 1.618252630666466e+02, // 4
 3.172948857477956e+02, // 5
 5.383662786366482e+02, // 6
-3.121501477610049e+02, // 7
 2.253785486157045e+02, // 8
 4.569613443470065e+01, // 9
 2.089332698657717e+01, // 10
 5.852966838543834e+00, // 11
-5.963258113512209e+01, // 12
-1.482938091040115e+02, // 13
-1.728292166340340e+02, // 14
-1.270070220166118e+02, // 15
-2.792916607919051e+02, // 16
 1.943029207833705e+02, // 17
 1.532481276453994e+02, // 18
 2.500591974060530e+02, // 19
 2.556592488040236e+02, // 20
 2.512304314207708e+02, // 21
 1.271911712120708e+02, // 22
 5.860883984279519e-01, // 23
-2.463965041685360e+00, // 24
 2.156510998908445e+02, // 25
-4.148357710826389e+01, // 26
-1.284837126021495e+02, // 27
 1.018344704242574e+02, // 28
 4.471884529137045e+01, // 29
-2.158833055442194e+01, // 30
-1.486374177601853e+02, // 31
 9.894084685819436e+00, // 32
 4.055681342404525e+00, // 33
-3.423911070254497e+02, // 34
 3.254789063652058e+01, // 35
-8.589362008460907e-01, // 36
-4.975372428765185e+02, // 37
-1.544346355527959e+01, // 38
-1.483481454082925e+02, // 39
-4.949139254695383e+02, // 40
-1.339604680489291e+02, // 41
 1.816603525806428e-02, // 42
-2.516725538998875e+01, // 43
 1.309546322183307e+02, // 44
-1.019551882365601e+02, // 45
 1.089133874764535e+02, // 46
 6.449726012654014e+02, // 47
-1.671773926543833e+02, // 48
 1.598690641819035e+02, // 49
-1.390291565071554e+01, // 50
-9.078808056789937e+00, // 51
-7.450242843905383e+01, // 52
-5.109884373060387e+01, // 53
-1.151207513873781e+02, // 54
 1.314367104072437e+02, // 55
-7.481755153062469e-01, // 56
 2.984446544074199e+02, // 57
-2.044182980066745e+02, // 58
-1.530160789455738e+02, // 59
-2.278287339901819e+00, // 60
 5.595646848511602e+01, // 61
-2.996390987542629e+01, // 62
-2.992046587199625e+01, // 63
 8.887266539970072e+01, // 64
-1.676244749211727e+02, // 65
 1.925360202907175e+01, // 66
-5.506954735746854e+01, // 67
 2.790074771934841e+02, // 68
 1.548211224219006e+01, // 69
 3.476832673285918e-01, // 70
 2.551412034898362e+01, // 71
 3.400086705320141e+00, // 72
-7.118576434458605e+01, // 73
 1.937331574385099e+02, // 74
-6.127822708191571e+00, // 75
-3.376107200011384e+01, // 76
-1.069839393312313e+02, // 77
-2.640809555725631e+02, // 78
 1.199439774697091e+02, // 79
-2.670004234250317e-01, // 80
-4.929805974268076e+01, // 81
 4.456749847844338e+01, // 82
-6.630957222839989e-03, // 83
-1.069396249761490e+00, // 84
-1.108872020851385e+00, // 85
 2.613628613945337e+02, // 86
 3.980702098419831e+02, // 87
 8.208636757202098e+01, // 88
 6.953790166256388e+01, // 89
 4.038623563910466e+00, // 90
-2.264583364021032e+01, // 91
 4.564164917089892e-03, // 92
-4.432606391785781e+02, // 93
 1.223136012166299e+02, // 94
 2.436144545095821e+02, // 95
 4.299163490173524e+02, // 96
 1.688166294762955e+01, // 97
-1.586179996460883e+02, // 98
-7.537965018567625e+01, // 99
-2.565637594626394e+00, // 100
 1.241827710615665e+00, // 101
-5.171814459555363e+01, // 102
 1.377007249379219e+02, // 103
-1.385307853122209e+02, // 104
-2.998150048969765e+02, // 105
 2.488288322024389e+01, // 106
-8.916986919901996e+01, // 107
-1.563950024360810e+02, // 108
 5.219371424010289e+01, // 109
 1.698048233120266e-01, // 110
-1.169813013788204e+02, // 111
-1.767064419181158e-01, // 112
-3.388105215572945e-01, // 113
-1.301434161812907e+01, // 114
 2.190581142255664e+01, // 115
-1.826444312915196e+01, // 116
 1.911666087334788e+02, // 117
-2.862468296503096e+00, // 118
 5.249821971121715e-02, // 119
-6.247247257136245e+01, // 120
 2.486899264486571e+01, // 121
-2.046797383351457e-05, // 122
 1.968744482958300e+02, // 123
-1.299452460891668e+01, // 124
 1.867384725153854e+00, // 125
-1.976303078406175e+01, // 126
-5.356143626941464e+02, // 127
 1.251877768959160e+01, // 128
-2.623237162965411e+02, // 129
-3.670370828334230e-01, // 130
-2.008031167355946e+02, // 131
-5.042245561084965e+01, // 132
-3.715889249344035e+02, // 133
 6.136056685826655e-01, // 134
-4.874539722866175e-01, // 135
 3.686340200951084e+01, // 136
 1.271376345454171e+02, // 137
-8.281337906018845e+00, // 138
 5.858808461534064e+01, // 139
 4.218136883753476e-01, // 140
-9.606928854743067e+00, // 141
 3.714693670544225e+00, // 142
-1.046773622490631e+02, // 143
 2.247871850535001e+02, // 144
-1.235557321950963e-01, // 145
-2.628315912929771e+02, // 146
-3.462494709441017e+01, // 147
 9.056876961897486e+01, // 148
-2.305826671394562e-01, // 149
-3.178193673782872e+02, // 150
 1.698517085806078e+01, // 151
-3.346754786337841e+01, // 152
-3.584833742305964e-02, // 153
 1.072038869096491e-05, // 154
 2.760307362369337e+01, // 155
 1.849451833252587e+02, // 156
-6.924281918253132e+01, // 157
 4.548010048599747e-04, // 158
 1.716991568867180e+02, // 159
-4.142585316594372e-01, // 160
-1.718673351976215e+01, // 161
-3.154612102787163e+01, // 162
 1.602479715279253e+02, // 163
-8.817381861507783e+01, // 164
-9.630846171885002e+00, // 165
 3.456999286933290e+02, // 166
 2.184110234901647e-01, // 167
-1.012792901104272e+01, // 168
 1.534672864365366e+01, // 169
-1.259808881292386e+00, // 170
-1.335455614410600e+01, // 171
 8.866635850378190e+00, // 172
 2.862641083960647e+00, // 173
-4.871007914891720e+01, // 174
 2.453934026682961e+01, // 175
 2.903118985855233e-01, // 176
-5.062183505555514e+01, // 177
 8.125558088596387e+00, // 178
-4.669768238122541e+01, // 179
-8.971922096272742e-03, // 180
 1.996730186340976e+02, // 181
 7.168896837013968e+01, // 182
 2.111898319526159e+00, // 183
 3.221585104033983e+02, // 184
-1.698056106705500e+00, // 185
-5.772041108085282e-01, // 186
 6.958976827009838e+00, // 187
-1.073270732032271e-01, // 188
-2.425029941554862e-01, // 189
 7.525470183141242e+01, // 190
-1.269362026109771e+02, // 191
-2.794783648879072e-03, // 192
-6.070210163952215e+00, // 193
-2.258944928751508e+02, // 194
-1.220597707199426e+02, // 195
 2.245669722349921e-01, // 196
 2.223587281068701e+01, // 197
-2.431555138476093e+02, // 198
 2.162607807305551e-01, // 199
 1.137047843905206e+02, // 200
-2.990749809614536e-03, // 201
 6.575360316958426e-01, // 202
 2.369058611652362e+01, // 203
 3.807310261688892e+01, // 204
 4.303822923091218e+02, // 205
-3.308470563821086e+01, // 206
 4.094440450919726e+00, // 207
 1.236006747878351e+02, // 208
-1.131327877819141e+02, // 209
 2.008654066356564e-04, // 210
-1.745580643874685e-03, // 211
 2.180920132773343e+00, // 212
-3.676000753095918e-04, // 213
 2.145461398058250e+00, // 214
 6.513719812878774e+00, // 215
 1.574630280203512e+01, // 216
-1.955396674851816e+00, // 217
-1.629953024738182e+01, // 218
 5.242032532630372e-02, // 219
-5.198062605175926e-01, // 220
 6.600628522989540e-03, // 221
-6.646144430849885e-02, // 222
 1.706039331916473e-02, // 223
 2.072235282904845e-02, // 224
 2.076018175490373e+01, // 225
 8.469672709777645e-02, // 226
-8.184870876619971e-02, // 227
-6.051868097786172e+00, // 228
-3.791809455343081e+01, // 229
 1.418225658537622e+01, // 230
 9.688811124891267e-02, // 231
 5.610361462575497e+01, // 232
-2.978971281665243e+00, // 233
 6.890630140089754e-02, // 234
-1.064209061830619e+01, // 235
-3.897378774999301e-02, // 236
-8.483448308468541e+00, // 237
 1.360989037469150e+02, // 238
-2.446249305402538e+02, // 239
-7.645821080452137e+02, // 240
-6.185820014187549e-01, // 241
 8.104788339804729e-02, // 242
 4.474431789930099e+00, // 243
-3.234504783491488e-02, // 244
-2.675498591561258e-04, // 245
 1.714501615706425e+01, // 246
 2.306123860714687e-02, // 247
-3.003209670261993e+01, // 248
-1.720642635408215e-01, // 249
-3.068134052641719e+00, // 250
-3.877412115892100e+00, // 251
 8.043343011754082e+01, // 252
-2.344751937731135e+00, // 253
 2.696010117952100e+02, // 254
 4.767016031526625e+00, // 255
-1.121465062316564e+01, // 256
 4.481265145719744e+02, // 257
-4.654469105680934e-03, // 258
-3.964994858666959e+01, // 259
 4.751745755616562e+01, // 260
 6.938703331641137e-02, // 261
-3.518814993175803e-02, // 262
 6.232850594341180e+00, // 263
-6.132761824843799e+00, // 264
-1.006347336212928e+01, // 265
 2.381505286692910e-01, // 266
-1.257746907533365e+02, // 267
-5.588756268369603e-04, // 268
-9.744430745523609e-06, // 269
 6.295574514320593e+00, // 270
 2.689541433098103e-02, // 271
 1.476022362915222e+02, // 272
-5.231172580389058e+00, // 273
-8.025723438079453e-01, // 274
 2.061134693530186e-02, // 275
-1.530134677064861e+02, // 276
 1.910245051992404e-06, // 277
-2.310512496324273e+00, // 278
 2.413008201675437e+02, // 279
 2.926623798612804e+01, // 280
 1.843647642408072e+01, // 281
-3.565051062397840e+02, // 282
-1.261418432912663e+02, // 283
-3.700694831717303e-01, // 284
 4.288869104019435e-01, // 285
 6.064481649194494e+01, // 286
-1.474958866157343e-02, // 287
-5.106010270773774e-02, // 288
-4.790663933955140e+00, // 289
 3.712253426370243e+00, // 290
 2.673288205630205e-01, // 291
 3.971397008616337e+00, // 292
-8.312004139542389e-02, // 293
-2.016108137037332e+02, // 294
 5.813904574768040e+00, // 295
 6.469053144840590e-01, // 296
 1.440962589750419e+01, // 297
 1.366807662804922e-04, // 298
 6.236672390562548e-04, // 299
-7.451427765453690e+00, // 300
 2.767921085181059e+01, // 301
 6.151191102526211e-01, // 302
-2.723078024088410e-01, // 303
 2.788581390306612e-03, // 304
 8.369072185223642e+00, // 305
-8.115930357141636e+01, // 306
 3.033592204780204e-02, // 307
 1.621183478183710e+02, // 308
 6.244333318474288e-01, // 309
 8.018906081763033e+00, // 310
 3.394282149558938e+00, // 311
 3.915153449782515e-01, // 312
 5.312887363606237e-02, // 313
-3.202958977722083e-02, // 314
 1.416006043629360e+01, // 315
-6.935169303466389e+00, // 316
 3.035284761681873e+01, // 317
 5.605580681527848e+00, // 318
-2.693888427855592e+01, // 319
-2.321620946402106e-02, // 320
-6.483695563337332e+01, // 321
 1.098985973879924e+01, // 322
-7.437657476069425e-01, // 323
 6.936049241256392e-02, // 324
 2.682799376184294e+01, // 325
-3.259500020850226e+01, // 326
 2.083762373565952e+00, // 327
-7.511370943929166e+00, // 328
-8.984739614002095e-01, // 329
-1.707862334901061e-04, // 330
-1.597646886075869e+01, // 331
-9.302676214692727e+01, // 332
-4.158476518506681e+01, // 333
 6.846830613395764e+00, // 334
-7.373873012957759e-03, // 335
 1.139170159769252e+01, // 336
-1.472851105706052e+00, // 337
-3.158276837955458e+00, // 338
-3.694393414239091e+01, // 339
-6.833141229804870e-04, // 340
-1.624152057107890e+01, // 341
-6.080585058985614e-01, // 342
-4.235722454714826e+00, // 343
 3.991769945421958e-01, // 344
-6.289994139031399e+01, // 345
 1.476925186281329e-01, // 346
 1.517175469781846e+01, // 347
 4.393372766511492e+02, // 348
-2.111136698514399e+00, // 349
 3.684911563088502e-02, // 350
 7.734324607982118e-01, // 351
 1.802972600050754e+02, // 352
-3.691788689986864e-04, // 353
-6.524019226904414e-01, // 354
-6.681730178466897e+00, // 355
 5.147205763210932e+01, // 356
 1.818720997838927e-01, // 357
-7.740534087106968e-01, // 358
-2.362860285966804e+00, // 359
 6.364879962116422e-03, // 360
 2.092291233737541e-05, // 361
-3.342202360273082e+01, // 362
 2.023772607898167e+01, // 363
-1.144034341795137e-03, // 364
 6.649620630834113e+01, // 365
 7.742264450198822e-03, // 366
-2.045177935186705e+02, // 367
 1.257058055621008e+00, // 368
-9.829335626483705e-03, // 369
-2.192079378082526e-03, // 370
 8.289737562925954e+01, // 371
-6.930117991383592e-05, // 372
-1.068337536757667e+00, // 373
 1.566586781810743e+02, // 374
-3.668178437478453e+01, // 375
-2.168788690646382e+00, // 376
 7.693716168990193e+01, // 377
-9.319247918266820e+00, // 378
-2.885479889890760e+00, // 379
-1.224796574128976e-02, // 380
-1.096192442586429e+00, // 381
-6.810255920170933e-01, // 382
 4.546749123192784e-01, // 383
-9.516236639497521e+02, // 384
 9.988676299234015e+01, // 385
 2.380484831602562e-05, // 386
-3.790812928187017e+01, // 387
-3.596318133211592e+01, // 388
 2.666225313439616e+01, // 389
-4.221936718869005e-02, // 390
-5.491307518007611e+01, // 391
-1.788857285566513e+00, // 392
 2.705865200609004e-01, // 393
-2.119269368059008e-02, // 394
 1.224063735449230e-01, // 395
 3.297524522064917e-02, // 396
 3.096767503254111e-01, // 397
-2.223271559712146e+01, // 398
-2.643336947383281e-01, // 399
 4.713978281812797e-01, // 400
 6.495663424035697e-01, // 401
-2.396890882270486e-01, // 402
-1.362692313339664e+01, // 403
-1.823530105176405e+00, // 404
 1.465193929212382e+01, // 405
 1.926445275078690e-03, // 406
 1.168876797468160e-01, // 407
 2.002867573261979e-03, // 408
 2.823071583192025e+00, // 409
-7.245666453427488e+01, // 410
-6.456060800646422e+00, // 411
-2.843182763830484e+00, // 412
 2.797510300483594e+02, // 413
 3.264996628882974e+00, // 414
 1.203499190765046e-01, // 415
-1.908805894040335e-01, // 416
-6.223288404484658e-02, // 417
 3.012171868485506e+02, // 418
-5.895121886364077e-02, // 419
 4.245585488226774e+01, // 420
-3.548642156004485e+00, // 421
 1.193377104812725e-03, // 422
-3.420883724054394e+00, // 423
-1.991869272826425e-05, // 424
 2.062150984784340e-07, // 425
-5.696059149165841e-01, // 426
-1.697994889742094e+02, // 427
 2.378883580210632e+00  // 428
};

//----------------------------------------------------------------------------//

x2b_h2o_ion_v1x_p::x2b_h2o_ion_v1x_p()
{
    m_k_HH_intra =         2.028507583849540e-01; // A^(-1)
    m_k_OH_intra =         3.473526257577439e-01; // A^(-1)
                           
    m_k_XH_coul =          3.333605401147424e-01; // A^(-1)
    m_k_XO_coul =          1.183628395524303e+00; // A^(-1)
                           
    m_k_XLp_main =         7.150560570957736e-01; // A^(-1)
                           
    m_d_HH_intra =         1.073650773771311e+00; // A^(-1)
    m_d_OH_intra =         1.999272039788428e+00; // A^(-1)
                           
    m_d_XH_coul =          6.806775434855123e+00; // A^(-1)
    m_d_XO_coul =          6.922738307146918e+00; // A^(-1)
                           
    m_d_XLp_main =         4.738290645899935e+00; // A^(-1)
                           
    m_in_plane_gamma =     -9.721486914088159e-02;
    m_out_of_plane_gamma=  9.859272078406150e-02;

    m_r2i =  6.000000000000000e+00; // A
    m_r2f =  7.000000000000000e+00; // A

    std::copy(the_poly, the_poly + poly_type::size, m_poly);
};

//----------------------------------------------------------------------------//

static const x2b_h2o_ion_v1x_p the_model;

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

extern "C" {

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_poly(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#else
void mbnrg_2b_h2o_i_poly_(const double* w, const double* x ,
                    double* E, double* g1, double* g2)
#endif
{
    *E = the_model(w , x , g1, g2);
}

//----------------------------------------------------------------------------//

#ifdef BGQ
void mbnrg_2b_h2o_i_cutoff(double* r)
#else
void mbnrg_2b_h2o_i_cutoff_(double* r)
#endif
{
    *r = the_model.m_r2f;
}

//----------------------------------------------------------------------------//

} // extern "C"

////////////////////////////////////////////////////////////////////////////////
